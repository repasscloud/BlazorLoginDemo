@* @page "/policies/edit/{Id?}"
@using BlazorLoginDemo.Shared.Models.Policies
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Nav
@inject ILogger<TravelPolicyEdit> Log

<h1 class="display-6 mb-3">Edit Travel Policy</h1>

@if (loadError is not null)
{
  <div class="alert alert-danger"><strong>Couldn’t load:</strong> @loadError</div>
}
@if (!string.IsNullOrWhiteSpace(successMessage))
{
  <div class="alert alert-success alert-dismissible fade show" role="alert">
    @successMessage
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
  </div>
}

<EditForm Model="Model" OnValidSubmit="SaveAsync">
  <DataAnnotationsValidator />
  <ValidationSummary class="mb-3" />

  <ul class="nav nav-tabs mb-3" id="policyTabs" role="tablist">
    <li class="nav-item" role="presentation">
      <button class="nav-link active" id="tab-basic" data-bs-toggle="tab" data-bs-target="#pane-basic" type="button" role="tab">Basics</button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="tab-flights" data-bs-toggle="tab" data-bs-target="#pane-flights" type="button" role="tab">Flights</button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="tab-windows" data-bs-toggle="tab" data-bs-target="#pane-windows" type="button" role="tab">Booking Windows</button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="tab-dest" data-bs-toggle="tab" data-bs-target="#pane-dest" type="button" role="tab">Destinations</button>
    </li>
  </ul>

  <div class="tab-content" id="policyTabContent">
    <!-- BASICS -->
    <div class="tab-pane fade show active" id="pane-basic" role="tabpanel" aria-labelledby="tab-basic">
      <div class="row g-3">
        <!-- Policy ID (read-only) -->
        <div class="col-md-4">
          <label class="form-label">Policy ID</label>
          <input class="form-control" value="@Model.Id" readonly />
          @* <div class="form-text">Auto-generated NanoID (read-only).</div> *@
        </div>

        <!-- Policy Name -->
        <div class="col-md-8">
          <label class="form-label">Policy Name</label>
          <InputText class="form-control" @bind-Value="Model.PolicyName" />
          <ValidationMessage For="@(() => Model.PolicyName)" />
        </div>

        <!-- AvaClientId -->
        <div class="col-md-4">
          <label class="form-label">Client ID</label>
          <InputText class="form-control" @bind-Value="Model.AvaClientId" readonly />
          <ValidationMessage For="@(() => Model.AvaClientId)" />
        </div>

        <!-- Currency -->
        <div class="col-md-4">
          <label class="form-label">Default Currency (ISO 4217)</label>
          <InputSelect class="form-select" @bind-Value="Model.DefaultCurrencyCode">
            @foreach (var c in CurrencyOptions)
            {
              <option value="@c.Code">@c.Flag @c.Code</option>
            }

            @* Optional: if the model already has a code not in the list, show it so it doesn’t get lost *@
            @if (!string.IsNullOrWhiteSpace(Model.DefaultCurrencyCode) &&
                !CurrencyOptions.Any(x => x.Code == Model.DefaultCurrencyCode))
            {
              <option value="@Model.DefaultCurrencyCode">@Model.DefaultCurrencyCode</option>
            }
          </InputSelect>
          @* <div class="form-text">Stores the 3‑letter code (e.g., AUD, USD, EUR).</div> *@
          <ValidationMessage For="@(() => Model.DefaultCurrencyCode)" />
        </div>

        <!-- Max Flight Price -->
        <div class="col-md-4">
          <label class="form-label">Max Flight Price</label>
          <InputNumber class="form-control" @bind-Value="Model.MaxFlightPrice" step="0.01" min="0" />
          <ValidationMessage For="@(() => Model.MaxFlightPrice)" />
        </div>
      </div>
    </div>

    <!-- FLIGHTS -->
    <div class="tab-pane fade" id="pane-flights" role="tabpanel" aria-labelledby="tab-flights">
      <div class="row g-3">
        <!-- Default Cabin -->
        <div class="col-md-4">
          <label class="form-label">Default Cabin</label>
          <InputSelect class="form-select" @bind-Value="Model.DefaultFlightSeating">
            @foreach (var opt in CabinClassOptions)
            {
              <option value="@opt.Value">@opt.Label</option>
            }
          </InputSelect>
          <ValidationMessage For="@(() => Model.DefaultFlightSeating)" />
        </div>

        <!-- Max Cabin -->
        <div class="col-md-4">
          <label class="form-label">Max Cabin</label>
          <InputSelect class="form-select" @bind-Value="Model.MaxFlightSeating">
            @foreach (var opt in CabinClassOptions)
            {
              <option value="@opt.Value">@opt.Label</option>
            }
          </InputSelect>
          <ValidationMessage For="@(() => Model.MaxFlightSeating)" />
        </div>

        <!-- Cabin Coverage -->
        <div class="col-md-4">
          <label class="form-label">Cabin Class Coverage</label>
          <InputSelect class="form-select" @bind-Value="Model.CabinClassCoverage">
            @foreach (var opt in CabinCoverageOptions)
            {
              <option value="@opt.Value">@opt.Label</option>
            }
          </InputSelect>
          <ValidationMessage For="@(() => Model.CabinClassCoverage)" />
        </div>

        <!-- Nonstop switch -->
        <div class="col-12">
          <div class="form-check form-switch">
            <InputCheckbox class="form-check-input" id="nonstop" @bind-Value="Model.NonStopFlight" />
            <label class="form-check-label" for="nonstop">Require non‑stop flights</label>
          </div>
        </div>

        <!-- Included / Excluded airlines -->
        <div class="col-md-6">
          <label class="form-label">Included Airlines (IATA codes)</label>
          <InputText class="form-control" @bind-Value="Model.IncludedAirlineCodes" placeholder="QF,VA,NZ,SQ" />
          <div class="form-text">Comma-separated list, leave blank for “any”.</div>
          <ValidationMessage For="@(() => Model.IncludedAirlineCodes)" />
        </div>

        <div class="col-md-6">
          <label class="form-label">Excluded Airlines (IATA codes)</label>
          <InputText class="form-control" @bind-Value="Model.ExcludedAirlineCodes" placeholder="JQ,TR" />
          <div class="form-text">Comma-separated list, leave blank for “none”.</div>
          <ValidationMessage For="@(() => Model.ExcludedAirlineCodes)" />
        </div>
      </div>
    </div>

    <!-- BOOKING WINDOWS -->
    <div class="tab-pane fade" id="pane-windows" role="tabpanel" aria-labelledby="tab-windows">
      <div class="row g-3">
        <div class="col-md-4">
          <label class="form-label">Flight Booking From</label>
          <InputText class="form-control"
                    @bind-Value="Model.FlightBookingTimeAvailableFrom"
                    placeholder="hh:mm:ss" />
          <div class="form-text">Local time (hh:mm:ss)</div>
          <ValidationMessage For="@(() => Model.FlightBookingTimeAvailableFrom)" />
        </div>

        <div class="col-md-4">
          <label class="form-label">Flight Booking To</label>
          <InputText class="form-control"
                    @bind-Value="Model.FlightBookingTimeAvailableTo"
                    placeholder="hh:mm:ss" />
          <div class="form-text">Local time (hh:mm:ss)</div>
          <ValidationMessage For="@(() => Model.FlightBookingTimeAvailableTo)" />
        </div>

        <div class="col-md-4">
          <label class="form-label">Default Days In Advance</label>
          <InputNumber class="form-control" @bind-Value="Model.DefaultCalendarDaysInAdvanceForFlightBooking" min="0" />
          <ValidationMessage For="@(() => Model.DefaultCalendarDaysInAdvanceForFlightBooking)" />
        </div>

        <div class="col-12">
          <div class="form-check form-switch">
            <InputCheckbox class="form-check-input" id="sat" @bind-Value="Model.EnableSaturdayFlightBookings" />
            <label class="form-check-label" for="sat">Allow Saturday bookings</label>
          </div>
          <div class="form-check form-switch">
            <InputCheckbox class="form-check-input" id="sun" @bind-Value="Model.EnableSundayFlightBookings" />
            <label class="form-check-label" for="sun">Allow Sunday bookings</label>
          </div>
        </div>
      </div>
    </div>

    <!-- DESTINATIONS -->
    <div class="tab-pane fade" id="pane-dest" role="tabpanel" aria-labelledby="tab-dest">
      <div class="row g-3">
        <!-- Regions -->
        <div class="col-md-4">
          <label class="form-label">Allowed Regions</label>
          <select class="form-select" multiple size="8" @onchange="e => MultiSelectChanged(e, SelectedRegionIds)">
            @foreach (var r in AllRegions)
            {
              <option value="@r.Id" selected="@SelectedRegionIds.Contains(r.Id)">@r.Name</option>
            }
          </select>
          <div class="form-text">Selecting a region often implies multiple continents.</div>
        </div>

        <!-- Continents -->
        <div class="col-md-4">
          <label class="form-label">Allowed Continents</label>
          <select class="form-select" multiple size="8" @onchange="e => MultiSelectChanged(e, SelectedContinentIds)">
            @foreach (var c in AllContinents)
            {
              <option value="@c.Id" selected="@SelectedContinentIds.Contains(c.Id)">@c.Name (@c.IsoCode)</option>
            }
          </select>
          <div class="form-text">Add whole continents or specify individual countries.</div>
        </div>

        <!-- Countries -->
        <div class="col-md-4">
          <label class="form-label">Allowed Countries</label>
          <select class="form-select" multiple size="8" @onchange="e => MultiSelectChanged(e, SelectedCountryIds)">
            @foreach (var c in AllCountries)
            {
              <option value="@c.Id" selected="@SelectedCountryIds.Contains(c.Id)">
                <span class="me-1">@c.Flag</span>@c.Name (@c.IsoCode)
              </option>
            }
          </select>
          <div class="form-text">Use this to fine‑tune access beyond regions/continents.</div>
        </div>

        <div class="col-12">
          <hr />
        </div>

        <!-- Disabled Countries -->
        <div class="col-md-6">
          <label class="form-label">Disabled Countries (Exclusions)</label>
          <select class="form-select" multiple size="8" @onchange="e => MultiSelectChanged(e, SelectedDisabledCountryIds)">
            @foreach (var c in AllCountries)
            {
              <option value="@c.Id" selected="@SelectedDisabledCountryIds.Contains(c.Id)">
                <span class="me-1">@c.Flag</span>@c.Name (@c.IsoCode)
              </option>
            }
          </select>
          <div class="form-text">These are excluded even if their continent/region is enabled.</div>
        </div>

        <div class="col-md-6">
          <label class="form-label d-flex align-items-center gap-2">
            Current Selections
            <span class="badge bg-primary">@SelectedRegionIds.Count</span>
            <span class="badge bg-info text-dark">@SelectedContinentIds.Count</span>
            <span class="badge bg-success">@SelectedCountryIds.Count</span>
            <span class="badge bg-danger">@SelectedDisabledCountryIds.Count</span>
          </label>
          <div class="small">
            <strong>Regions:</strong> @string.Join(", ", AllRegions.Where(x => SelectedRegionIds.Contains(x.Id)).Select(x => x.Name))
          </div>
          <div class="small">
            <strong>Continents:</strong> @string.Join(", ", AllContinents.Where(x => SelectedContinentIds.Contains(x.Id)).Select(x => x.Name))
          </div>
          <div class="small">
            <strong>Countries:</strong> @string.Join(", ", AllCountries.Where(x => SelectedCountryIds.Contains(x.Id)).Select(x => x.Name))
          </div>
          <div class="small">
            <strong>Disabled:</strong> @string.Join(", ", AllCountries.Where(x => SelectedDisabledCountryIds.Contains(x.Id)).Select(x => x.Name))
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="d-flex gap-2 mt-4">
    <button type="submit" class="btn btn-primary">
      <i class="bi bi-check2-circle me-1"></i> Save Policy
    </button>
    <button type="button" class="btn btn-outline-secondary" @onclick="Cancel">
      Cancel
    </button>
  </div>
</EditForm>

@code {
    [Parameter] public string? Id { get; set; }

    // The policy being edited
    public TravelPolicy Model { get; set; } = default!;

    // Option sources (populate from API later)
    public List<Region> AllRegions { get; set; } = new();
    public List<Continent> AllContinents { get; set; } = new();
    public List<Country> AllCountries { get; set; } = new();

    // Multi-select backing values (IDs only)
    public HashSet<int> SelectedRegionIds { get; set; } = new();
    public HashSet<int> SelectedContinentIds { get; set; } = new();
    public HashSet<int> SelectedCountryIds { get; set; } = new();
    public HashSet<int> SelectedDisabledCountryIds { get; set; } = new();

    // UI state
    private string? loadError;
    private string successMessage = string.Empty;

    // Select options (tune if your validators expect different tokens)
    private static readonly (string Value, string Label)[] CabinClassOptions =
    [
        ("ECONOMY",         "Economy"),
        ("PREMIUM_ECONOMY", "Premium Economy"),
        ("BUSINESS",        "Business"),
        ("FIRST",           "First")
    ];

    private static readonly (string Value, string Label)[] CabinCoverageOptions =
    [
        ("MOST_SEGMENTS", "Most Segments"),
        ("ALL_SEGMENTS",  "All Segments")
    ];

    private static readonly (string Code, string Flag)[] CurrencyOptions =
    [
        ("AUD", "🇦🇺"),
        ("USD", "🇺🇸"),
        ("EUR", "🇪🇺"),
        ("GBP", "🇬🇧"),
        ("JPY", "🇯🇵"),
        ("CHF", "🇨🇭"),
        ("CAD", "🇨🇦"),
        ("CNY", "🇨🇳"),
        ("HKD", "🇭🇰"),
        ("SGD", "🇸🇬"),
        ("NZD", "🇳🇿")
    ];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // TODO: Replace with API calls
            await LoadOptionSourcesAsync();

            if (!string.IsNullOrWhiteSpace(Id))
            {
                // TODO: GET /api/travelpolicies/{Id}
                Model = CreateSamplePolicy(Id); // remove when API wired
                MapModelCollectionsToSelections();
            }
            else
            {
                // New policy defaults
                Model = new TravelPolicy
                {
                    Id = NanoidDotNet.Nanoid.Generate(
                    alphabet: NanoidDotNet.Nanoid.Alphabets.LettersAndDigits.ToUpper(),
                    size: 14),
                    PolicyName = "New Travel Policy",
                    DefaultCurrencyCode = "AUD"
                };
            }
        }
        catch (Exception ex)
        {
            loadError = ex.Message;
            Log.LogError(ex, "Failed to initialize TravelPolicyEdit");
        }
    }

    private Task LoadOptionSourcesAsync()
    {
    // TODO: call your APIs to populate AllRegions/AllContinents/AllCountries
    // Sample seed for design/dev:
        AllRegions = new()
        {
            new Region { Id = 1, Name = "APAC" },
            new Region { Id = 2, Name = "EMEA" },
            new Region { Id = 3, Name = "AMER" }
        };

        AllContinents = new()
        {
            new Continent { Id = 1, Name = "Asia", IsoCode = "AS" },
            new Continent { Id = 2, Name = "Europe", IsoCode = "EU" },
            new Continent { Id = 3, Name = "Oceania", IsoCode = "OC" }
        };

        AllCountries = new()
        {
            new Country { Id = 36, Name = "Australia", IsoCode = "AU", Flag = "🇦🇺" },
            new Country { Id = 554, Name = "New Zealand", IsoCode = "NZ", Flag = "🇳🇿" },
            new Country { Id = 702, Name = "Singapore", IsoCode = "SG", Flag = "🇸🇬" },
            new Country { Id = 826, Name = "United Kingdom", IsoCode = "GB", Flag = "🇬🇧" },
            new Country { Id = 840, Name = "United States", IsoCode = "US", Flag = "🇺🇸" }
        };

        return Task.CompletedTask;
    }

    private void MapModelCollectionsToSelections()
    {
        SelectedRegionIds = Model.Regions is null
            ? new() : Model.Regions.Select(r => r.Id).ToHashSet();

        SelectedContinentIds = Model.Continents is null
            ? new() : Model.Continents.Select(c => c.Id).ToHashSet();

        SelectedCountryIds = Model.Countries is null
            ? new() : Model.Countries.Select(c => c.Id).ToHashSet();

        SelectedDisabledCountryIds = Model.DisabledCountries is null
            ? new() : Model.DisabledCountries.Select(dc => dc.CountryId).ToHashSet();
    }

    private void MapSelectionsToModelCollections()
    {
        Model.Regions = AllRegions.Where(r => SelectedRegionIds.Contains(r.Id)).ToList();
        Model.Continents = AllContinents.Where(c => SelectedContinentIds.Contains(c.Id)).ToList();
        Model.Countries = AllCountries.Where(c => SelectedCountryIds.Contains(c.Id)).ToList();
        Model.DisabledCountries = SelectedDisabledCountryIds
            .Select(id => new TravelPolicyDisabledCountry { TravelPolicyId = Model.Id, CountryId = id })
            .ToList();
    }

    private async Task SaveAsync()
    {
        successMessage = string.Empty;

        MapSelectionsToModelCollections();

        try
        {
            // TODO:
            // if (string.IsNullOrWhiteSpace(Id)) POST /api/travelpolicies
            // else PUT /api/travelpolicies/{Id}
            await Task.Delay(250); // simulate

            successMessage = "Travel Policy saved.";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            loadError = $"Save failed: {ex.Message}";
            Log.LogError(ex, "Save failed");
        }
    }

    private void Cancel() => Nav.NavigateTo("/policies");

    private void UppercaseCurrency(ChangeEventArgs e)
    {
        var val = e.Value?.ToString()?.ToUpperInvariant() ?? "";
        Model.DefaultCurrencyCode = val;
    }

    private void MultiSelectChanged(ChangeEventArgs e, HashSet<int> targetSet)
    {
        // Blazor gives a string or string[] depending on selection
        targetSet.Clear();
        if (e.Value is not null)
        {
            if (e.Value is IEnumerable<string> many)
            {
                foreach (var s in many) if (int.TryParse(s, out var id)) targetSet.Add(id);
            }
            else
            {
                var s = e.Value.ToString();
                if (int.TryParse(s, out var id)) targetSet.Add(id);
            }
        }
    }

    // Remove when API is ready — helps you visualize the page.
    private static TravelPolicy CreateSamplePolicy(string id) => new()
    {
        Id = id,
        PolicyName = "Corporate Default",
        AvaClientId = "CLIENT-123",
        DefaultCurrencyCode = "AUD",
        MaxFlightPrice = 1500m,
        DefaultFlightSeating = "ECONOMY",
        MaxFlightSeating = "BUSINESS",
        CabinClassCoverage = "MOST_SEGMENTS",
        NonStopFlight = false,
        IncludedAirlineCodes = "QF,VA,NZ",
        ExcludedAirlineCodes = "JQ",
        FlightBookingTimeAvailableFrom = "06:00:00",
        FlightBookingTimeAvailableTo = "22:00:00",
        EnableSaturdayFlightBookings = false,
        EnableSundayFlightBookings = true,
        DefaultCalendarDaysInAdvanceForFlightBooking = 2
    };
} *@
