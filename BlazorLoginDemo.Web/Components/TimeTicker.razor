@using Microsoft.JSInterop
@inject IJSRuntime JS
@inject NavigationManager Nav
@implements IAsyncDisposable

<div class="d-inline-flex align-items-center gap-4">
    <span class="d-inline-flex align-items-center" title="Coordinated Universal Time">
        <span class="me-2" aria-hidden="true">üåç</span>
        <strong>@_utcString</strong>
    </span>

    <span class="d-inline-flex align-items-center" title="@_timeZoneDisplay">
        <span class="me-2" aria-hidden="true">üïí</span>
        <strong>@_localString</strong>
    </span>
</div>

@code {
    private IJSObjectReference? _module;
    private DotNetObjectReference<TimeTicker>? _dotNetRef;

    private string _utcString = "--:--:--";
    private string _localString = "--:--:--";
    private string _timeZoneDisplay = "Local time";
    private System.Timers.Timer? _utcTimer;

    [JSInvokable]
    public void UpdateLocalFromJs(string local)
    {
        _localString = local;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        // Build a base-aware absolute path so it works under virtual directories too
        var moduleUrl = new Uri(new Uri(Nav.BaseUri), "/js/timeTicker.js").ToString();
        _module = await JS.InvokeAsync<IJSObjectReference>("import", moduleUrl);

        _timeZoneDisplay = await _module.InvokeAsync<string>("getTimeZone");

        _dotNetRef = DotNetObjectReference.Create(this);
        await _module.InvokeVoidAsync("startLocalTicker", _dotNetRef);

        _utcTimer = new System.Timers.Timer(1000);
        _utcTimer.Elapsed += (_, __) =>
        {
            _utcString = DateTimeOffset.UtcNow.ToString("HH:mm:ss");
            InvokeAsync(StateHasChanged);
        };
        _utcTimer.AutoReset = true;
        _utcTimer.Start();
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (_module is not null)
                await _module.InvokeVoidAsync("stopLocalTicker");
        }
        catch { /* ignore */ }

        _utcTimer?.Stop();
        _utcTimer?.Dispose();
        _dotNetRef?.Dispose();

        if (_module is not null)
            await _module.DisposeAsync();
    }
}
