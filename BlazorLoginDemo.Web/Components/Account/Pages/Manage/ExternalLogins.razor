@page "/Account/Manage/ExternalLogins"

@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BlazorLoginDemo.Web.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IUserStore<ApplicationUser> UserStore
@inject IdentityRedirectManager RedirectManager

<PageTitle>Manage your external logins</PageTitle>

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-10 col-xl-8">
            <div class="card shadow-sm">
                <div class="card-header">
                    <h4 class="mb-0">Manage Your External Logins</h4>
                </div>

                <div class="card-body">
                    <StatusMessage />

                    @if (currentLogins?.Count > 0)
                    {
                        <h5 class="mb-3">Registered Logins</h5>
                        <div class="table-responsive">
                            <table class="table align-middle table-hover">
                                <tbody>
                                    @foreach (var login in currentLogins)
                                    {
                                        <tr>
                                            <td class="fw-medium">@login.ProviderDisplayName</td>
                                            <td class="text-end">
                                                @if (showRemoveButton)
                                                {
                                                    <form @formname="@($"remove-login-{login.LoginProvider}")" @onsubmit="OnSubmitAsync" method="post" class="d-inline">
                                                        <AntiforgeryToken />
                                                        <input type="hidden" name="@nameof(LoginProvider)" value="@login.LoginProvider" />
                                                        <input type="hidden" name="@nameof(ProviderKey)" value="@login.ProviderKey" />
                                                        <button type="submit" class="btn btn-sm btn-outline-danger"
                                                                title="Remove this @login.ProviderDisplayName login from your account">
                                                            Remove
                                                        </button>
                                                    </form>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }

                    @if (otherLogins?.Count > 0)
                    {
                        <hr class="my-4" />
                        <h5 class="mb-3">Add Another Service</h5>
                        <form action="Account/Manage/LinkExternalLogin" method="post" class="d-flex flex-wrap gap-2">
                            <AntiforgeryToken />
                            @foreach (var provider in otherLogins)
                            {
                                <button type="submit"
                                        class="btn btn-outline-primary"
                                        name="Provider"
                                        value="@provider.Name"
                                        title="Log in using your @provider.DisplayName account">
                                    @provider.DisplayName
                                </button>
                            }
                        </form>
                    }
                </div>

                <div class="card-footer text-end">
                    <a class="btn btn-outline-secondary btn-sm" href="/Account/Manage">Back to Account Settings</a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public const string LinkLoginCallbackAction = "LinkLoginCallback";

    private ApplicationUser user = default!;
    private IList<UserLoginInfo>? currentLogins;
    private IList<AuthenticationScheme>? otherLogins;
    private bool showRemoveButton;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private string? LoginProvider { get; set; }

    [SupplyParameterFromForm]
    private string? ProviderKey { get; set; }

    [SupplyParameterFromQuery]
    private string? Action { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        currentLogins = await UserManager.GetLoginsAsync(user);
        otherLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync())
            .Where(auth => currentLogins.All(ul => auth.Name != ul.LoginProvider))
            .ToList();

        string? passwordHash = null;
        if (UserStore is IUserPasswordStore<ApplicationUser> userPasswordStore)
        {
            passwordHash = await userPasswordStore.GetPasswordHashAsync(user, HttpContext.RequestAborted);
        }

        showRemoveButton = passwordHash is not null || currentLogins.Count > 1;

        if (HttpMethods.IsGet(HttpContext.Request.Method) && Action == LinkLoginCallbackAction)
        {
            await OnGetLinkLoginCallbackAsync();
        }
    }

    private async Task OnSubmitAsync()
    {
        var result = await UserManager.RemoveLoginAsync(user, LoginProvider!, ProviderKey!);
        if (!result.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: The external login was not removed.", HttpContext);
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("The external login was removed.", HttpContext);
    }

    private async Task OnGetLinkLoginCallbackAsync()
    {
        var userId = await UserManager.GetUserIdAsync(user);
        var info = await SignInManager.GetExternalLoginInfoAsync(userId);
        if (info is null)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Could not load external login info.", HttpContext);
        }

        var result = await UserManager.AddLoginAsync(user, info);
        if (!result.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: The external login was not added. External logins can only be associated with one account.", HttpContext);
        }

        await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

        RedirectManager.RedirectToCurrentPageWithStatus("The external login was added.", HttpContext);
    }
}
