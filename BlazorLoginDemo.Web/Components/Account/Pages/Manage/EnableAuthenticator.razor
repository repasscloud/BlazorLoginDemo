@page "/Account/Manage/EnableAuthenticator"

@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Forms

@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject UrlEncoder UrlEncoder
@inject IdentityRedirectManager RedirectManager
@inject ILogger<EnableAuthenticator> Logger

<PageTitle>Configure authenticator app</PageTitle>

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-10 col-xl-8">

            @if (recoveryCodes is not null)
            {
                <ShowRecoveryCodes RecoveryCodes="recoveryCodes.ToArray()" StatusMessage="@message" />
            }
            else
            {
                <div class="card shadow-sm">
                    <div class="card-header">
                        <h4 class="mb-0">Configure authenticator app</h4>
                    </div>

                    <div class="card-body">
                        <StatusMessage Message="@message" />

                        <p>To use an authenticator app, complete these steps:</p>
                        <ol class="ps-3">
                            <li class="mb-3">
                                Download a two-factor authenticator app like Microsoft Authenticator for
                                <a href="https://go.microsoft.com/fwlink/?Linkid=825072" target="_blank">Android</a> or
                                <a href="https://go.microsoft.com/fwlink/?Linkid=825073" target="_blank">iOS</a>,
                                or Google Authenticator for
                                <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&hl=en" target="_blank">Android</a> or
                                <a href="https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8" target="_blank">iOS</a>.
                            </li>

                            <li class="mb-3">
                                Scan the QR code or enter this key: <kbd>@sharedKey</kbd> into your app.  
                                Spaces and casing do not matter.
                                <div class="alert alert-info mt-2 small">
                                    Learn how to <a href="https://go.microsoft.com/fwlink/?Linkid=852423" target="_blank">enable QR code generation</a>.
                                </div>
                                <div class="mt-3">
                                    <div data-url="@authenticatorUri" class="border p-3 bg-light text-center">
                                        <!-- Placeholder for QR code rendering -->
                                        <em>QR code will be generated here</em>
                                    </div>
                                </div>
                            </li>

                            <li>
                                Once scanned or entered, your app will display a unique code. Enter that code below:
                                <div class="mt-3 col-md-6">
                                    <EditForm Model="Input" FormName="send-code" OnValidSubmit="OnValidSubmitAsync" method="post">
                                        <DataAnnotationsValidator />
                                        <ValidationSummary class="text-danger" role="alert" />

                                        <div class="form-floating mb-3">
                                            <InputText @bind-Value="Input.Code"
                                                       id="Input.Code"
                                                       class="form-control"
                                                       autocomplete="off"
                                                       placeholder="Enter the code" />
                                            <label for="Input.Code" class="form-label">Verification Code</label>
                                            <ValidationMessage For="@(() => Input.Code)" class="text-danger" />
                                        </div>

                                        <button type="submit" class="btn btn-primary w-100">Verify</button>
                                    </EditForm>
                                </div>
                            </li>
                        </ol>
                    </div>

                    <div class="card-footer d-flex justify-content-between">
                        <a class="btn btn-outline-secondary btn-sm" href="/Account/Manage/TwoFactorAuthentication">Back to 2FA settings</a>
                        <a class="btn btn-outline-primary btn-sm" href="/">Home</a>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private const string AuthenticatorUriFormat = "otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6";

    private string? message;
    private ApplicationUser user = default!;
    private string? sharedKey;
    private string? authenticatorUri;
    private IEnumerable<string>? recoveryCodes;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        await LoadSharedKeyAndQrCodeUriAsync(user);
    }

    private async Task OnValidSubmitAsync()
    {
        var verificationCode = Input.Code.Replace(" ", string.Empty).Replace("-", string.Empty);

        var is2faTokenValid = await UserManager.VerifyTwoFactorTokenAsync(
            user, UserManager.Options.Tokens.AuthenticatorTokenProvider, verificationCode);

        if (!is2faTokenValid)
        {
            message = "Error: Verification code is invalid.";
            return;
        }

        await UserManager.SetTwoFactorEnabledAsync(user, true);
        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' has enabled 2FA with an authenticator app.", userId);

        message = "Your authenticator app has been verified.";

        if (await UserManager.CountRecoveryCodesAsync(user) == 0)
        {
            recoveryCodes = await UserManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);
        }
        else
        {
            RedirectManager.RedirectToWithStatus("Account/Manage/TwoFactorAuthentication", message, HttpContext);
        }
    }

    private async ValueTask LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user)
    {
        var unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        if (string.IsNullOrEmpty(unformattedKey))
        {
            await UserManager.ResetAuthenticatorKeyAsync(user);
            unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        }

        sharedKey = FormatKey(unformattedKey!);

        var email = await UserManager.GetEmailAsync(user);
        authenticatorUri = GenerateQrCodeUri(email!, unformattedKey!);
    }

    private string FormatKey(string unformattedKey)
    {
        var result = new StringBuilder();
        int currentPosition = 0;
        while (currentPosition + 4 < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition, 4)).Append(' ');
            currentPosition += 4;
        }
        if (currentPosition < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition));
        }

        return result.ToString().ToLowerInvariant();
    }

    private string GenerateQrCodeUri(string email, string unformattedKey)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            AuthenticatorUriFormat,
            UrlEncoder.Encode("Microsoft.AspNetCore.Identity.UI"),
            UrlEncoder.Encode(email),
            unformattedKey);
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(7, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Verification Code")]
        public string Code { get; set; } = "";
    }
}
