@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Forms

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Change password</PageTitle>

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-8 col-xl-6">

            <div class="card shadow-sm">
                <div class="card-header">
                    <h4 class="mb-0">Change Password</h4>
                </div>

                <div class="card-body">
                    <StatusMessage Message="@message" />

                    <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" role="alert" />

                        <div class="form-floating mb-3">
                            <InputText type="password"
                                       @bind-Value="Input.OldPassword"
                                       id="Input.OldPassword"
                                       class="form-control"
                                       autocomplete="current-password"
                                       aria-required="true"
                                       placeholder="Enter the old password" />
                            <label for="Input.OldPassword" class="form-label">Current password</label>
                            <ValidationMessage For="@(() => Input.OldPassword)" class="text-danger" />
                        </div>

                        <div class="form-floating mb-3">
                            <InputText type="password"
                                       @bind-Value="Input.NewPassword"
                                       id="Input.NewPassword"
                                       class="form-control"
                                       autocomplete="new-password"
                                       aria-required="true"
                                       placeholder="Enter the new password" />
                            <label for="Input.NewPassword" class="form-label">New password</label>
                            <ValidationMessage For="@(() => Input.NewPassword)" class="text-danger" />
                        </div>

                        <div class="form-floating mb-3">
                            <InputText type="password"
                                       @bind-Value="Input.ConfirmPassword"
                                       id="Input.ConfirmPassword"
                                       class="form-control"
                                       autocomplete="new-password"
                                       aria-required="true"
                                       placeholder="Confirm the new password" />
                            <label for="Input.ConfirmPassword" class="form-label">Confirm new password</label>
                            <ValidationMessage For="@(() => Input.ConfirmPassword)" class="text-danger" />
                        </div>

                        <button type="submit" class="btn btn-primary w-100">Update password</button>
                    </EditForm>

                    <div class="alert alert-info mt-4 small" role="alert">
                        Tip: Use at least 6 characters with a mix of upper/lowercase letters, numbers, and symbols.
                    </div>
                </div>

                <div class="card-footer d-flex justify-content-between">
                    <a class="btn btn-outline-secondary btn-sm" href="/Account/Manage">Back to profile</a>
                    <a class="btn btn-outline-primary btn-sm" href="/">Home</a>
                </div>
            </div>

        </div>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(", ", changePasswordResult.Errors.Select(e => e.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        Logger.LogInformation("User changed their password successfully.");
        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private sealed class InputModel
    {
        [Required, DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required, StringLength(100, MinimumLength = 6,
            ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.")]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare(nameof(NewPassword), ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
