@page "/Account/Manage/SetPassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BlazorLoginDemo.Web.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Set Password</PageTitle>

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-8 col-xl-6">
            <div class="card shadow-sm">
                <div class="card-header">
                    <h4 class="mb-0">Set Your Password</h4>
                </div>

                <div class="card-body">
                    <StatusMessage Message="@message" />

                    <p class="text-info">
                        You do not have a local username/password for this site.
                        Add a local account so you can log in without an external login.
                    </p>

                    <EditForm Model="Input" FormName="set-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" role="alert" />

                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="Input.NewPassword"
                                       id="Input.NewPassword"
                                       class="form-control"
                                       autocomplete="new-password"
                                       placeholder="Enter the new password" />
                            <label for="Input.NewPassword">New password</label>
                            <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
                        </div>

                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="Input.ConfirmPassword"
                                       id="Input.ConfirmPassword"
                                       class="form-control"
                                       autocomplete="new-password"
                                       placeholder="Confirm the new password" />
                            <label for="Input.ConfirmPassword">Confirm password</label>
                            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                        </div>

                        <button type="submit" class="btn btn-primary w-100">Set Password</button>
                    </EditForm>
                </div>

                <div class="card-footer text-end">
                    <a href="/Account/Manage" class="btn btn-outline-secondary btn-sm">Back to Account Settings</a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        var hasPassword = await UserManager.HasPasswordAsync(user);
        if (hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/ChangePassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var addPasswordResult = await UserManager.AddPasswordAsync(user, Input.NewPassword!);
        if (!addPasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(", ", addPasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been set.", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string? ConfirmPassword { get; set; }
    }
}
