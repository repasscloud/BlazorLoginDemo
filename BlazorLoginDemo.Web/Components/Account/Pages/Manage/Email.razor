@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Components.Forms

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>Manage email</PageTitle>

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-8 col-xl-6">

            <div class="card shadow-sm">
                <div class="card-header">
                    <h4 class="mb-0">Manage Email</h4>
                </div>

                <div class="card-body">
                    <StatusMessage Message="@message" />

                    <form @onsubmit="OnSendEmailVerificationAsync" @formname="send-verification" id="send-verification-form" method="post">
                        <AntiforgeryToken />
                    </form>

                    <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" role="alert" />

                        @if (isEmailConfirmed)
                        {
                            <div class="input-group mb-3">
                                <div class="form-floating flex-grow-1">
                                    <input type="text"
                                           value="@email"
                                           id="email"
                                           class="form-control"
                                           placeholder="Enter your email"
                                           disabled />
                                    <label for="email" class="form-label">Email</label>
                                </div>
                                <span class="input-group-text text-success fw-bold">✓</span>
                            </div>
                        }
                        else
                        {
                            <div class="mb-3">
                                <div class="form-floating">
                                    <input type="text"
                                           value="@email"
                                           id="email"
                                           class="form-control"
                                           placeholder="Enter your email"
                                           disabled />
                                    <label for="email" class="form-label">Email</label>
                                </div>
                                <button type="submit"
                                        form="send-verification-form"
                                        class="btn btn-link p-0 mt-1">
                                    Send verification email
                                </button>
                            </div>
                        }

                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Input.NewEmail"
                                       id="Input.NewEmail"
                                       class="form-control"
                                       autocomplete="email"
                                       aria-required="true"
                                       placeholder="Enter a new email" />
                            <label for="Input.NewEmail" class="form-label">New email</label>
                            <ValidationMessage For="@(() => Input.NewEmail)" class="text-danger" />
                        </div>

                        <button type="submit" class="btn btn-primary w-100">Change email</button>
                    </EditForm>
                </div>
            </div>

            <div class="mt-3 d-flex justify-content-between">
                <a href="/Account/Manage" class="btn btn-outline-secondary">Back to profile</a>
                <a href="/" class="btn btn-outline-primary">Home</a>
            </div>

        </div>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private string? email;
    private bool isEmailConfirmed;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        Input.NewEmail ??= email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Your email is unchanged.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Confirmation link to change email sent. Please check your email.";
    }

    private async Task OnSendEmailVerificationAsync()
    {
        if (email is null)
            return;

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Verification email sent. Please check your email.";
    }

    private sealed class InputModel
    {
        [Required, EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }
}
