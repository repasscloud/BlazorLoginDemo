@rendermode InteractiveServer
@using BlazorLoginDemo.Shared.Services.Interfaces.Platform
@using BlazorLoginDemo.Shared.Models.Kernel.Platform
@using BlazorLoginDemo.Shared.Models.Static.Platform
@inject IAdminOrgServiceUnified OrgService

@if (_show)
{
    <div class="modal fade show" style="display:block;" tabindex="-1" aria-modal="true" role="dialog" aria-labelledby="orgPickerTitle">
        <div class="modal-dialog modal-lg modal-dialog-scrollable">
            <div class="modal-content">

                <div class="modal-header">
                    <h5 id="orgPickerTitle" class="modal-title mb-0">@(_title ?? "Select Organization")</h5>
                    <button type="button" class="btn-close" @onclick="Close" aria-label="Close"></button>
                </div>

                <div class="modal-body">
                    @if (!string.IsNullOrWhiteSpace(_error))
                    {
                        <div class="alert alert-danger d-flex align-items-center" role="alert">
                            <i class="bi bi-x-circle-fill fs-5 me-2"></i>
                            <div>@_error</div>
                        </div>
                    }

                    <!-- Search row -->
                    <div class="row g-2 align-items-end mb-3">
                        <div class="col-lg-6">
                            <label class="form-label" for="orgSearch">Search (name or domain)</label>
                            <input id="orgSearch"
                                   class="form-control"
                                   @bind="_query"
                                   placeholder="Start typing…"
                                   @onkeydown="OnSearchKeyDown" />
                        </div>

                        <div class="col-lg-3">
                            <label class="form-label" for="orgType">Type</label>
                            <select id="orgType" class="form-select" @bind="_typeFilter">
                                <option value="">All types</option>
                                @foreach (var t in Enum.GetValues<OrganizationType>())
                                {
                                    <option value="@t">@t</option>
                                }
                            </select>
                        </div>

                        <div class="col-lg-3">
                            <label class="form-label d-block">&nbsp;</label>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="activeOnly" @bind="_activeOnly" />
                                <label class="form-check-label" for="activeOnly">Active only</label>
                            </div>
                        </div>

                        <div class="col-8 col-lg-6 d-grid d-lg-flex gap-2">
                            <button type="button" class="btn btn-primary" @onclick="SearchAsync" disabled="@_busy">
                                @if (_busy)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                }
                                Search
                            </button>

                            <button type="button" class="btn btn-outline-secondary" @onclick="ClearFilters" disabled="@_busy">
                                Clear
                            </button>
                        </div>

                        <div class="col-4 col-lg-6 text-lg-end">
                            <label class="form-label me-2">Page size</label>
                            <select class="form-select d-inline-block" style="width: 6.5rem" @bind="_pageSize">
                                @foreach (var ps in new[] { 10, 20, 50, 100 })
                                {
                                    <option value="@ps">@ps</option>
                                }
                            </select>
                        </div>
                    </div>

                    <!-- Results -->
                    <div class="list-group">
                        @if (_busy && _results.Count == 0)
                        {
                            <div class="text-muted small">Searching…</div>
                        }
                        else if (_results.Count == 0)
                        {
                            <div class="text-muted small">No results.</div>
                        }
                        else
                        {
                            @foreach (var r in PagedResults())
                            {
                                var ds = (r.Org.Domains?.Select(d => d.Domain).OrderBy(x => x).ToArray()) ?? Array.Empty<string>();
                                <button type="button"
                                        class="list-group-item list-group-item-action"
                                        title="Select @r.Org.Name"
                                        @onclick="() => Select(r)">
                                    <div class="d-flex w-100 justify-content-between align-items-start">
                                        <div>
                                            <h6 class="mb-1">@r.Org.Name</h6>
                                            <small class="text-muted"><code>@r.Org.Id</code></small>
                                        </div>
                                        <small class="text-muted">@r.Org.Type @((r.Org.IsActive ? "· Active" : "· Inactive"))</small>
                                    </div>
                                    @if (ds.Length > 0)
                                    {
                                        <small class="text-muted">Domains: @string.Join(", ", ds)</small>
                                    }
                                </button>
                            }
                        }
                    </div>

                    <!-- Pager -->
                    @if (_results.Count > 0 && _totalPages > 1)
                    {
                        <nav class="mt-3" aria-label="Org picker pagination">
                            <ul class="pagination mb-0 justify-content-center">
                                <li class="page-item @(_page == 1 ? "disabled" : null)">
                                    <button class="page-link" @onclick="() => GoToPage(_page - 1)">Previous</button>
                                </li>
                                @for (var i = 1; i <= _totalPages; i++)
                                {
                                    <li class="page-item @(i == _page ? "active" : null)">
                                        <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                                    </li>
                                }
                                <li class="page-item @(_page == _totalPages ? "disabled" : null)">
                                    <button class="page-link" @onclick="() => GoToPage(_page + 1)">Next</button>
                                </li>
                            </ul>
                        </nav>
                    }
                </div>

                <div class="card-footer d-flex justify-content-end gap-2">
                    <button class="btn btn-outline-secondary" @onclick="Cancel">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code
{
    // ---------- Public API ----------
    public async Task<IAdminOrgServiceUnified.OrgAggregate?> OpenAsync(
        string? excludeOrgId = null,
        string? title = null,
        OrganizationType? typePreset = null,
        bool activeOnlyPreset = true)
    {
        _excludeOrgId = excludeOrgId;
        _title = title;
        _typeFilter = typePreset;
        _activeOnly = activeOnlyPreset;

        _show = true;
        StateHasChanged();

        _tcs = new TaskCompletionSource<IAdminOrgServiceUnified.OrgAggregate?>();
        await SearchAsync(); // initial load with presets
        return await _tcs.Task;
    }

    public async Task<string?> OpenForIdAsync(
        string? excludeOrgId = null,
        string? title = null,
        OrganizationType? typePreset = null,
        bool activeOnlyPreset = true)
    {
        var picked = await OpenAsync(excludeOrgId, title, typePreset, activeOnlyPreset);
        return picked?.Org.Id;
    }

    // ---------- State ----------
    private bool _show;
    private bool _busy;
    private string? _error;
    private string? _title;

    private string? _query;
    private OrganizationType? _typeFilter;
    private bool _activeOnly = true;
    private string? _excludeOrgId;

    private readonly List<IAdminOrgServiceUnified.OrgAggregate> _results = new();

    private TaskCompletionSource<IAdminOrgServiceUnified.OrgAggregate?>? _tcs;

    // Paging
    private int _pageSizeBacking = 20;
    private int _pageSize
    {
        get => _pageSizeBacking;
        set
        {
            if (_pageSizeBacking != value)
            {
                _pageSizeBacking = value;
                GoToPage(1);
            }
        }
    }
    private int _page = 1;
    private int _totalPages = 1;

    // ---------- Behaviors ----------
    private async Task SearchAsync()
    {
        try
        {
            _busy = true;
            _error = null;
            _results.Clear();

            var list = await OrgService.SearchAsync(
                nameContains: _query,
                type: _typeFilter,
                isActive: _activeOnly ? true : null,
                parentOrgId: null,
                domainContains: _query
            );

            var filtered = list
                .Where(x => string.IsNullOrWhiteSpace(_excludeOrgId) || x.Org.Id != _excludeOrgId)
                .OrderBy(x => x.Org.Name)
                .ThenBy(x => x.Org.Id)
                .ToList();

            _results.AddRange(filtered);

            _page = 1;
            ComputeTotals();
        }
        catch (Exception ex)
        {
            _error = ex.GetBaseException().Message;
            _results.Clear();
            _page = 1;
            ComputeTotals();
        }
        finally
        {
            _busy = false;
            StateHasChanged();
        }
    }

    private void ClearFilters()
    {
        _query = null;
        _typeFilter = null;
        _activeOnly = true;
        _page = 1;
        _ = SearchAsync();
    }

    private void Select(IAdminOrgServiceUnified.OrgAggregate agg)
    {
        _tcs?.TrySetResult(agg);
        Close();
    }

    private void Cancel()
    {
        _tcs?.TrySetResult(null);
        Close();
    }

    private void Close()
    {
        _show = false;
        StateHasChanged();
    }

    private void OnSearchKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !_busy)
        {
            _ = SearchAsync();
        }
    }

    private IEnumerable<IAdminOrgServiceUnified.OrgAggregate> PagedResults()
        => _results.Skip((_page - 1) * _pageSize).Take(_pageSize);

    private void GoToPage(int p)
    {
        if (p < 1) p = 1;
        if (p > _totalPages) p = _totalPages;
        _page = p;
    }

    private void ComputeTotals()
    {
        _totalPages = Math.Max(1, (int)Math.Ceiling(_results.Count / (double)_pageSize));
        if (_page > _totalPages) _page = _totalPages;
    }
}
