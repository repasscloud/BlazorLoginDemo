@page "/demo/flights"
@using System.Globalization

<PageTitle>SYD → World (Demo)</PageTitle>

<div class="container my-4">
    <div class="d-flex align-items-center gap-2 mb-3">
        <i class="bi bi-airplane-fill fs-4"></i>
        <h1 class="h3 m-0">Flights from <span class="fw-bold">SYD</span> to worldwide — Demo</h1>
        <span class="badge text-bg-secondary">Dummy data</span>
    </div>

    <!-- Quick Legend / Filters (purely visual) -->
    <div class="row g-2 mb-4">
        <div class="col-12 col-md-8">
            <div class="d-flex flex-wrap gap-2">
                <span class="badge text-bg-success"><i class="bi bi-check-circle"></i> Best value</span>
                <span class="badge text-bg-primary"><i class="bi bi-lightning-charge"></i> Fast</span>
                <span class="badge text-bg-warning"><i class="bi bi-award"></i> Premium cabin</span>
                <span class="badge text-bg-info"><i class="bi bi-bag"></i> Bag included</span>
                <span class="badge text-bg-dark"><i class="bi bi-wifi"></i> Wi-Fi</span>
            </div>
        </div>
        <div class="col-12 col-md-4 text-md-end">
            <div class="btn-group">
                <button class="btn btn-outline-secondary btn-sm" @onclick="() => CurrentView = ViewMode.Cards" title="Card Gallery">
                    <i class="bi bi-grid-3x3-gap"></i>
                </button>
                <button class="btn btn-outline-secondary btn-sm" @onclick="() => CurrentView = ViewMode.Accordion" title="Accordion List">
                    <i class="bi bi-list-ul"></i>
                </button>
                <button class="btn btn-outline-secondary btn-sm" @onclick="() => CurrentView = ViewMode.Table" title="Table View">
                    <i class="bi bi-table"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Group Tabs by Stop Count -->
    <ul class="nav nav-pills mb-3" role="tablist">
        @foreach (var g in StopGroups)
        {
            <li class="nav-item" role="presentation">
                <button class="nav-link @(ActiveGroup == g.Key ? "active" : "")"
                        @onclick="() => ActiveGroup = g.Key">
                    @GroupLabel(g.Key)
                    <span class="badge text-bg-light ms-2">@g.Value.Count</span>
                </button>
            </li>
        }
    </ul>

    @if (CurrentView == ViewMode.Cards)
    {
        <!-- ========== VIEW 1: CARD GALLERY ========== -->
        <div class="row g-3">
            @foreach (var f in ActiveFlights)
            {
                <div class="col-12 col-md-6 col-xl-4">
                    <div class="card h-100 shadow-sm border-0">
                        <div class="card-body d-flex flex-column">
                            <div class="d-flex align-items-center justify-content-between">
                                <div class="d-flex align-items-center gap-2">
                                    <span class="badge rounded-pill text-bg-secondary">@string.Join(" + ", f.Carriers)</span>
                                    @if (f.IsSingleCarrier) { <span class="badge text-bg-success"><i class="bi bi-check2-circle"></i> Single carrier</span> }
                                    else { <span class="badge text-bg-light"><i class="bi bi-arrows"></i> Mixed</span> }
                                </div>
                                <div class="text-end">
                                    <div class="fs-5 fw-bold">@FormatPrice(f.Price, f.Currency)</div>
                                    <div class="text-muted small">incl. taxes & fees*</div>
                                </div>
                            </div>

                            <div class="mt-3">
                                <div class="d-flex align-items-center justify-content-between">
                                    <div class="d-flex flex-column">
                                        <div class="fw-semibold"><i class="bi bi-geo-alt"></i> SYD</div>
                                        <div class="small text-muted">@f.Outbound.DepartLocal (local)</div>
                                    </div>
                                    <div class="text-center">
                                        <div class="small text-muted">@StopsBadge(f.Stops)</div>
                                        <div class="text-muted"><i class="bi bi-dash-lg"></i></div>
                                        <div class="fw-semibold"><i class="bi bi-clock"></i> @f.TotalDuration</div>
                                    </div>
                                    <div class="d-flex flex-column text-end">
                                        <div class="fw-semibold"><i class="bi bi-flag"></i> @f.Destination</div>
                                        <div class="small text-muted">@f.Outbound.ArriveLocal (local)</div>
                                    </div>
                                </div>
                            </div>

                            <div class="mt-3 d-flex flex-wrap gap-2">
                                @foreach (var inc in f.Inclusions)
                                {
                                    <span class="badge text-bg-light border"><i class="@inc.Icon"></i> @inc.Label</span>
                                }
                                @foreach (var exc in f.Exclusions)
                                {
                                    <span class="badge text-bg-danger-subtle border border-danger text-danger"><i class="@exc.Icon"></i> @exc.Label</span>
                                }
                            </div>

                            <div class="mt-auto d-flex justify-content-between align-items-center pt-3">
                                <button class="btn btn-primary btn-sm">
                                    <i class="bi bi-check2-circle me-1"></i> Select
                                </button>

                                <!-- collapse id must be unique -->
                                <button class="btn btn-outline-secondary btn-sm"
                                        type="button"
                                        data-bs-toggle="collapse"
                                        data-bs-target="#card-details-@f.Id"
                                        aria-expanded="false"
                                        aria-controls="card-details-@f.Id">
                                    <i class="bi bi-chevron-down"></i> Details
                                </button>
                            </div>

                            <div class="collapse mt-3" id="card-details-@f.Id">
                                @* Segments *@
                                <div class="border rounded p-2 small">
                                    @foreach (var s in f.Segments)
                                    {
                                        <div class="d-flex justify-content-between">
                                            <div>
                                                <div class="fw-semibold">
                                                    <i class="bi bi-airplane"></i> @s.Carrier @s.FlightNo
                                                    <span class="text-muted">(@s.Cabin)</span>
                                                </div>
                                                <div class="text-muted">
                                                    @s.From → @s.To • @s.DepartLocal – @s.ArriveLocal • @s.Duration
                                                </div>
                                            </div>
                                            <div class="text-end">
                                                <div><i class="bi bi-cup-hot"></i> @s.Meal</div>
                                                <div><i class="bi bi-bag"></i> @s.Baggage</div>
                                                @if (s.WiFi) { <div><i class="bi bi-wifi"></i> Wi-Fi</div> }
                                            </div>
                                        </div>
                                        @if (s != f.Segments.Last())
                                        {
                                            <hr class="my-2" />
                                            <div class="d-flex align-items-center text-muted">
                                                <i class="bi bi-stopwatch me-1"></i>
                                                Layover @s.To: @f.LayoverAt(s.To)
                                            </div>
                                            <hr class="my-2" />
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else if (CurrentView == ViewMode.Accordion)
    {
        <!-- ========== VIEW 2: ACCORDION LIST ========== -->
        <div class="accordion" id="flightAccordion">
            @foreach (var f in ActiveFlights)
            {
                var accId = $"acc-{f.Id}";
                <div class="accordion-item border-0 shadow-sm mb-2 rounded-3">
                    <h2 class="accordion-header" id="h-@accId">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                                data-bs-target="#c-@accId" aria-expanded="false" aria-controls="c-@accId">
                            <div class="w-100">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="d-flex flex-wrap align-items-center gap-2">
                                        <span class="badge rounded-pill text-bg-secondary">@string.Join(" + ", f.Carriers)</span>
                                        @if (f.IsSingleCarrier) { <span class="badge text-bg-success"><i class="bi bi-check2-circle"></i> Single</span> }
                                        else { <span class="badge text-bg-light">Mixed</span> }
                                        <span>@StopsBadge(f.Stops)</span>
                                        <span class="text-muted small">SYD → <strong>@f.Destination</strong></span>
                                    </div>
                                    <div class="text-end">
                                        <div class="fw-bold">@FormatPrice(f.Price, f.Currency)</div>
                                        <div class="small text-muted"><i class="bi bi-clock"></i> @f.TotalDuration</div>
                                    </div>
                                </div>
                            </div>
                        </button>
                    </h2>
                    <div id="c-@accId" class="accordion-collapse collapse" data-bs-parent="#flightAccordion">
                        <div class="accordion-body">
                            <div class="row">
                                <div class="col-12 col-lg-8">
                                    @foreach (var s in f.Segments)
                                    {
                                        <div class="p-2 border rounded mb-2">
                                            <div class="d-flex justify-content-between">
                                                <div>
                                                    <div class="fw-semibold">
                                                        <i class="bi bi-airplane"></i> @s.Carrier @s.FlightNo
                                                        <span class="text-muted">(@s.Cabin)</span>
                                                    </div>
                                                    <div class="text-muted small">
                                                        @s.From → @s.To • @s.DepartLocal – @s.ArriveLocal • @s.Duration
                                                    </div>
                                                </div>
                                                <div class="text-end small">
                                                    <div><i class="bi bi-cup-hot"></i> @s.Meal</div>
                                                    <div><i class="bi bi-bag"></i> @s.Baggage</div>
                                                    @if (s.WiFi) { <div><i class="bi bi-wifi"></i> Wi-Fi</div> }
                                                </div>
                                            </div>
                                        </div>
                                        @if (s != f.Segments.Last())
                                        {
                                            <div class="text-muted small ms-2">
                                                <i class="bi bi-stopwatch"></i> Layover @s.To: @f.LayoverAt(s.To)
                                            </div>
                                        }
                                    }
                                </div>
                                <div class="col-12 col-lg-4">
                                    <div class="border rounded p-2">
                                        <div class="fw-semibold mb-2">Inclusions / Exclusions</div>
                                        <div class="d-flex flex-wrap gap-2 mb-2">
                                            @foreach (var inc in f.Inclusions)
                                            {
                                                <span class="badge text-bg-light border"><i class="@inc.Icon"></i> @inc.Label</span>
                                            }
                                        </div>
                                        <div class="d-flex flex-wrap gap-2">
                                            @foreach (var exc in f.Exclusions)
                                            {
                                                <span class="badge text-bg-danger-subtle border border-danger text-danger"><i class="@exc.Icon"></i> @exc.Label</span>
                                            }
                                        </div>
                                        <hr />
                                        <button class="btn btn-primary w-100">
                                            <i class="bi bi-check2-circle me-1"></i> Select this flight
                                        </button>
                                    </div>
                                </div>
                            </div>                            
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <!-- ========== VIEW 3: TABLE VIEW ========== -->
        <div class="table-responsive shadow-sm rounded">
            <table class="table align-middle mb-0">
                <thead class="table-light">
                    <tr>
                        <th>Carrier(s)</th>
                        <th>Route</th>
                        <th>Stops</th>
                        <th>Duration</th>
                        <th>Inclusions</th>
                        <th class="text-end">Price</th>
                        <th class="text-end">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var f in ActiveFlights)
                    {
                        <tr>
                            <td>
                                <span class="badge rounded-pill text-bg-secondary">@string.Join(" + ", f.Carriers)</span>
                                @if (f.IsSingleCarrier) { <span class="badge text-bg-success ms-1">Single</span> }
                            </td>
                            <td>
                                SYD → <strong>@f.Destination</strong>
                                <div class="small text-muted">@f.Outbound.DepartLocal – @f.Outbound.ArriveLocal</div>
                            </td>
                            <td>@StopsBadge(f.Stops)</td>
                            <td><i class="bi bi-clock"></i> @f.TotalDuration</td>
                            <td>
                                <div class="d-flex flex-wrap gap-1">
                                    @foreach (var inc in f.Inclusions.Take(3))
                                    {
                                        <span class="badge text-bg-light border"><i class="@inc.Icon"></i> @inc.Label</span>
                                    }
                                    @if (f.Inclusions.Count > 3)
                                    {
                                        <span class="badge text-bg-light border">+@((f.Inclusions.Count - 3)) more</span>
                                    }
                                </div>
                            </td>
                            <td class="text-end fw-bold">@FormatPrice(f.Price, f.Currency)</td>
                            <td class="text-end">
                                <div class="btn-group">
                                    <button class="btn btn-primary btn-sm">
                                        <i class="bi bi-check2-circle"></i>
                                    </button>
                                    <button class="btn btn-outline-secondary btn-sm"
                                            type="button"
                                            data-bs-toggle="collapse"
                                            data-bs-target="#row-details-@f.Id"
                                            aria-expanded="false"
                                            aria-controls="row-details-@f.Id">
                                        <i class="bi bi-chevron-down"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                        <tr class="collapse" id="row-details-@f.Id">
                            <td colspan="7" class="bg-body-secondary">
                                <div class="p-3">
                                    @foreach (var s in f.Segments)
                                    {
                                        <div class="d-flex justify-content-between">
                                            <div>
                                                <div class="fw-semibold">
                                                    <i class="bi bi-airplane"></i> @s.Carrier @s.FlightNo
                                                    <span class="text-muted">(@s.Cabin)</span>
                                                </div>
                                                <div class="text-muted small">
                                                    @s.From → @s.To • @s.DepartLocal – @s.ArriveLocal • @s.Duration
                                                </div>
                                            </div>
                                            <div class="text-end small">
                                                <div><i class="bi bi-cup-hot"></i> @s.Meal</div>
                                                <div><i class="bi bi-bag"></i> @s.Baggage</div>
                                                @if (s.WiFi) { <div><i class="bi bi-wifi"></i> Wi-Fi</div> }
                                            </div>
                                        </div>
                                        @if (s != f.Segments.Last())
                                        {
                                            <hr class="my-2" />
                                            <div class="text-muted small">
                                                <i class="bi bi-stopwatch"></i> Layover @s.To: @f.LayoverAt(s.To)
                                            </div>
                                            <hr class="my-2" />
                                        }
                                    }
                                    <div class="text-end">
                                        <button class="btn btn-primary btn-sm">
                                            <i class="bi bi-check2-circle me-1"></i> Select this flight
                                        </button>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    <div class="text-muted small mt-4">
        * All fares are illustrative demo values only.
    </div>
</div>

@code {
    private enum ViewMode { Cards, Accordion, Table }

    private ViewMode CurrentView = ViewMode.Cards;

    // Active stop-group key
    private int ActiveGroup = 0;

    // Backing store of all flights (dummy)
    private List<FlightOption> AllFlights = new();

    // Convenience: map by stops
    private Dictionary<int, List<FlightOption>> StopGroups => AllFlights
        .GroupBy(f => f.Stops >= 3 ? 3 : f.Stops)
        .OrderBy(g => g.Key)
        .ToDictionary(g => g.Key, g => g.ToList());

    private List<FlightOption> ActiveFlights =>
        StopGroups.TryGetValue(ActiveGroup, out var list) ? list : new List<FlightOption>();

    protected override void OnInitialized()
    {
        // --- Dummy dataset (mix of 0/1/2/3+ stops, carriers, inclusions/exclusions) ---
        AllFlights = DemoData();
        // Ensure all groups exist for tabs
        foreach (var k in new[] { 0, 1, 2, 3 })
            if (!StopGroups.ContainsKey(k))
                StopGroups[k] = new List<FlightOption>();
    }

    private static string GroupLabel(int key) => key switch
    {
        0 => "Nonstop",
        1 => "1 Stop",
        2 => "2 Stops",
        _ => "3+ Stops"
    };

    private MarkupString StopsBadge(int s)
    {
        var label = s switch
        {
            0 => "<span class='badge text-bg-primary'><i class=\"bi bi-rocket-takeoff\"></i> Nonstop</span>",
            1 => "<span class='badge text-bg-secondary'><i class=\"bi bi-geo\"></i> 1 stop</span>",
            2 => "<span class='badge text-bg-secondary'><i class=\"bi bi-geo\"></i> 2 stops</span>",
            _ => "<span class='badge text-bg-secondary'><i class=\"bi bi-geo\"></i> 3+ stops</span>"
        };
        return (MarkupString)label;
    }

    private static string FormatPrice(decimal amount, string currency)
    {
        // Simple format, AU locale feel without enforcing CultureInfo
        return $"{currency} {amount:N0}";
    }

    // ----------------- Dummy Models -----------------
    private class FlightOption
    {
        public string Id { get; set; } = Guid.NewGuid().ToString("N");
        public List<string> Carriers { get; set; } = new();
        public bool IsSingleCarrier => Carriers.Distinct(StringComparer.OrdinalIgnoreCase).Count() == 1;
        public string Destination { get; set; } = "LAX";
        public int Stops { get; set; }
        public string TotalDuration { get; set; } = "14h 35m";
        public Money OutboundFare { get; set; } = new();
        public Money InboundFare { get; set; } = new();
        public string Currency { get; set; } = "AUD";
        public decimal Price { get; set; } = 0m;
        public Journey Outbound { get; set; } = new();
        public List<Segment> Segments { get; set; } = new();
        public List<Tag> Inclusions { get; set; } = new();
        public List<Tag> Exclusions { get; set; } = new();

        // For demo layover length lookup by airport
        public string LayoverAt(string airport)
        {
            // Produce a friendly deterministic fake layover
            var mins = Math.Abs(airport.GetHashCode()) % 180 + 30; // 30–210 min
            var h = mins / 60;
            var m = mins % 60;
            return $"{(h > 0 ? $"{h}h " : "")}{m}m";
        }
    }

    private class Money { public decimal Amount { get; set; } public string Currency { get; set; } = "AUD"; }

    private class Journey
    {
        public string DepartLocal { get; set; } = "08:15";
        public string ArriveLocal { get; set; } = "16:40";
    }

    private class Segment
    {
        public string Carrier { get; set; } = "QF";
        public string FlightNo { get; set; } = "QF11";
        public string From { get; set; } = "SYD";
        public string To { get; set; } = "LAX";
        public string DepartLocal { get; set; } = "08:15";
        public string ArriveLocal { get; set; } = "06:10";
        public string Duration { get; set; } = "13h 55m";
        public string Cabin { get; set; } = "Economy";
        public string Meal { get; set; } = "Meal";
        public string Baggage { get; set; } = "23kg";
        public bool WiFi { get; set; } = true;
    }

    private class Tag { public string Label { get; set; } = ""; public string Icon { get; set; } = "bi bi-check"; }

    // ----------------- Dummy Data Factory -----------------
    private List<FlightOption> DemoData()
    {
        var list = new List<FlightOption>();

        // Nonstop examples
        list.Add(new FlightOption
        {
            Carriers = new() { "QF" },
            Destination = "LAX",
            Stops = 0,
            TotalDuration = "13h 50m",
            Currency = "AUD",
            Price = 1799,
            Outbound = new Journey { DepartLocal = "09:35", ArriveLocal = "06:00" },
            Segments = new()
            {
                new Segment{ Carrier="QF", FlightNo="QF11", From="SYD", To="LAX", DepartLocal="09:35", ArriveLocal="06:00", Duration="13h 25m", Cabin="Economy", Meal="Meal", Baggage="23kg", WiFi=true }
            },
            Inclusions = new() {
                new Tag{ Label="1x 23kg bag", Icon="bi bi-bag" },
                new Tag{ Label="Meal", Icon="bi bi-cup-hot" },
                new Tag{ Label="Wi-Fi", Icon="bi bi-wifi" },
            },
            Exclusions = new() {
                new Tag{ Label="No lounge", Icon="bi bi-slash-circle" },
            }
        });

        list.Add(new FlightOption
        {
            Carriers = new() { "SQ" },
            Destination = "SIN",
            Stops = 0,
            TotalDuration = "8h 10m",
            Currency = "AUD",
            Price = 799,
            Outbound = new Journey { DepartLocal = "07:10", ArriveLocal = "13:20" },
            Segments = new()
            {
                new Segment{ Carrier="SQ", FlightNo="SQ212", From="SYD", To="SIN", DepartLocal="07:10", ArriveLocal="13:20", Duration="8h 10m", Cabin="Economy", Meal="Meal", Baggage="25kg", WiFi=true }
            },
            Inclusions = new() {
                new Tag{ Label="25kg bag", Icon="bi bi-bag" },
                new Tag{ Label="Meal", Icon="bi bi-cup-hot" },
                new Tag{ Label="Seat select", Icon="bi bi-person-square" },
            },
            Exclusions = new() {
                new Tag{ Label="No refund", Icon="bi bi-x-octagon" },
            }
        });

        // 1 stop examples
        list.Add(new FlightOption
        {
            Carriers = new() { "CX" },
            Destination = "LHR",
            Stops = 1,
            TotalDuration = "24h 30m",
            Currency = "AUD",
            Price = 1560,
            Outbound = new Journey { DepartLocal = "10:20", ArriveLocal = "05:50" },
            Segments = new()
            {
                new Segment{ Carrier="CX", FlightNo="CX162", From="SYD", To="HKG", DepartLocal="10:20", ArriveLocal="17:20", Duration="9h 0m", Cabin="Economy", Meal="Meal", Baggage="23kg", WiFi=true },
                new Segment{ Carrier="CX", FlightNo="CX251", From="HKG", To="LHR", DepartLocal="23:35", ArriveLocal="05:50", Duration="13h 15m", Cabin="Economy", Meal="Meal", Baggage="23kg", WiFi=true }
            },
            Inclusions = new() {
                new Tag{ Label="1x 23kg bag", Icon="bi bi-bag" },
                new Tag{ Label="Meals", Icon="bi bi-cup-hot" },
            },
            Exclusions = new() {
                new Tag{ Label="No changes", Icon="bi bi-x-circle" },
            }
        });

        list.Add(new FlightOption
        {
            Carriers = new() { "NZ", "UA" },
            Destination = "JFK",
            Stops = 1,
            TotalDuration = "21h 40m",
            Currency = "AUD",
            Price = 1885,
            Outbound = new Journey { DepartLocal = "08:00", ArriveLocal = "18:40" },
            Segments = new()
            {
                new Segment{ Carrier="NZ", FlightNo="NZ104", From="SYD", To="AKL", DepartLocal="08:00", ArriveLocal="13:00", Duration="3h 0m", Cabin="Economy", Meal="Snack", Baggage="23kg", WiFi=false },
                new Segment{ Carrier="UA", FlightNo="UA6754", From="AKL", To="JFK", DepartLocal="16:20", ArriveLocal="18:40", Duration="17h 20m", Cabin="Economy", Meal="Meal", Baggage="23kg", WiFi=true }
            },
            Inclusions = new() {
                new Tag{ Label="Bag", Icon="bi bi-bag" },
                new Tag{ Label="Meal", Icon="bi bi-cup-hot" },
                new Tag{ Label="Seat select", Icon="bi bi-person-square" },
            },
            Exclusions = new() {
                new Tag{ Label="No lounge", Icon="bi bi-slash-circle" },
            }
        });

        // 2 stops examples
        list.Add(new FlightOption
        {
            Carriers = new() { "EK", "BA" },
            Destination = "CDG",
            Stops = 2,
            TotalDuration = "28h 05m",
            Currency = "AUD",
            Price = 1399,
            Outbound = new Journey { DepartLocal = "06:30", ArriveLocal = "07:15" },
            Segments = new()
            {
                new Segment{ Carrier="EK", FlightNo="EK413", From="SYD", To="DXB", DepartLocal="06:30", ArriveLocal="14:00", Duration="14h 30m", Cabin="Economy", Meal="Meal", Baggage="25kg", WiFi=true },
                new Segment{ Carrier="EK", FlightNo="EK7",   From="DXB", To="LHR", DepartLocal="16:00", ArriveLocal="20:15", Duration="8h 15m", Cabin="Economy", Meal="Meal", Baggage="25kg", WiFi=true },
                new Segment{ Carrier="BA", FlightNo="BA330", From="LHR", To="CDG", DepartLocal="22:10", ArriveLocal="23:25", Duration="1h 15m", Cabin="Economy", Meal="Snack", Baggage="25kg", WiFi=false },
            },
            Inclusions = new() {
                new Tag{ Label="25kg bag", Icon="bi bi-bag" },
                new Tag{ Label="Meals", Icon="bi bi-cup-hot" },
            },
            Exclusions = new() {
                new Tag{ Label="Basic seat", Icon="bi bi-dash-circle" },
            }
        });

        // 3+ stops example
        list.Add(new FlightOption
        {
            Carriers = new() { "VA", "DL", "AA" },
            Destination = "MIA",
            Stops = 3,
            TotalDuration = "35h 40m",
            Currency = "AUD",
            Price = 1280,
            Outbound = new Journey { DepartLocal = "21:50", ArriveLocal = "08:30" },
            Segments = new()
            {
                new Segment{ Carrier="VA", FlightNo="VA7",   From="SYD", To="LAX", DepartLocal="21:50", ArriveLocal="19:20", Duration="13h 30m", Cabin="Economy", Meal="Meal", Baggage="23kg", WiFi=true },
                new Segment{ Carrier="DL", FlightNo="DL456", From="LAX", To="DFW", DepartLocal="23:00", ArriveLocal="04:10", Duration="3h 10m", Cabin="Economy", Meal="Snack", Baggage="Carry-on", WiFi=true },
                new Segment{ Carrier="AA", FlightNo="AA223", From="DFW", To="CLT", DepartLocal="06:00", ArriveLocal="08:00", Duration="2h 0m", Cabin="Economy", Meal="Snack", Baggage="Carry-on", WiFi=false },
                new Segment{ Carrier="AA", FlightNo="AA561", From="CLT", To="MIA", DepartLocal="09:10", ArriveLocal="10:40", Duration="1h 30m", Cabin="Economy", Meal="None", Baggage="Carry-on", WiFi=false },
            },
            Inclusions = new() {
                new Tag{ Label="Meal (long-haul)", Icon="bi bi-cup-hot" },
            },
            Exclusions = new() {
                new Tag{ Label="No checked bag on some legs", Icon="bi bi-bag-x" },
            }
        });

        // Add a premium example for contrast
        list.Add(new FlightOption
        {
            Carriers = new() { "QF" },
            Destination = "SFO",
            Stops = 0,
            TotalDuration = "13h 10m",
            Currency = "AUD",
            Price = 5490,
            Outbound = new Journey { DepartLocal = "17:25", ArriveLocal = "12:35" },
            Segments = new()
            {
                new Segment{ Carrier="QF", FlightNo="QF73", From="SYD", To="SFO", DepartLocal="17:25", ArriveLocal="12:35", Duration="13h 10m", Cabin="Business", Meal="Premium meal", Baggage="40kg", WiFi=true }
            },
            Inclusions = new() {
                new Tag{ Label="Lounge", Icon="bi bi-cup-straw" },
                new Tag{ Label="Flat bed", Icon="bi bi-layout-wtf" },
                new Tag{ Label="2x bags", Icon="bi bi-bag-plus" },
            },
            Exclusions = new() {
                new Tag{ Label="No refund (promo J)", Icon="bi bi-x-octagon" },
            }
        });

        return list;
    }
}
