@page "/admin/avausers/{Id?}"
@rendermode InteractiveServer

@using BlazorLoginDemo.Shared.Models.User
@using BlazorLoginDemo.Shared.Models.Kernel.Client;
@using Microsoft.AspNetCore.Components.Forms
@using BlazorLoginDemo.Web.Components

@inject NavigationManager Nav
@inject BlazorLoginDemo.Shared.Services.Interfaces.User.IAvaUserService AvaUserService
@inject BlazorLoginDemo.Shared.Services.Interfaces.Client.IAvaClientService AvaClientService
@inject BlazorLoginDemo.Shared.Services.Interfaces.Policy.ITravelPolicyService TravelPolicyService
@inject IJSRuntime JS

<PageTitle>Ava User</PageTitle>

<h1 class="display-6 mb-3">Ava User</h1>

@if (!string.IsNullOrWhiteSpace(_error))
{
    <div class="alert alert-danger" role="alert">@_error</div>
}

<EditForm Model="_model" OnValidSubmit="SaveAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Identity -->
    <div class="row g-3 mb-4">
        <div class="col-md-4">
            <label class="form-label">Ava User ID</label>
            <div class="input-group">
                <InputText class="form-control bg-light" @bind-Value="_model.Id" readonly />
                <button type="button" class="btn btn-outline-secondary" title="Copy ID" @onclick="() => CopyAsync(_model.Id)">
                    <i class="bi bi-clipboard"></i>
                </button>
            </div>
        </div>

        <div class="col-md-4">
            <label class="form-label">AspNetUsers ID <span class="text-danger">*</span></label>
            <div class="input-group">
                <InputText class="form-control bg-light" @bind-Value="_model.AspNetUsersId" readonly />
                <button type="button" class="btn btn-outline-secondary" title="Copy AspNetUsersID" @onclick="() => CopyAsync(_model.AspNetUsersId)">
                    <i class="bi bi-clipboard"></i>
                </button>
            </div>
        </div>

        <div class="col-md-3 d-flex align-items-end">
            <div class="form-check form-switch">
                <InputCheckbox class="form-check-input" @bind-Value="_model.IsActive" />
                <label class="form-check-label ms-2">Active</label>
            </div>
        </div>
    </div>

    <!-- Name & Email -->
    <div class="row g-3 mb-4">
        <div class="col-md-4">
            <label class="form-label">First Name <span class="text-danger">*</span></label>
            <InputText class="form-control" @bind-Value="_model.FirstName" />
            <ValidationMessage For="@(() => _model.FirstName)" />
        </div>

        <div class="col-md-4">
            <label class="form-label">Middle Name</label>
            <InputText class="form-control" @bind-Value="_model.MiddleName" />
            <ValidationMessage For="@(() => _model.MiddleName)" />
        </div>

        <div class="col-md-4">
            <label class="form-label">Last Name <span class="text-danger">*</span></label>
            <InputText class="form-control" @bind-Value="_model.LastName" />
            <ValidationMessage For="@(() => _model.LastName)" />
        </div>

        <div class="col-md-6">
            <label class="form-label">Email <span class="text-danger">*</span></label>
            <InputText class="form-control" type="email" @bind-Value="_model.Email" readonly />
            <ValidationMessage For="@(() => _model.Email)" />
        </div>

        <div class="col-md-3">
            <label class="form-label">Origin Location Code</label>
            <InputSelect class="form-select" @bind-Value="_model.OriginLocationCode">
                @foreach (var opt in OriginLocationCodes)
                {
                    <option value="@opt.Code">@opt.Label</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => _model.OriginLocationCode)" />
            <div class="form-text">IATA code (e.g., SYD)</div>
        </div>


        <!-- Currency -->
        <div class="col-md-3">
            <label class="form-label">Default Currency (ISO 4217)</label>
            <InputSelect class="form-select" @bind-Value="_model.DefaultCurrencyCode">
                @foreach (var c in CurrencyOptions)
                {
                    <option value="@c.Code">@c.Flag @c.Code</option>
                }
                @if (!string.IsNullOrWhiteSpace(_model.DefaultCurrencyCode) &&
                !CurrencyOptions.Any(x => x.Code == _model.DefaultCurrencyCode))
                {
                    <option value="@_model.DefaultCurrencyCode">@_model.DefaultCurrencyCode</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => _model.DefaultCurrencyCode)" />
        </div>
    </div>




    <!-- Flight preferences -->
    <div class="row g-3 mb-4">
        @* <div class="col-md-3">
            <label class="form-label">Default Seating</label>
            <InputSelect class="form-select" @bind-Value="_model.DefaultFlightSeating">
                @foreach (var c in _cabins) { <option value="@c">@c</option> }
            </InputSelect>
            <ValidationMessage For="@(() => _model.DefaultFlightSeating)" />
        </div>

        <div class="col-md-3">
            <label class="form-label">Max Seating</label>
            <InputSelect class="form-select" @bind-Value="_model.MaxFlightSeating">
                @foreach (var c in _cabins) { <option value="@c">@c</option> }
            </InputSelect>
            <ValidationMessage For="@(() => _model.MaxFlightSeating)" />
        </div> *@
        <div class="col-md-3">
            <label class="form-label">Default Cabin</label>
            <InputSelect class="form-select" @bind-Value="_model.DefaultFlightSeating">
                @foreach (var opt in CabinClassOptions)
                {
                <option value="@opt.Value">@opt.Label</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => _model.DefaultFlightSeating)" />
        </div>
        <!-- Max Cabin -->
        <div class="col-md-3">
            <label class="form-label">Max Cabin</label>
            <InputSelect class="form-select" @bind-Value="_model.MaxFlightSeating">
                @foreach (var opt in CabinClassOptions)
                {
                <option value="@opt.Value">@opt.Label</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => _model.MaxFlightSeating)" />
        </div>

        <div class="col-md-3">
            <label class="form-label">Max Flight Price</label>
            <InputNumber class="form-control" @bind-Value="_model.MaxFlightPrice" />
            <ValidationMessage For="@(() => _model.MaxFlightPrice)" />
        </div>

        <div class="col-md-3 d-flex align-items-end">
            <div class="form-check form-switch">
                <InputCheckbox class="form-check-input" @bind-Value="_model.NonStopFlight" />
                <label class="form-check-label ms-2">Non-Stop only</label>
            </div>
        </div>
    </div>

    <!-- Airline code filters (single-line inputs, per your note) -->
    <div class="row g-3 mb-4">
        <div class="col-md-6">
            <label class="form-label">Included Airline Codes</label>
            <InputText class="form-control" @bind-Value="_model.IncludedAirlineCodes" />
            <div class="form-text">Comma-separated (e.g., QF,VA,EK)</div>
            <ValidationMessage For="@(() => _model.IncludedAirlineCodes)" />
        </div>

        <div class="col-md-6">
            <label class="form-label">Excluded Airline Codes</label>
            <InputText class="form-control" @bind-Value="_model.ExcludedAirlineCodes" />
            <div class="form-text">Comma-separated (e.g., JQ,TT)</div>
            <ValidationMessage For="@(() => _model.ExcludedAirlineCodes)" />
        </div>
    </div>

    <!-- Policy & Client -->
    <div class="row g-3">
        <div class="col-md-3">
            <label class="form-label">User System Preferences</label>
            <div class="input-group">
                <InputText class="form-control" @bind-Value="_model.AvaUserSysPreferenceId" readonly />
                <button type="button" class="btn btn-outline-secondary" title="Open AvaUserSysPreferenceId" @onclick="() => CopyAsync(_model.AvaUserSysPreferenceId)">
                    <i class="bi bi-person-gear"></i>
                </button>
            </div>
            <ValidationMessage For="@(() => _model.AvaUserSysPreferenceId)" />
        </div>
        
        <div class="col-md-3">
            <label class="form-label">Assigned Travel Policy</label>
            <div class="input-group">
                <InputText class="form-control" @bind-Value="_model.TravelPolicyId" readonly />
                @if (!string.IsNullOrWhiteSpace(_model.AvaClientId))
                {
                    <button type="button" class="btn btn-outline-secondary" title="Set TravelPolicyId" @onclick="OpenTravelPolicyPicker">
                        <i class="bi bi-file-earmark-text"></i>
                    </button>
                }
                else
                {
                    <button type="button" class="btn btn-outline-secondary" title="Set TravelPolicyId">
                        <i class="bi bi-file-earmark-text"></i>
                    </button>
                }
            </div>
            <ValidationMessage For="@(() => _model.TravelPolicyId)" />
        </div>

        <div class="col-md-3">
            <label class="form-label">Assigned Expense Policy</label>
            <div class="input-group">
                <InputText class="form-control" @bind-Value="_model.ExpensePolicyId" readonly />
                <button type="button" class="btn btn-outline-secondary" title="Set ExpensePolicy" @onclick="() => CopyAsync(_model.ExpensePolicyId)">
                    <i class="bi bi-file-earmark-bar-graph"></i>
                </button>
            </div>
            <ValidationMessage For="@(() => _model.TravelPolicyId)" />
        </div>

        <div class="col-md-3">
            <label class="form-label">Ava Client</label>
            <div class="input-group">
                <InputText class="form-control" @bind-Value="_model.AvaClientId" readonly />
                <button type="button" class="btn btn-outline-secondary" title="Open AvaClientId" @onclick="OpenClientPicker">
                    <i class="bi bi-building-gear"></i>
                </button>
            </div>
            <ValidationMessage For="@(() => _model.AvaClientId)" />
        </div>
    </div>

    <!-- Bottom actions -->
    <div class="d-flex gap-2 mt-4">
        <button type="submit" class="btn btn-primary" disabled="@_busy">
            <i class="bi bi-check2-circle me-1"></i> Update User
        </button>
        <button type="button" class="btn btn-outline-secondary" @onclick="Cancel" disabled="@_busy">
            <i class="bi bi-x-circle me-1"></i> Cancel
        </button>
        @if (_existing)
        {
            <button type="button" class="btn btn-outline-danger ms-auto" @onclick="DeleteAsync" disabled="@_busy">
                <i class="bi bi-trash me-1"></i> Delete User
            </button>
        }
    </div>
</EditForm>

<Modal @ref="_clientPicker"
    Id="clientPicker"
    Title="Select a client"
    DialogClass="modal-dialog-scrollable modal-lg">
    <ChildContent>
        <div class="p-2 border-bottom bg-light">
            <div class="input-group">
                <span class="input-group-text"><i class="bi bi-search"></i></span>
                <input class="form-control" placeholder="Search by ID or company name..."
                       @bind="_search" @bind:event="oninput" />
            </div>
        </div>

        @if (_isLoading)
        {
            <div class="p-3 text-muted small">Loading clients...</div>
        }
        else if (!Filtered.Any())
        {
            <div class="p-3 text-muted small">No matches.</div>
        }
        else
        {
            <ul class="list-group list-group-flush">
                @foreach (var c in Filtered)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div class="me-3">
                            <div class="fw-semibold">@c.CompanyName</div>
                            <div class="text-muted small">@c.Id</div>
                        </div>
                        <button class="btn btn-sm btn-outline-primary"
                                @onclick="() => OnClientSelected(c.Id)">
                            Assign to Client
                        </button>
                    </li>
                }
            </ul>
        }
    </ChildContent>
    <Footer>
        <div class="me-auto text-muted small">@Filtered.Count() shown</div>
        <button class="btn btn-light" @onclick="_clientPicker!.Hide">Close</button>
    </Footer>
</Modal>

<Modal @ref="_travelPolicyPicker"
    Id="travelPolicyPicker"
    Title="Select a Travel Policy"
    DialogClass="modal-dialog-scrollable modal-lg">
    <ChildContent>
        <div class="p-2 border-bottom bg-light">
            <div class="input-group">
                <span class="input-group-text"><i class="bi bi-search"></i></span>
                <input class="form-control" placeholder="Search by ID or policy name..."
                       @bind="_tpSearch" @bind:event="oninput" />
            </div>
        </div>

        @if (_isTpLoading)
        {
            <div class="p-3 text-muted small">Loading policies...</div>
        }
        else if (!FilteredTravelPolicy.Any())
        {
            <div class="p-3 text-muted small">No matches.</div>
        }
        else
        {
            <ul class="list-group list-group-flush">
                @foreach (var tp in FilteredTravelPolicy)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div class="me-3">
                            <div class="fw-semibold">@tp.PolicyName</div>
                            <div class="text-muted small">@tp.Id</div>
                        </div>
                        <button class="btn btn-sm btn-outline-primary"
                                @onclick="() => OnTravelPolicySelected(tp.Id)">
                            Assign to AvaUser
                        </button>
                    </li>
                }
            </ul>
        }
    </ChildContent>
    <Footer>
        <div class="me-auto text-muted small">@FilteredTravelPolicy.Count() shown</div>
        <button class="btn btn-light" @onclick="_travelPolicyPicker!.Hide">Close</button>
    </Footer>
</Modal>


@code {
#region code
    [Parameter] public string? Id { get; set; }

    private AvaUser _model = new AvaUser
    {
        AspNetUsersId = string.Empty,
        FirstName = "Ronald",
        LastName = "McDonald",
        Email = "user@example.com",
    };

    private bool _existing;
    private bool _busy;
    private string? _error;

    private record DropDownOption(string Code, string Label);

    private static readonly DropDownOption[] OriginLocationCodes = new DropDownOption[]
    {
        new("SYD", "Sydney, Australia 🇦🇺"),
        new("MEL", "Melbourne, Australia 🇦🇺"),
        new("BNE", "Brisbane, Australia 🇦🇺"),
        new("PER", "Perth, Australia 🇦🇺"),
        new("ADL", "Adelaide, Australia 🇦🇺"),
        new("OOL", "Gold Coast, Australia 🇦🇺"),
        new("CNS", "Cairns, Australia 🇦🇺"),
        new("CBR", "Canberra, Australia 🇦🇺"),
        new("HBA", "Hobart, Australia 🇦🇺"),
        new("MCY", "Sunshine Coast, Australia 🇦🇺"),
        new("DRW", "Darwin, Australia 🇦🇺"),
        new("TSV", "Townsville, Australia 🇦🇺"),
        new("HTI", "Hamilton Island, Australia 🇦🇺"),
        new("AKL", "Auckland, New Zealand 🇳🇿"),
        new("CHC", "Christchurch, New Zealand 🇳🇿"),
        new("WLG", "Wellington, New Zealand 🇳🇿"),
        new("ZQN", "Queenstown, New Zealand 🇳🇿"),
        new("NSN", "Nelson, New Zealand 🇳🇿"),
        new("DUD", "Dunedin, New Zealand 🇳🇿"),
        new("NPE", "Hawkes Bay / Napier, New Zealand 🇳🇿"),
    };

        private static readonly (string Code, string Flag)[] CurrencyOptions =
    [
        ("AUD", "🇦🇺"),
        ("USD", "🇺🇸"),
        ("EUR", "🇪🇺"),
        ("GBP", "🇬🇧"),
        ("JPY", "🇯🇵"),
        ("CHF", "🇨🇭"),
        ("CAD", "🇨🇦"),
        ("CNY", "🇨🇳"),
        ("HKD", "🇭🇰"),
        ("SGD", "🇸🇬"),
        ("NZD", "🇳🇿")
    ];

    private readonly string[] _cabins = new[] { "ECONOMY", "PREMIUM_ECONOMY", "BUSINESS", "FIRST" };

    private static readonly (string Value, string Label)[] CabinClassOptions =
    [
        ("ECONOMY",         "Economy"),
        ("PREMIUM_ECONOMY", "Premium Economy"),
        ("BUSINESS",        "Business"),
        ("FIRST",           "First")
    ];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _busy = true;
            if (!string.IsNullOrWhiteSpace(Id))
            {
                var u = await AvaUserService.GetByIdAsync(Id);
                if (u is not null) { _model = u; _existing = true; }
                else { _error = "User not found."; }
            }
        }
        catch (Exception ex) { _error = ex.Message; }
        finally { _busy = false; }
    }

    private async Task SaveAsync()
    {
        if (_busy) return;
        try
        {
            _busy = true; _error = null;
            if (_existing) { await AvaUserService.UpdateAsync(_model); }
            else { await AvaUserService.CreateAsync(_model); _existing = true; }
            Nav.NavigateTo("/admin/users", forceLoad: true);
        }
        catch (Exception ex) { _error = ex.Message; }
        finally { _busy = false; }
    }

    private void Cancel() => Nav.NavigateTo("/admin/users", forceLoad: true);

    private async Task DeleteAsync()
    {
        if (!_existing || _busy) return;
        try
        {
            _busy = true; _error = null;
            await AvaUserService.DeleteAsync(_model.Id);
            Nav.NavigateTo("/admin/users", forceLoad: true);
        }
        catch (Exception ex) { _error = ex.Message; }
        finally { _busy = false; }
    }

    private async Task CopyAsync(string? v)
    {
        if (string.IsNullOrWhiteSpace(v)) return;
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", v);
    }
#endregion code

#region ClientPickerModal
    private BlazorLoginDemo.Web.Components.Modal? _clientPicker;

    // Use your real AvaClient type here (fully-qualify if you avoid @using)
    private IReadOnlyList<BlazorLoginDemo.Shared.Models.Kernel.Client.AvaClient> _all = Array.Empty<BlazorLoginDemo.Shared.Models.Kernel.Client.AvaClient>();
    private string _search = string.Empty;
    private bool _isLoading;

    private IEnumerable<BlazorLoginDemo.Shared.Models.Kernel.Client.AvaClient> Filtered =>
        string.IsNullOrWhiteSpace(_search)
            ? _all
            : _all.Where(c =>
                (!string.IsNullOrEmpty(c.Id) && c.Id.Contains(_search, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(c.CompanyName) && c.CompanyName.Contains(_search, StringComparison.OrdinalIgnoreCase)));

    private async Task OpenClientPicker()
    {
        if (_all.Count == 0)
        {
            _isLoading = true;
            StateHasChanged();

            IReadOnlyList<BlazorLoginDemo.Shared.Models.Kernel.Client.AvaClient>? items = await AvaClientService.GetAllAsync();
            _all = items ?? Array.Empty<BlazorLoginDemo.Shared.Models.Kernel.Client.AvaClient>();

            _isLoading = false;
            _search = string.Empty;
        }

        await _clientPicker!.Show();
    }

    private async Task OnClientSelected(string clientId)
    {
        var result = await AvaUserService.AssignAvaClientToUserAsync(Id, clientId);
        await _clientPicker!.Hide();
        if (result)
        {
            Nav.NavigateTo(Nav.Uri, forceLoad: true);
        }
    }
#endregion

#region TravelPolicyPickerModal
    private BlazorLoginDemo.Web.Components.Modal? _travelPolicyPicker;

    private IReadOnlyList<BlazorLoginDemo.Shared.Models.Policies.TravelPolicy> _travelPolicyAll = Array.Empty<BlazorLoginDemo.Shared.Models.Policies.TravelPolicy>();
    private string _tpSearch = string.Empty;
    private bool _isTpLoading;

    private IEnumerable<BlazorLoginDemo.Shared.Models.Policies.TravelPolicy> FilteredTravelPolicy =>
        string.IsNullOrWhiteSpace(_tpSearch)
            ? _travelPolicyAll
            : _travelPolicyAll.Where(c =>
                (!string.IsNullOrEmpty(c.Id) && c.Id.Contains(_tpSearch, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(c.PolicyName) && c.PolicyName.Contains(_tpSearch, StringComparison.OrdinalIgnoreCase)));

    private async Task OpenTravelPolicyPicker()
    {
        if (_model.AvaClientId is null) return;  // exit early

        _travelPolicyAll = Array.Empty<BlazorLoginDemo.Shared.Models.Policies.TravelPolicy>();  //clear the list

        _isTpLoading = true;
        StateHasChanged();

        IReadOnlyList<BlazorLoginDemo.Shared.Models.Policies.TravelPolicy>? items = await TravelPolicyService.GetForClientAsync(_model.AvaClientId);
        _travelPolicyAll = items ?? Array.Empty<BlazorLoginDemo.Shared.Models.Policies.TravelPolicy>();

        _isTpLoading = false;
        _tpSearch = string.Empty;
        await _travelPolicyPicker!.Show();
    }

    private async Task OnTravelPolicySelected(string travelPolicyId)
    {
        var result = await AvaUserService.AssignTravelPolicyToUserAsync(Id, travelPolicyId);
        await _travelPolicyPicker!.Hide();
        if (result)
        {
            Nav.NavigateTo(Nav.Uri, forceLoad: true);
        }
    }
#endregion TravelPolicyPickerModal
}
