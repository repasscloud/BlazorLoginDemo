@page "/admin/avausers/{Id?}"

@using BlazorLoginDemo.Shared.Models.User
@using Microsoft.AspNetCore.Components.Forms

@inject NavigationManager Nav
@inject BlazorLoginDemo.Shared.Services.Interfaces.User.IAvaUserService AvaUserService
@inject IJSRuntime JS

<PageTitle>Ava User</PageTitle>

<h1 class="mb-3">Ava User</h1>

@if (!string.IsNullOrWhiteSpace(_error))
{
    <div class="alert alert-danger" role="alert">@_error</div>
}

<EditForm Model="_model" OnValidSubmit="SaveAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Top actions -->
    <div class="d-flex gap-2 mb-4">
        @* <button type="submit" class="btn btn-primary" disabled="_busy">
            <i class="bi bi-save me-1"></i> Save
        </button>
        <button type="button" class="btn btn-outline-secondary" @onclick="Cancel" disabled="_busy">
            <i class="bi bi-x-circle me-1"></i> Cancel
        </button> *@
        @if (_existing)
        {
            <button type="button" class="btn btn-outline-danger ms-auto" @onclick="DeleteAsync" disabled="_busy">
                <i class="bi bi-trash me-1"></i> Delete
            </button>
        }
    </div>

    <!-- Identity -->
    <div class="row g-3 mb-4">
        <div class="col-md-4">
            <label class="form-label">Ava User ID</label>
            <div class="input-group">
                <InputText class="form-control" @bind-Value="_model.Id" readonly />
                <button type="button" class="btn btn-outline-secondary" title="Copy ID" @onclick="() => CopyAsync(_model.Id)">
                    <i class="bi bi-clipboard"></i>
                </button>
            </div>
        </div>

        <div class="col-md-5">
            <label class="form-label">AspNetUsers ID <span class="text-danger">*</span></label>
            <InputText class="form-control" @bind-Value="_model.AspNetUsersId" />
            <ValidationMessage For="@(() => _model.AspNetUsersId)" />
        </div>

        <div class="col-md-3 d-flex align-items-end">
            <div class="form-check form-switch">
                <InputCheckbox class="form-check-input" @bind-Value="_model.IsActive" />
                <label class="form-check-label ms-2">Active</label>
            </div>
        </div>
    </div>

    <!-- Name & Email -->
    <div class="row g-3 mb-4">
        <div class="col-md-4">
            <label class="form-label">First Name <span class="text-danger">*</span></label>
            <InputText class="form-control" @bind-Value="_model.FirstName" />
            <ValidationMessage For="@(() => _model.FirstName)" />
        </div>

        <div class="col-md-4">
            <label class="form-label">Middle Name</label>
            <InputText class="form-control" @bind-Value="_model.MiddleName" />
            <ValidationMessage For="@(() => _model.MiddleName)" />
        </div>

        <div class="col-md-4">
            <label class="form-label">Last Name <span class="text-danger">*</span></label>
            <InputText class="form-control" @bind-Value="_model.LastName" />
            <ValidationMessage For="@(() => _model.LastName)" />
        </div>

        <div class="col-md-6">
            <label class="form-label">Email <span class="text-danger">*</span></label>
            <InputText class="form-control" type="email" @bind-Value="_model.Email" />
            <ValidationMessage For="@(() => _model.Email)" />
        </div>






        <div class="col-md-3">
            <label class="form-label">Origin Location Code</label>
            <InputText class="form-control text-uppercase" maxlength="3" @bind-Value="_model.OriginLocationCode" />
            <div class="form-text">IATA code (e.g., SYD)</div>
            <ValidationMessage For="@(() => _model.OriginLocationCode)" />
        </div>

        <div class="col-md-3">
            <label class="form-label">Default Currency</label>
            <InputText class="form-control text-uppercase" maxlength="3" @bind-Value="_model.DefaultCurrencyCode" />
            <ValidationMessage For="@(() => _model.DefaultCurrencyCode)" />
        </div>
    </div>

    <!-- Flight preferences -->
    <div class="row g-3 mb-4">
        <div class="col-md-3">
            <label class="form-label">Default Seating</label>
            <InputSelect class="form-select" @bind-Value="_model.DefaultFlightSeating">
                @foreach (var c in _cabins) { <option value="@c">@c</option> }
            </InputSelect>
            <ValidationMessage For="@(() => _model.DefaultFlightSeating)" />
        </div>

        <div class="col-md-3">
            <label class="form-label">Max Seating</label>
            <InputSelect class="form-select" @bind-Value="_model.MaxFlightSeating">
                @foreach (var c in _cabins) { <option value="@c">@c</option> }
            </InputSelect>
            <ValidationMessage For="@(() => _model.MaxFlightSeating)" />
        </div>

        <div class="col-md-3">
            <label class="form-label">Max Flight Price</label>
            <InputNumber class="form-control" @bind-Value="_model.MaxFlightPrice" />
            <ValidationMessage For="@(() => _model.MaxFlightPrice)" />
        </div>

        <div class="col-md-3 d-flex align-items-end">
            <div class="form-check form-switch">
                <InputCheckbox class="form-check-input" @bind-Value="_model.NonStopFlight" />
                <label class="form-check-label ms-2">Non-stop only</label>
            </div>
        </div>
    </div>

    <!-- Airline code filters (single-line inputs, per your note) -->
    <div class="row g-3 mb-4">
        <div class="col-md-6">
            <label class="form-label">Included Airline Codes</label>
            <InputText class="form-control" @bind-Value="_model.IncludedAirlineCodes" />
            <div class="form-text">Comma-separated (e.g., QF,VA,EK)</div>
            <ValidationMessage For="@(() => _model.IncludedAirlineCodes)" />
        </div>

        <div class="col-md-6">
            <label class="form-label">Excluded Airline Codes</label>
            <InputText class="form-control" @bind-Value="_model.ExcludedAirlineCodes" />
            <div class="form-text">Comma-separated (e.g., JQ,TT)</div>
            <ValidationMessage For="@(() => _model.ExcludedAirlineCodes)" />
        </div>
    </div>

    <!-- Policy & Client -->
    <div class="row g-3">
        <div class="col-md-6">
            <label class="form-label">Travel Policy</label>
            <InputText class="form-control" @bind-Value="_model.TravelPolicyId" />
            <ValidationMessage For="@(() => _model.TravelPolicyId)" />
        </div>

        <div class="col-md-6">
            <label class="form-label">Ava Client</label>
            <InputText class="form-control" @bind-Value="_model.AvaClientId" />
            <div class="form-text">Optional; can be inferred from email domain.</div>
            <ValidationMessage For="@(() => _model.AvaClientId)" />
        </div>

        <div class="col-md-6">
            <label class="form-label">External Client Id</label>
            <InputText class="form-control" @bind-Value="_model.ClientId" />
            <ValidationMessage For="@(() => _model.ClientId)" />
        </div>
    </div>

    <!-- Bottom actions -->
    <div class="d-flex gap-2 mt-4">
        <button type="submit" class="btn btn-primary" disabled="_busy">
            <i class="bi bi-save me-1"></i> Save
        </button>
        <button type="button" class="btn btn-outline-secondary" @onclick="Cancel" disabled="_busy">
            <i class="bi bi-x-circle me-1"></i> Cancel
        </button>
    </div>
</EditForm>

@code {
    [Parameter] public string? Id { get; set; }

    private AvaUser _model = new AvaUser
    {
        AspNetUsersId = string.Empty,
        FirstName = string.Empty,
        LastName = string.Empty,
        Email = string.Empty,
    };

    private bool _existing;
    private bool _busy;
    private string? _error;

    private readonly string[] _cabins = new[] { "ECONOMY", "PREMIUM_ECONOMY", "BUSINESS", "FIRST" };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _busy = true;
            if (!string.IsNullOrWhiteSpace(Id))
            {
                var u = await AvaUserService.GetByIdAsync(Id);
                if (u is not null) { _model = u; _existing = true; }
                else { _error = "User not found."; }
            }
        }
        catch (Exception ex) { _error = ex.Message; }
        finally { _busy = false; }
    }

    private async Task SaveAsync()
    {
        if (_busy) return;
        try
        {
            _busy = true; _error = null;
            if (_existing) { await AvaUserService.UpdateAsync(_model); }
            else { await AvaUserService.CreateAsync(_model); _existing = true; }
            Nav.NavigateTo("/admin/users", forceLoad: true);
        }
        catch (Exception ex) { _error = ex.Message; }
        finally { _busy = false; }
    }

    private void Cancel() => Nav.NavigateTo("/admin/users", forceLoad: true);

    private async Task DeleteAsync()
    {
        if (!_existing || _busy) return;
        try
        {
            _busy = true; _error = null;
            await AvaUserService.DeleteAsync(_model.Id);
            Nav.NavigateTo("/admin/users", forceLoad: true);
        }
        catch (Exception ex) { _error = ex.Message; }
        finally { _busy = false; }
    }

    private async Task CopyAsync(string? v)
    {
        if (string.IsNullOrWhiteSpace(v)) return;
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", v);
    }
}
