@page "/admin/policies/travel/{AvaClientId}/list"
@rendermode InteractiveServer

@using BlazorLoginDemo.Shared.Models.Kernel.Client;
@using Microsoft.AspNetCore.Components.Forms

@inject BlazorLoginDemo.Shared.Services.Interfaces.Policy.ITravelPolicyService TravelPolicyService
@inject BlazorLoginDemo.Shared.Services.Client.IAvaClientService AvaClientService
@inject NavigationManager Nav

<PageTitle>[ADMIN] Policy List</PageTitle>

<div class="container py-4">

    <h3 class="mb-3">Travel Policy List</h3>
    <div class="card shadow-sm">
        @* <div class="card-header">Header</div> *@
        <div class="card-body">

            @if (_busy)
            {
                <div class="d-flex align-items-center justify-content-center" style="min-height:30vh;">
                    <div class="text-center">
                        <div class="spinner-border" role="status" aria-hidden="true"></div>
                        <div class="mt-3">Searching…</div>
                    </div>
                </div>
            }
            else if (_searched && _results.Count == 0)
            {
                <div class="alert alert-warning mt-3">No travel policies matched "<strong>@_query</strong>".</div>
            }
            else if (_results.Count > 0)
            {
                @* Results Table *@
                <div class="table-responsive mt-3">
                    <table class="table table-hover align-middle">
                        <thead class="table-light">
                            <tr>
                                <th style="width:24%">Travel Policy ID</th>
                                <th style="width:12%">Policy Name</th>
                                <th style="width:18%">Default</th>
                                <th style="width:18%">View/Edit Button</th>
                                <th style="width:10%">Set As Default Button</th>
                            </tr>
                        </thead>
                        <tbody>
                        @foreach (var x in _results)
                        {
                            <tr>
                                <td>@x.Id</td>
                                <td>@x.PolicyName</td>

                                <td>
                                    @if (x.IsDefault)
                                    { <span>Yes</span> }
                                    else
                                    { <span>No</span> }
                                </td>

                                <td>
                                    <a class="btn btn-sm btn-outline-primary"
                                        href="@($"/admin/policies/travel/{x.Id}")">
                                        <i class="bi bi-search"></i> View
                                    </a>
                                </td>

                                <td>
                                    <a class="btn btn-sm btn-outline-primary"
                                        href="@($"/admin/policies/travel/{x.Id}/set-as-default")">
                                        <i class="bi bi-search"></i> Set Default
                                    </a>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>

                <div class="d-flex justify-content-between align-items-center mt-3">
                    <div class="text-muted">Showing up to 20 results.</div>
                    <div class="btn-group">
                        <button type="button"
                                class="btn btn-outline-secondary btn-sm"
                                @onclick="PrevPageAsync"
                                disabled="@(!CanGoPrev)">
                            ◀ Prev
                        </button>

                        <button type="button"
                                class="btn btn-outline-secondary btn-sm"
                                @onclick="NextPageAsync"
                                disabled="@(!CanGoNext)">
                            Next ▶
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public string AvaClientId { get; set; } = string.Empty;

    private bool _busy = true;
    private bool _searched = false;

    private List<TravelPolicyListResult> _results = new(); // init so .Clear() is safe
    private int _resultsPage = 0;                       // 0-based

    private const int PageSize = 20;

    private class TravelPolicyListResult
    {
        public string Id { get; set; } = default!;
        public string PolicyName { get; set; } = default!;
        public bool IsDefault { get; set; } = false;
    }

    // Enable/disable logic
    private bool CanGoPrev => _resultsPage > 0 && !_busy;
    private bool CanGoNext => _results?.Count == PageSize && !_busy;

    // Call this when the user submits a *new* query (resets to first page)
    private async Task SearchFirstPageAsync()
    {
        _resultsPage = 0;
        await HandleSearchAsync();
    }

    private async Task PrevPageAsync()
    {
        if (!CanGoPrev) return;
        _resultsPage--;
        await HandleSearchAsync();
    }

    private async Task NextPageAsync()
    {
        if (!CanGoNext) return;  // only if current page is “full”
        _resultsPage++;
        await HandleSearchAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        _busy = true;

        try
        {
            _results.Clear();

            if (!string.IsNullOrWhiteSpace(AvaClientId))
            {
                var _foundTravelPolicies = await TravelPolicyService.GetForClientAsync(AvaClientId);

                if (_foundTravelPolicies is null)
                {
                    _searched = true;  // no results, but still searched, display no results message
                    return;
                }

                _results = await PopulateClientResultsAsync(_foundTravelPolicies);
            }
            else
            {
                Nav.NavigateTo("/admin/policies/search");
                return;
            }
        }
        finally
        {
            _busy = false;
            StateHasChanged();
        }
    }


    private async Task<List<TravelPolicyListResult>> PopulateClientResultsAsync(IReadOnlyList<TravelPolicy>? policies)
    {
        if (policies is null || policies.Count == 0)
            return [];

        // Fetch once (could be string or string?)
        var defaultId = await AvaClientService.GetDefaultTravelPolicyIdAsync(AvaClientId).ConfigureAwait(false);
        var hasDefault = !string.IsNullOrWhiteSpace(defaultId);

        var results = new List<TravelPolicyListResult>(policies.Count);

        for (int i = 0; i < policies.Count; i++)
        {
            var p = policies[i];
            results.Add(new TravelPolicyListResult
            {
                Id = p.Id,
                PolicyName = p.PolicyName,
                IsDefault = hasDefault && p.Id == defaultId
            });
        }

        return results;
    }
}