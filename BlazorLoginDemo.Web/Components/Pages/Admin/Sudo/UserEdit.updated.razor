@* @page "/sudo/users2"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Policy = BlazorLoginDemo.Shared.Auth.AppPolicies.GlobalPolicy.CanManageUsers)]

@using BlazorLoginDemo.Web.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms

@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject IConfiguration Config
@inject ApplicationDbContext Db

<h3 class="mb-4">User Management</h3>

<div class="card shadow-sm">
    <div class="card-body">
        <div class="row g-3 align-items-end">
            <div class="col-sm-6">
                <label class="form-label">Find by email</label>
                <input class="form-control" @bind="lookupEmail" autocomplete="off" />
            </div>
            <div class="col-sm-6 d-flex gap-2">
                <button class="btn btn-primary" type="button" @onclick="FindUser">Load</button>
                <button class="btn btn-outline-secondary" type="button" @onclick="ListUsers">Show first 10 users</button>
                <button class="btn btn-outline-danger ms-auto" type="button" title="Creates Admin from appsettings if missing" @onclick="SeedAdminFromConfig">Create admin from config</button>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(infoMessage))
        {
            <div class="alert alert-info mt-3">@infoMessage</div>
        }
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3">@errorMessage</div>
        }

        @if (usersPreview?.Count > 0)
        {
            <div class="table-responsive mt-3">
                <table class="table table-sm align-middle">
                    <thead>
                        <tr>
                            <th>Email</th>
                            <th>UserName</th>
                            <th>DisplayName</th>
                            <th>Group</th>
                            <th>Active</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var u in usersPreview)
                        {
                            <tr>
                                <td>@u.Email</td>
                                <td>@u.UserName</td>
                                <td>@u.DisplayName</td>
                                <td>@(u.Group?.Name ?? "-")</td>
                                <td>@(u.IsActive ? "Yes" : "No")</td>
                                <td>
                                    <button class="btn btn-link p-0" @onclick="@(() => LoadFromPreview(u.Id))">Edit</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

        @if (user is not null)
        {
            <hr />
            <div class="row g-3">
                <div class="col-md-6">
                    <label class="form-label">Display Name</label>
                    <input class="form-control" @bind="user.DisplayName" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Department</label>
                    <input class="form-control" @bind="user.Department" />
                </div>

                <div class="col-md-6">
                    <label class="form-label">Group</label>
                    <InputSelect @bind-Value="user.GroupId" TValue="Guid?" class="form-select">
                        <option value="">— Select a group —</option>
                        @foreach (var g in groupOptions)
                        {
                            <option value="@g.Id">@g.Name</option>
                        }
                    </InputSelect>
                </div>

                <div class="col-md-2 d-flex align-items-center">
                    <div class="form-check mt-4">
                        <input class="form-check-input" type="checkbox" id="isActive" @bind="user.IsActive" />
                        <label class="form-check-label" for="isActive">Active</label>
                    </div>
                </div>

                <div class="col-12">
                    <label class="form-label">Roles</label>
<div class="container-fluid px-0">
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-2">
        @foreach (var r in roles)
        {
            <div class="col">
                <label class="form-check border rounded p-2 h-100 d-flex align-items-start gap-2">
                    <input class="form-check-input mt-1"
                           type="checkbox"
                           checked="@selectedRoles.Contains(r)"
                           @onchange="(ChangeEventArgs e) => ToggleRole(r, (bool?)e.Value == true)" />
                    <span class="form-check-label">@r</span>
                </label>
            </div>
        }
    </div>
</div>

@code {
    // --- backing fields ---
    string lookupEmail = string.Empty;
    ApplicationUser? user;
    HashSet<string> selectedRoles = new();
    List<string> roles = new();
    List<ApplicationUser>? usersPreview;
    List<Group> groupOptions = new();

    string? infoMessage;
    string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        roles = (await RoleManager.Roles
            .Select(r => r.Name!)
            .ToListAsync())
            .Where(n => !string.IsNullOrWhiteSpace(n))
            .ToList()!;

        groupOptions = await Db.Groups
            .OrderBy(g => g.IsCatchAll ? 0 : 1)
            .ThenBy(g => g.Name)
            .ToListAsync();
    }

    private async Task FindUser()
    {
        infoMessage = errorMessage = null;
        usersPreview = null;
        user = null;
        selectedRoles.Clear();

        var email = lookupEmail?.Trim();
        if (string.IsNullOrEmpty(email))
        {
            infoMessage = "Enter an email address.";
            StateHasChanged();
            return;
        }

        user = await UserManager.FindByEmailAsync(email)
            ?? await UserManager.FindByNameAsync(email);

        if (user is null)
        {
            var lower = email.ToLowerInvariant();
            user = await UserManager.Users
                .FirstOrDefaultAsync(u =>
                    (u.Email != null && u.Email.ToLower() == lower) ||
                    (u.UserName != null && u.UserName.ToLower() == lower));
        }

        if (user is null)
        {
            infoMessage = $"No user found for “{email}”. Click ‘Show first 10 users’ to inspect the DB.";
            StateHasChanged();
            return;
        }

        // include Group for display
        user = await UserManager.Users
            .Include(u => u.Group)
            .FirstAsync(u => u.Id == user.Id);

        var rs = await UserManager.GetRolesAsync(user);
        selectedRoles = rs.ToHashSet(StringComparer.OrdinalIgnoreCase);

        infoMessage = $"Loaded user: {user.Email ?? user.UserName}";
        StateHasChanged();
    }

    private async Task ListUsers()
    {
        infoMessage = errorMessage = null;
        user = null;
        selectedRoles.Clear();

        usersPreview = await UserManager.Users
            .Include(u => u.Group)
            .OrderBy(u => u.Email ?? u.UserName)
            .Take(10)
            .ToListAsync();

        infoMessage = usersPreview.Count == 0
            ? "No users in the database."
            : $"Showing {usersPreview.Count} user(s). Click ‘Edit’ to load one.";

        StateHasChanged();
    }

    private async Task LoadFromPreview(string userId)
    {
        infoMessage = errorMessage = null;

        user = await UserManager.Users
            .Include(u => u.Group)
            .FirstOrDefaultAsync(u => u.Id == userId);

        usersPreview = null;

        if (user is null)
        {
            errorMessage = "User not found (it may have been deleted).";
            StateHasChanged();
            return;
        }

        var rs = await UserManager.GetRolesAsync(user);
        selectedRoles = rs.ToHashSet(StringComparer.OrdinalIgnoreCase);

        StateHasChanged();
    }

    private void ToggleRole(string role, bool add)
    {
        if (add) selectedRoles.Add(role);
        else selectedRoles.Remove(role);
    }

    private async Task Save()
    {
        if (user is null) return;

        infoMessage = errorMessage = null;

        // persist profile + GroupId
        var update = await UserManager.UpdateAsync(user);
        if (!update.Succeeded)
        {
            errorMessage = string.Join("; ", update.Errors.Select(e => e.Description));
            StateHasChanged();
            return;
        }

        // sync roles
        var current = await UserManager.GetRolesAsync(user);
        var toAdd = selectedRoles.Except(current, StringComparer.OrdinalIgnoreCase).ToArray();
        var toRemove = current.Except(selectedRoles, StringComparer.OrdinalIgnoreCase).ToArray();

        if (toAdd.Length > 0)
        {
            var addRes = await UserManager.AddToRolesAsync(user, toAdd);
            if (!addRes.Succeeded)
            {
                errorMessage = string.Join("; ", addRes.Errors.Select(e => e.Description));
                StateHasChanged();
                return;
            }
        }

        if (toRemove.Length > 0)
        {
            var remRes = await UserManager.RemoveFromRolesAsync(user, toRemove);
            if (!remRes.Succeeded)
            {
                errorMessage = string.Join("; ", remRes.Errors.Select(e => e.Description));
                StateHasChanged();
                return;
            }
        }

        infoMessage = "Saved.";
        StateHasChanged();
    }

    // Optional helper: create admin from config if seed was skipped
    private async Task SeedAdminFromConfig()
    {
        infoMessage = errorMessage = null;

        var email = Config["AdminEmail"];
        var password = Config["AdminPassword"];

        if (string.IsNullOrWhiteSpace(email) || string.IsNullOrWhiteSpace(password))
        {
            errorMessage = "AdminEmail/AdminPassword not configured.";
            StateHasChanged();
            return;
        }

        var existing = await UserManager.FindByEmailAsync(email) ?? await UserManager.FindByNameAsync(email);
        if (existing is null)
        {
            var newAdmin = new ApplicationUser
            {
                Email = email,
                UserName = email,
                EmailConfirmed = true,
                DisplayName = "Administrator",
                IsActive = true
            };

            var catchAll = await Db.Groups.FirstOrDefaultAsync(g => g.IsCatchAll);
            if (catchAll != null) newAdmin.GroupId = catchAll.Id;

            var create = await UserManager.CreateAsync(newAdmin, password);
            if (!create.Succeeded)
            {
                errorMessage = "Create failed: " + string.Join("; ", create.Errors.Select(e => e.Description));
                StateHasChanged();
                return;
            }
            existing = newAdmin;
        }

        if (!await RoleManager.RoleExistsAsync("SuperAdmin"))
            await RoleManager.CreateAsync(new IdentityRole("SuperAdmin"));

        if (!await UserManager.IsInRoleAsync(existing, "SuperAdmin"))
            await UserManager.AddToRoleAsync(existing, "SuperAdmin");

        infoMessage = $"Admin ready: {email}";
        StateHasChanged();
    }
} *@
