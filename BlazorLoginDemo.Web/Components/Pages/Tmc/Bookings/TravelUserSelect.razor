@page "/bookingselect"
@rendermode InteractiveServer
@using BlazorLoginDemo.Shared.Services.Interfaces.Platform
@using BlazorLoginDemo.Shared.Models.Kernel.Platform
@using Microsoft.AspNetCore.Components.Authorization
@using BlazorLoginDemo.Shared.Models.Static.Platform
@using System.Text.Json;

@attribute [Authorize(Policy = "Shared:BookingSelect")]

@inject IAdminOrgServiceUnified OrgSvc
@inject IAdminUserServiceUnified UserSvc
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthStateProvider

<h3>Select Travellers</h3>

@if (Unauthorized)
{
    <div class="alert alert-danger">You are not authorized to access this page.</div>
}
else
{
    @if (IsSudo)
    {
        <label>Select Vendor</label>
        <div class="input-group mb-2">
            <select class="form-select" @bind="SelectedVendorId" disabled="@VendorLocked">
                <option value="">-- choose --</option>
                @foreach (var v in Vendors)
                {
                    <option value="@v.Id">@v.Name</option>
                }
            </select>
            <button class="btn btn-outline-primary" type="button" @onclick="ConfirmVendor" disabled="@VendorLocked">Set</button>
        </div>
    }

    @if (!string.IsNullOrEmpty(SelectedVendorId))
    {
        <label>Select TMC</label>
        <div class="input-group mb-2">
            <select class="form-select" @bind="SelectedTmcId" disabled="@TmcLocked">
                <option value="">-- choose --</option>
                @foreach (var t in Tmcs)
                {
                    <option value="@t.Id">@t.Name</option>
                }
            </select>
            <button class="btn btn-outline-primary" type="button" @onclick="ConfirmTmc" disabled="@TmcLocked">Set</button>
        </div>
    }

    @if (!string.IsNullOrEmpty(SelectedTmcId))
    {
        <label>Select Client</label>
        <div class="input-group mb-2">
            <select class="form-select" @bind="SelectedClientId" disabled="@ClientLocked">
                <option value="">-- choose --</option>
                @foreach (var c in Clients)
                {
                    <option value="@c.Id">@c.Name</option>
                }
            </select>
            <button class="btn btn-outline-primary" type="button" @onclick="ConfirmClient" disabled="@ClientLocked">Set</button>
        </div>
    }

    @if (Users.Any())
    {
        <h5>Available Users</h5>
        <ul class="list-group">
            @foreach (var u in Users)
            {
                <li class="list-group-item">
                    <input type="checkbox" value="@u.UserId"
                           @onchange="@((ChangeEventArgs e) => ToggleUserSelection(u.UserId, (bool)e.Value!))" />
                    @u.User.DisplayName (@u.User.Email)
                </li>
            }
        </ul>

        <button class="btn btn-primary mt-3" @onclick="CreateQuoteAsync">Continue</button>
    }
}

@code {
    bool Unauthorized;
    bool IsSudo;
    bool IsPlatformUser;

    List<IAdminOrgServiceUnified.OrganizationPickerDto> Vendors = new();
    List<IAdminOrgServiceUnified.OrganizationPickerDto> Tmcs = new();
    List<IAdminOrgServiceUnified.OrganizationPickerDto> Clients = new();
    List<IAdminUserServiceUnified.UserAggregate> Users = new();

    string? SelectedVendorId;
    string? SelectedTmcId;
    string? SelectedClientId;

    bool VendorLocked;
    bool TmcLocked;
    bool ClientLocked;

    HashSet<string> SelectedUserIds = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!(user.IsInRole("Sudo") ||
              user.IsInRole("Platform.SuperAdmin") ||
              user.IsInRole("Platform.SuperUser") ||
              user.IsInRole("Platform.Admin") ||
              user.IsInRole("Platform.Support.Admin") ||
              user.IsInRole("Platform.Support.Agent") ||
              user.IsInRole("Tmc.Admin") ||
              user.IsInRole("Tmc.BookingsManager") ||
              user.IsInRole("Tmc.TravelAgent")))
        {
            Unauthorized = true;
            return;
        }

        var orgId = user.FindFirst("OrganizationId")?.Value
                    ?? user.FindFirst("organizationId")?.Value
                    ?? user.FindFirst("org")?.Value;

        IsSudo = user.IsInRole("Sudo");
        IsPlatformUser = user.IsInRole("Platform.SuperAdmin") ||
                         user.IsInRole("Platform.SuperUser") ||
                         user.IsInRole("Platform.Admin") ||
                         user.IsInRole("Platform.Support.Admin") ||
                         user.IsInRole("Platform.Support.Agent");

        if (IsSudo)
        {
            Vendors = (await OrgSvc.SearchAsync(type: OrganizationType.Vendor))
                      .Select(a => new IAdminOrgServiceUnified.OrganizationPickerDto
                      {
                          Id = a.Org.Id,
                          Name = a.Org.Name,
                          Type = a.Org.Type,
                          IsActive = a.Org.IsActive
                      }).ToList();
        }
        else if (IsPlatformUser)
        {
            SelectedVendorId = orgId;
            VendorLocked = true;
            await LoadTmcs();
        }
        else if (user.IsInRole("Tmc.Admin") || user.IsInRole("Tmc.BookingsManager") || user.IsInRole("Tmc.TravelAgent"))
        {
            SelectedTmcId = orgId;
            TmcLocked = true;
            await LoadClients();
        }
        else
        {
            SelectedClientId = orgId;
            ClientLocked = true;
            await LoadUsers();
        }
    }

    async Task ConfirmVendor()
    {
        if (string.IsNullOrEmpty(SelectedVendorId)) return;
        VendorLocked = true;
        await LoadTmcs();
    }

    async Task ConfirmTmc()
    {
        if (string.IsNullOrEmpty(SelectedTmcId)) return;
        TmcLocked = true;
        await LoadClients();
    }

    async Task ConfirmClient()
    {
        if (string.IsNullOrEmpty(SelectedClientId)) return;
        ClientLocked = true;
        await LoadUsers();
    }

    async Task LoadTmcs()
    {
        Tmcs = (await OrgSvc.SearchAsync(type: OrganizationType.Tmc, parentOrgId: SelectedVendorId))
               .Select(a => new IAdminOrgServiceUnified.OrganizationPickerDto
               {
                   Id = a.Org.Id,
                   Name = a.Org.Name,
                   Type = a.Org.Type,
                   IsActive = a.Org.IsActive
               }).ToList();
    }

    async Task LoadClients()
    {
        Clients = (await OrgSvc.SearchAsync(type: OrganizationType.Client, parentOrgId: SelectedTmcId))
                  .Select(a => new IAdminOrgServiceUnified.OrganizationPickerDto
                  {
                      Id = a.Org.Id,
                      Name = a.Org.Name,
                      Type = a.Org.Type,
                      IsActive = a.Org.IsActive
                  }).ToList();
    }

    async Task LoadUsers()
    {
        Users = (await UserSvc.SearchAsync(organizationId: SelectedClientId)).ToList();
    }

    void ToggleUserSelection(string userId, bool selected)
    {
        if (selected) SelectedUserIds.Add(userId);
        else SelectedUserIds.Remove(userId);
    }

    async Task CreateQuoteAsync()
    {
        if (string.IsNullOrEmpty(SelectedClientId) || SelectedUserIds.Count == 0)
            return;

        @* var quoteId = await Api.CreateTravelQuoteAsync(SelectedClientId, SelectedUserIds.ToList());
        Nav.NavigateTo($"/flightsearch/{quoteId}"); *@

        var userIdList = SelectedUserIds.ToList();
await File.WriteAllLinesAsync("/var/useridlist.txt", userIdList);


    }
}
