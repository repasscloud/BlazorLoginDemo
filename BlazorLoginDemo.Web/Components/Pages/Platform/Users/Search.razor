@page "/platform/users"
@rendermode InteractiveServer
@using BlazorLoginDemo.Shared.Services.Interfaces.Platform
@using BlazorLoginDemo.Shared.Models.Kernel.Platform
@inject IAdminUserServiceUnified UserSvc
@inject IAdminOrgServiceUnified OrgSvc
@inject NavigationManager Nav

<PageTitle>Users</PageTitle>

<div class="d-flex align-items-center justify-content-between mb-3">
    <h2 class="mb-0">Users</h2>
    <a class="btn btn-primary" href="/platform/users/create">
        <span class="bi bi-person-plus me-1"></span>
        Create User
    </a>
</div>

<!-- Search + Filters -->
<div class="card mb-3">
    <div class="card-body">
        <div class="row g-2 align-items-center">
            <!-- Query -->
            <div class="col-sm-6">
                <form class="mb-0" @onsubmit="OnSubmit" @onsubmit:preventDefault>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-search"></i></span>
                        <input class="form-control"
                            placeholder="Search by email or name…"
                            @bind="_vm.Query"
                            @bind:event="oninput"
                            @onkeydown="OnSearchKeyDown" />
                        <button type="button"
        class="btn btn-outline-secondary"
        @onclick="ApplyFilters">
    Search
</button>

                        <button type="button"
                                class="btn btn-outline-secondary"
                                @onclick="ClearFilters"
                                title="Clear">
                            <i class="bi bi-x-lg"></i>
                        </button>
                    </div>
                </form>
            </div>

            <!-- Org filter -->
            <div class="col-sm-4">
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-building"></i></span>
                    <select class="form-select"
                            @bind="_vm.OrganizationId"
                            @bind:after="ApplyFilters">
                        <option value="">Any organization</option>
                        @foreach (var o in _vm.Orgs)
                        {
                            <option value="@o.Id">@o.Name</option>
                        }
                    </select>
                </div>
            </div>

            <!-- Status filter -->
            <div class="col-sm-2">
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-toggle-on"></i></span>
<select class="form-select"
        @bind="_vm.StatusValue"
        @bind:after="ApplyFilters">
    <option value="all">All</option>
    <option value="active">Active only</option>
    <option value="inactive">Inactive only</option>
</select>
                </div>
            </div>
        </div>

        <div class="d-flex align-items-center gap-3 mt-2 small text-muted">
            <div>
                @if (_vm.IsLoading)
                {
                    <span class="d-inline-flex align-items-center">
                        <span class="spinner-border spinner-border-sm me-2"
                            role="status"
                            aria-hidden="true"></span>
                        <span class="loading-text">Loading…</span>
                    </span>
                }
                else
                {
                    <span>@_vm.Results.Count result@(_vm.Results.Count == 1 ? "" : "s")</span>
                }
            </div>

            @if (!string.IsNullOrWhiteSpace(_vm.Query))
            {
                <span>Query: <code>@_vm.Query</code></span>
            }
            @if (!string.IsNullOrWhiteSpace(_vm.OrganizationId))
            {
                var orgName = _vm.Orgs.FirstOrDefault(x => x.Id == _vm.OrganizationId)?.Name ?? _vm.OrganizationId!;
                <span>Org: <code>@orgName</code></span>
            }
            @if (_vm.IsActive is not null)
            {
                <span>Status: <code>@((_vm.IsActive == true) ? "Active" : "Inactive")</code></span>
            }
        </div>

    </div>
</div>

<!-- Results -->
@if (!_vm.IsLoading && _vm.Results.Count == 0)
{
    <div class="alert alert-light border d-flex align-items-center">
        <i class="bi bi-search me-2"></i>
        No users found. Try a different search or clear the filters.
    </div>
}
else
{
    <div class="vstack gap-2">
        @foreach (var u in _vm.Results)
        {
            var user = u.User;
            var orgName = u.Organization?.Name ?? "-";

            <div class="card">
                <div class="card-body d-flex align-items-center justify-content-between">
                    <div class="d-flex align-items-center gap-3">
                        <div class="rounded-circle bg-light d-flex align-items-center justify-content-center" style="width:40px;height:40px;">
                            <i class="bi bi-person"></i>
                        </div>
                        <div>
                            <div class="fw-semibold">
                                @(string.IsNullOrWhiteSpace(user.DisplayName) ? (user.Email ?? u.UserId) : user.DisplayName)
                                @if (user.IsActive)
                                {
                                    <span class="badge bg-success ms-2">Active</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary ms-2">Inactive</span>
                                }
                            </div>
                            <div class="small text-muted">
                                <span class="me-2"><i class="bi bi-envelope me-1"></i>@(user.Email ?? "-")</span>
                                <span class="me-2">·</span>
                                <span class="me-2"><i class="bi bi-building me-1"></i>@orgName</span>
                                @if (!string.IsNullOrWhiteSpace(user.FirstName) || !string.IsNullOrWhiteSpace(user.LastName))
                                {
                                    <span class="me-2">·</span>
                                    <span class="me-2"><i class="bi bi-person-vcard me-1"></i>@($"{user.FirstName} {user.LastName}".Trim())</span>
                                }
                                @if (!string.IsNullOrWhiteSpace(user.Department))
                                {
                                    <span class="me-2">·</span>
                                    <span class="me-2"><i class="bi bi-diagram-3 me-1"></i>@user.Department</span>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="d-flex align-items-center gap-2">
                        <a class="btn btn-outline-primary btn-sm" href="@($"/platform/users/{u.UserId}")">
                            <i class="bi bi-box-arrow-up-right me-1"></i> Open
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private VM _vm = new();

protected override async Task OnInitializedAsync()
{
    // preload orgs for the filter dropdown
    _vm.Orgs = (await OrgSvc.GetAllForPickerAsync()).ToList();

    // one-shot server fetch of all users, then in-memory filtering
    _vm.AllResults = (await UserSvc.SearchAsync()).ToList();
    _vm.Results = _vm.AllResults.ToList();
}


    private async Task SearchAsync()
    {
        _vm.IsLoading = true;
        StateHasChanged();

        bool? active = _vm.IsActive; // derived from StatusValue
        string q = (_vm.Query ?? string.Empty).Trim();

        var list = await UserSvc.SearchAsync(
            emailContains: q,
            nameContains: q,
            organizationId: string.IsNullOrWhiteSpace(_vm.OrganizationId) ? null : _vm.OrganizationId,
            isActive: active
        );

        _vm.Results = list.ToList();
        _vm.IsLoading = false;
    }

private void ClearFilters()
{
    _vm.Query = string.Empty;
    _vm.OrganizationId = string.Empty;
    _vm.StatusValue = "all"; // setter updates IsActive
    ApplyFilters();
}

    private void ApplyFilters()
{
    // In-memory filtering only — no spinner
    IEnumerable<IAdminUserServiceUnified.UserAggregate> items = _vm.AllResults;

    var q = (_vm.Query ?? string.Empty).Trim();
    var byOrg = _vm.OrganizationId;
    var byActive = _vm.IsActive; // tri-state

    if (!string.IsNullOrWhiteSpace(byOrg))
    {
        items = items.Where(u =>
            string.Equals(u.Organization?.Id, byOrg, StringComparison.OrdinalIgnoreCase) ||
            string.Equals(u.User?.OrganizationId, byOrg, StringComparison.OrdinalIgnoreCase));
    }

    if (byActive is not null)
    {
        items = items.Where(u => (u.User?.IsActive ?? false) == byActive.Value);
    }

    if (!string.IsNullOrWhiteSpace(q))
    {
        items = items.Where(u =>
            (!string.IsNullOrEmpty(u.User?.Email) && u.User.Email.Contains(q, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrEmpty(u.User?.DisplayName) && u.User.DisplayName.Contains(q, StringComparison.OrdinalIgnoreCase)) ||
            ($"{u.User?.FirstName} {u.User?.LastName}".Trim()).Contains(q, StringComparison.OrdinalIgnoreCase));
    }

    _vm.Results = items.ToList();
    StateHasChanged();
}

private void OnSearchKeyDown(KeyboardEventArgs e)
{
    if (e.Key == "Enter")
    {
        ApplyFilters();
    }
}

private async Task OnFiltersChanged()
{
    await SearchAsync();
}

private Task OnSubmit()
{
    // If you’re doing in-memory filtering only:
    ApplyFilters();
    return Task.CompletedTask;

    // If you want server refresh instead, use:
    // return SearchAsync();
}

    // ---------------- VM ----------------
    private sealed class VM
    {
        public string? Query { get; set; } = string.Empty;
        public string? OrganizationId { get; set; } = string.Empty;

        // Tri-state status via string adapter: "all" | "active" | "inactive"
        private string _statusValue = "all";
        public string StatusValue
        {
            get => _statusValue;
            set
            {
                _statusValue = value;
                IsActive = value switch
                {
                    "active" => true,
                    "inactive" => false,
                    _ => (bool?)null
                };
            }
        }
        public bool? IsActive { get; private set; } = null;

        public bool IsLoading { get; set; } = false;

        public List<IAdminUserServiceUnified.UserAggregate> AllResults { get; set; } = new();
        public List<IAdminUserServiceUnified.UserAggregate> Results { get; set; } = new();
        public List<IAdminOrgServiceUnified.OrganizationPickerDto> Orgs { get; set; } = new();
    }
}
