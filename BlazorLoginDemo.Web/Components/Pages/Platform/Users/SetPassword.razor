@page "/platform/users/setpassword"
@rendermode InteractiveServer
@attribute [Authorize(Policy = "Platform:ManageUsers")]

@using BlazorLoginDemo.Shared.Auth
@using BlazorLoginDemo.Shared.Models.Static.SysVar
@using BlazorLoginDemo.Shared.Services.Interfaces.Kernel
@using BlazorLoginDemo.Shared.Services.Interfaces.Platform
@using System.Security.Claims
@inject IAdminUserServiceUnified UserSvc
@inject ILoggerService _logger

<h3>Set User Password</h3>

@if (!string.IsNullOrEmpty(StatusMessage))
{
    <div class="alert @StatusCss">@StatusMessage</div>
}

<div class="card">
    <div class="card-body">
        <div class="mb-3">
            <label class="form-label">Email</label>
            <input @bind="Email" class="form-control" />
        </div>
        <div class="mb-3">
            <label class="form-label">New Password</label>
            <input @bind="Password" type="password" class="form-control" />
        </div>
        <button class="btn btn-primary" @onclick="OnSetPassword">Set Password</button>
    </div>
</div>

@code {
    [CascadingParameter] private Task<AuthenticationState> AuthStateTask { get; set; } = default!;
    private ClaimsPrincipal? _user;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState? authState = await AuthStateTask;
        _user = authState.User;
    }

    private string Email = string.Empty;
    private string Password = string.Empty;
    private string? StatusMessage;
    private string StatusCss = "";
    private async Task OnSetPassword()
    {
        (bool Ok, string? Error) result = await UserSvc.SetPasswordAsync(Email, Password);
        if (result.Ok)
        {
            StatusMessage = $"Password updated for {Email}.";
            StatusCss = "alert-success";
            await _logger.InformationAsync(
                evt: "USER_PASSWORD_SET",
                cat: SysLogCatType.Auth,
                act: SysLogActionType.Update,
                message: $"Password set for {Email} by {_user?.GetUserId() ?? "UNKNOWN"}",
                ent: "UserCredential",
                entId: Email,
                uid: _user?.GetUserId() ?? "UNKNOWN",
                note: "credential_set");
        }
        else
        {
            StatusMessage = result.Error ?? "Unknown error";
            StatusCss = "alert-danger";
            await _logger.ErrorAsync(
                evt: "USER_PASSWORD_SET_FAIL",
                cat: SysLogCatType.Auth,
                act: SysLogActionType.Update,
                ex: new InvalidOperationException(message: $"Password set failed: {result.Error}"),
                message: "Password set failed",
                ent: "UserCredential",
                entId: Email,
                uid: _user?.GetUserId() ?? "UNKNOWN",
                note: "credential_set_failed");
        }
    }
}
