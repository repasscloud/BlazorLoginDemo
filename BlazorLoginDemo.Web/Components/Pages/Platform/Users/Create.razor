@page "/platform/users/create"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Sudo,Platform.SuperAdmin")]

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using BlazorLoginDemo.Shared.Services.Interfaces.User
@using BlazorLoginDemo.Shared.Models.User
@inject IAdminUserService AdminUserService
@inject NavigationManager Nav

<div class="container py-4">
  <div class="row justify-content-center">
    <div class="col-xl-7 col-lg-8">
      <div class="card shadow-sm">
        <div class="card-header">
          <h5 class="mb-0">Create Platform User</h5>
          <small class="text-muted">Provision an Identity account and linked AvaUser profile.</small>
        </div>

        <EditForm Model="@vm" OnValidSubmit="@HandleCreateAsync" >
          <DataAnnotationsValidator />

          <div class="card-body">

            @if (!string.IsNullOrWhiteSpace(successId))
            {
              <!-- Success alert -->
                <div class="alert alert-success d-flex align-items-center" role="alert">
                    <i class="bi bi-check-circle-fill fs-5 me-2" aria-hidden="true"></i>
                    <div>
                        User created successfully.<br />
                        <small class="text-muted">New User Id: <code>@successId</code></small>
                    </div>
                </div>
            }

            @if (!string.IsNullOrWhiteSpace(error))
            {
                <!-- Error alert -->
                <div class="alert alert-danger d-flex align-items-center" role="alert">
                    <i class="bi bi-x-circle-fill fs-5 me-2" aria-hidden="true"></i>
                    <div>@error</div>
                </div>
            }

            <ValidationSummary class="alert alert-warning mb-4" />

            <div class="row g-3">
              <!-- Email -->
              <div class="col-12">
                <label for="email" class="form-label">Email</label>
                <InputText id="email" class="form-control" @bind-Value="vm.Email" type="email" autocomplete="email" disabled="@isSubmitting" />
                <ValidationMessage For="@(() => vm.Email)" class="text-danger" />
              </div>

              <!-- Password -->
              <div class="col-12">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" class="form-control" @bind-Value="vm.Password" type="password" autocomplete="new-password" disabled="@isSubmitting" />
                <ValidationMessage For="@(() => vm.Password)" class="text-danger" />
              </div>

              <!-- Name row -->
              <div class="col-md-4">
                <label for="firstName" class="form-label">First name</label>
                <InputText id="firstName" class="form-control" @bind-Value="vm.FirstName" disabled="@isSubmitting" />
              </div>
              <div class="col-md-4">
                <label for="middleName" class="form-label">Middle name</label>
                <InputText id="middleName" class="form-control" @bind-Value="vm.MiddleName" disabled="@isSubmitting" />
              </div>
              <div class="col-md-4">
                <label for="lastName" class="form-label">Last name</label>
                <InputText id="lastName" class="form-control" @bind-Value="vm.LastName" disabled="@isSubmitting" />
              </div>

              <!-- Display name -->
              <div class="col-md-6">
                <label for="displayName" class="form-label">Display name</label>
                <InputText id="displayName" class="form-control" @bind-Value="vm.DisplayName" disabled="@isSubmitting" />
              </div>

              <!-- Org -->
              <div class="col-md-6">
                <label for="orgId" class="form-label">Organization Id (optional)</label>
                <InputText id="orgId" class="form-control" @bind-Value="vm.OrganizationId" disabled="@isSubmitting" />
              </div>

              <!-- Role -->
              <div class="col-md-6">
                <label for="role" class="form-label">Role</label>
                <InputSelect id="role" class="form-select" @bind-Value="vm.RoleName" disabled="@isSubmitting">
                  <option value="Platform.SuperAdmin">Platform.SuperAdmin</option>
                  <option value="Platform.Admin">Platform.Admin</option>
                  <option value="Platform.User">Platform.User</option>
                  <option value="Platform.UserAdmin">Platform.UserAdmin</option>
                  <option value="Platform.OrgAdmin">Platform.OrgAdmin</option>
                  <option value="Platform.PolicyAdmin">Platform.PolicyAdmin</option>
                  <option value="Platform.SecuirityAdmin">Platform.SecurityAdmin</option>
                  <option value="Platform.IntegrationAdmin">Platform.IntegrationAdmin</option>
                  <option value="Platform.Finance.Admin">Platform.Finance.Admin</option>
                  <option value="Platform.Finance.Editor">Platform.Finance.Editor</option>
                  <option value="Platform.Finance.Viewer">Platform.Finance.Viewer</option>
                  <option value="Platform.Support.Admin">Platform.Support.Admin</option>
                  <option value="Platform.Support.Agent">Platform.Support.Agent</option>
                  <option value="Platform.Support.Viewer">Platform.Support.Viewer</option>
                  <option value="Platform.Support.Finance">Platform.Support.Finance</option>
                  <option value="Platform.Sales.Rep">Platform.Sales.Rep</option>
                  <option value="Platform.Sales.Manager">Platform.Sales.Manager</option>
                  <option value="Platform.Sales.Admin">Platform.Sales.Admin</option>
                  <option value="Platform.ReportsViewer">Platform.ReportsViewer</option>
                  <option value="Platform.DataExporter">Platform.DataExporter</option>
                  <option value="Platform.Auditor">Platform.Auditor</option>
                  <option value="Platform.ReadOnly">Platform.ReadOnly</option>
                  @* Add Tmc/Client roles later when you adjust this page for org-scoped creation *@
                </InputSelect>
                <ValidationMessage For="@(() => vm.RoleName)" class="text-danger" />
              </div>

              <!-- Manager -->
              <div class="col-md-6">
                <label for="manager" class="form-label">Manager (optional)</label>
                @if (managerOptions.Count > 0)
                {
                  <InputSelect id="manager" class="form-select" @bind-Value="vm.ManagerAvaUserId" disabled="@isSubmitting">
                    <option value="">(None)</option>
                    @foreach (var m in managerOptions)
                    {
                      <option value="@m.Id">@m.Label</option>
                    }
                  </InputSelect>
                }
                else
                {
                  <InputText id="manager" class="form-control" @bind-Value="vm.ManagerAvaUserId" placeholder="AvaUserId (optional)" disabled="@isSubmitting" />
                }
              </div>
            </div>
          </div>

          <div class="card-footer d-flex justify-content-between">
            <button type="button" class="btn btn-outline-secondary" @onclick="Cancel" disabled="@isSubmitting">Cancel</button>
            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
              @if (isSubmitting)
              {
                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true">Creatingâ€¦</span>
              }
              else { <span>Create user</span> }
            </button>
          </div>
        </EditForm>
      </div>
    </div>
  </div>
</div>

@code {
  private CreateUserVm vm = new();
  private string? error;
  private string? successId;
  private bool isSubmitting;

  private List<ManagerOption> managerOptions = new();

  protected override async Task OnInitializedAsync()
  {
    try
    {
      var all = await AdminUserService.GetAllAsync();
      managerOptions = all
        .Where(p => p.Profile is not null)
        .Select(p =>
        {
          var name = !string.IsNullOrWhiteSpace(p.Identity.DisplayName)
            ? p.Identity.DisplayName
            : $"{p.Profile.FirstName} {p.Profile.LastName}".Trim();

          var email = string.IsNullOrWhiteSpace(p.Identity.Email) ? "" : $" <{p.Identity.Email}>";
          return new ManagerOption(p.Profile.Id, $"{name}{email}".Trim());
        })
        .OrderBy(x => x.Label, StringComparer.OrdinalIgnoreCase)
        .ToList();
    }
    catch
    {
      managerOptions = new(); // first-time install or minimal data; fall back to free-text
    }
  }

  private async Task HandleCreateAsync()
  {
    error = null;
    successId = null;
    isSubmitting = true;

    try
    {
      var req = new IAdminUserService.CreateUserRequest(
        Email: vm.Email!,
        Password: vm.Password!,
        FirstName: vm.FirstName,
        MiddleName: vm.MiddleName,
        LastName: vm.LastName,
        DisplayName: vm.DisplayName,
        OrganizationId: vm.OrganizationId,
        RoleName: vm.RoleName!,
        ManagerAvaUserId: vm.ManagerAvaUserId
      );

      // Use UI-friendly creator that returns Ok/Error/UserId (if you exposed it),
      // or call CreateAsync and wrap yourself. Here we wrap CreateAsync for clarity.
      try
      {
        var created = await AdminUserService.CreateAsync(req);
        successId = created.UserId;
        // Optional: Nav.NavigateTo("/admin/users");
      }
      catch (Exception ex)
      {
        error = ex.GetBaseException().Message;
      }
    }
    finally
    {
      isSubmitting = false;
    }
  }

  private void Cancel() => Nav.NavigateTo("/admin");

  private sealed record ManagerOption(string Id, string Label);

  private sealed class CreateUserVm
  {
    [Required, EmailAddress]
    public string? Email { get; set; }

    [Required, MinLength(8)]
    public string? Password { get; set; }

    public string? FirstName { get; set; }
    public string? MiddleName { get; set; }
    public string? LastName { get; set; }
    public string? DisplayName { get; set; }
    public string? OrganizationId { get; set; }

    [Required]
    public string? RoleName { get; set; } = "Platform.SuperAdmin";

    // Optional self-FK to AvaUser for approvals
    public string? ManagerAvaUserId { get; set; }
  }
}
