@page "/platform/organizations/{OrgId}/edit"
@rendermode InteractiveServer
@attribute [Authorize(Policy = AppPolicies.PlatformPolicy.AdminArea)]

@using System.ComponentModel.DataAnnotations
@using System.Reflection;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using BlazorLoginDemo.Shared.Auth
@using Microsoft.AspNetCore.Components.Forms
@using BlazorLoginDemo.Web.Components.Shared
@using BlazorLoginDemo.Shared.Services.Interfaces.Platform
@using BlazorLoginDemo.Shared.Models.Kernel.Platform
@using BlazorLoginDemo.Shared.Models.Kernel.Billing
@using BlazorLoginDemo.Shared.Models.Static.Platform

@inject IAdminOrgServiceUnified OrgSvc
@inject IAdminLicenseAgreementServiceUnified LicenseService
@inject NavigationManager Nav
@inject ILogger<Edit> Logger
@inject IJSRuntime JS

<EditForm Model="_vm.Organization" OnValidSubmit="@(async () => await SaveAsync(true))">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @if (!string.IsNullOrWhiteSpace(_error))
    {
        <div class="alert alert-danger d-flex align-items-center mb-3" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            @_error
        </div>
    }

    <div class="d-flex align-items-center justify-content-between mb-3">
        <h2 class="mb-0">Edit Organization</h2>
        <div class="btn-group">
            <button type="button" class="btn btn-outline-secondary" @onclick="GoBack">Back</button>
            <button type="submit" class="btn btn-primary">
                @if (_isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                }
                Save
            </button>
        </div>
    </div>

  <!-- Identity -->
    <div class="card mb-3">
        <div class="card-header">Identity</div>
            <div class="card-body row g-3">
            <div class="col-md-3">
                <label class="form-label">Id</label>
                <div class="input-group">
                    <InputText class="form-control bg-light" @bind-Value="_vm.Organization.Id" readonly />
                    <button type="button" class="btn btn-outline-secondary" @onclick="() => CopyToClipboardAsync(_vm.Organization.Id)">
                        <i class="bi bi-clipboard"></i>
                    </button>
                </div>
            </div>
                <div class="col-md-6">
                    <label class="form-label">Name</label>
                    <InputText class="form-control" @bind-Value="_vm.Organization.Name" />
                </div>

                <div class="col-md-2">
                    <label class="form-label">Type</label>
                    <InputSelect class="form-select" @bind-Value="_vm.Organization.Type">
                        @foreach (var t in Enum.GetValues<OrganizationType>())
                        {
                            <option value="@t">@t</option>
                        }
                    </InputSelect>
                </div>

                <div class="col-md-1">
                    <label class="form-label">@(_vm.Organization.IsActive ? "Active" : "Inactive")</label>
                    <div class="form-check form-switch mt-2">
                        <InputCheckbox class="form-check-input" @bind-Value="_vm.Organization.IsActive" />
                        <label class="form-check-label" title="@(_vm.Organization.IsActive ? "Active" : "Inactive")">
                            <span aria-hidden="true">@(_vm.Organization.IsActive ? " ‚úÖ" : " ‚ùå")</span>
                        </label>
                    </div>
                </div>

            <div class="col-md-3">
                <label class="form-label">Parent Organization Id</label>
                <div class="input-group">
                    <InputText class="form-control bg-light" @bind-Value="_vm.Organization.ParentOrganizationId" placeholder="Select a parent organization‚Ä¶" readonly />
                    <button type="button" class="btn btn-outline-secondary" title="Pick Parent Organization" @onclick="OpenParentPickerAsync">
                        <i class="bi bi-card-list"></i>
                    </button>
                </div>
                @* optional helper text showing the picked org name *@
                @* @if (!string.IsNullOrWhiteSpace(_parentOrgDisplay))
                {
                    <small class="text-muted">Selected: @_parentOrgDisplay</small>
                } *@
            </div>


            <div class="col-md-6">
                <label class="form-label">Parent</label>
                <input class="form-control bg-light" value="@(parentOrgName ?? "(none)")" readonly />
            </div>

            <!-- TODO: Link fields in OrgEdit page #25 -->
            <div class="col-md-2">
                <label class="form-label">Type</label>
                <input class="form-control bg-light" value="@(parentOrgType)" readonly />
            </div>

            <!-- TODO: Link fields in OrgEdit page #25 -->
            <div class="col-md-1">
                <label class="form-label">@(_vm.Organization.IsActive ? "Active" : "Inactive")</label>
                <div class="form-check form-switch mt-2">
                    <input type="checkbox" class="form-check-input" checked="@(parentOrgActive)" disabled />
                    <label class="form-check-label">
                        <span aria-hidden="true">@(parentOrgActive ? " ‚úÖ" : " ‚ùå")</span>
                    </label>
                </div>
            </div>

            <div class="col-12">
                <label class="form-label">Children</label>
                <ul class="list-group">
                    @if (_vm.Organization.Children?.Any() == true)
                    {
                        @foreach (var c in _vm.Organization.Children)
                        {
                            <li class="list-group-item d-flex align-items-center">
                                <div class="d-flex align-items-center flex-wrap gap-2">
                                    <span>@c.Name</span>

                                    <!-- Status: green Active / red Disabled -->
                                    <span class="badge rounded-pill @(c.IsActive ? "text-bg-success" : "text-bg-danger")">
                                        @(c.IsActive ? "Active" : "Disabled")
                                    </span>

                                    <!-- Country: white on black -->
                                    @if (!string.IsNullOrWhiteSpace(c.Country))
                                    {
                                        <span class="badge rounded-pill text-bg-dark">@c.Country</span>
                                    }

                                    <!-- TaxId: show only if present, info color -->
                                    @if (!string.IsNullOrWhiteSpace(c.TaxId))
                                    {
                                        <span class="badge rounded-pill text-bg-info">TaxId: @c.TaxId</span>
                                    }
                                </div>

                                <div class="ms-auto d-flex align-items-center gap-2">
                                    <span class="text-muted small">@c.Id</span>
                                    <button type="button"
                                            class="btn btn-sm btn-outline-secondary"
                                            title="Open org"
                                            @onclick="(() => GoToChildOrgById(c.Id))">
                                        <i class="bi bi-building-gear"></i>
                                    </button>
                                </div>
                            </li>
                        }
                    }
                    else
                    {
                        <li class="list-group-item text-muted">No child organizations.</li>
                    }
                </ul>
            </div>
        </div>
    </div>

    <!-- Company Defaults -->
    <div class="card mb-3">
        <div class="card-header">Company Defaults</div>
        <div class="card-body row g-3">
            <div class="col-md-2">
                <label class="form-label" for="defaultCurrency">Billing Currency</label>
                <InputSelect id="defaultCurrency" class="form-select" @bind-Value="_vm.Organization.DefaultCurrency">
                    @foreach (CurrencyOption c in _currencyOptions)
                    {
                        <option value="@c.Code">@c.Code @c.Flag</option>
                    }
                </InputSelect>
            </div>
            <div class="col-md-3">
                <label class="form-label" for="taxIdType">Tax ID Type</label>
                <InputSelect id="defaultCurrency" class="form-select" @bind-Value="_vm.Organization.TaxIdType">
                    @foreach (var t in _taxIdOptions)
                    {
                        <option value="@t">@t</option>
                    }
                </InputSelect>
            </div>
            <div class="col-md-3">
                <label class="form-label">Tax Id</label>
                <div class="input-group">
                    <InputText class="form-control" @bind-Value="_vm.Organization.TaxId" />
                    <button type="button" class="btn btn-outline-secondary" @onclick="() => ValidateTaxIdAsync(_vm.Organization.Id, _vm.Organization.TaxIdType)">
                        <i class="bi bi-check-circle"></i>
                    </button>
                </div>
            </div>
            <div class="col-md-2">
                <label class="form-label">üåç Last Validated (UTC)</label>
                <input class="form-control" value="@FormatUtc(_vm.Organization.TaxLastValidated)" readonly />
            </div>
            <div class="col-md-2">
                <label class="form-label">üïí Last Validated (Local)</label>
                <input class="form-control" value="@FormatLocalBrowser(_vm.Organization.TaxLastValidated)" readonly />
            </div>
        </div>
    </div>

    <!-- Physical Address -->
    <div class="card mb-3">
        <div class="card-header">Physical Address</div>
        <div class="card-body row g-3">
            <div class="col-md-4">
                <label class="form-label">Address Line 1</label>
                <InputText class="form-control" @bind-Value="_vm.Organization.AddressLine1" />
            </div>
            <div class="col-md-4">
                <label class="form-label">Address Line 2</label>
                <InputText class="form-control" @bind-Value="_vm.Organization.AddressLine2" />
            </div>
            <div class="col-md-4">
                <label class="form-label">Address Line 3</label>
                <InputText class="form-control" @bind-Value="_vm.Organization.AddressLine3" />
            </div>
            <div class="col-md-3">
                <label class="form-label">City</label>
                <InputText class="form-control" @bind-Value="_vm.Organization.City" />
            </div>
            <div class="col-md-3">
                <label class="form-label">State/Province</label>
                <InputText class="form-control" @bind-Value="_vm.Organization.State" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Postal Code</label>
                <InputText class="form-control" @bind-Value="_vm.Organization.PostalCode" />
            </div>
            <div class="col-md-3">
                <label class="form-label" for="addressCountry">Country</label>
                <InputSelect id="addressCountry" class="form-select" @bind-Value="_vm.Organization.Country">
                    @foreach (string c in _countryOptions)
                    {
                        <option value="@c">@c</option>
                    }
                </InputSelect>
            </div>
        </div>
    </div>

    <!-- Mailing Address -->
    <div class="card mb-3">
        <div class="card-header d-flex align-items-center justify-content-between">
            <span>Mailing Address</span>
            <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="CopyPhysicalToMailing">
                Copy from Physical
            </button>
        </div>
        <div class="card-body row g-3">
            <div class="col-md-4">
                <label class="form-label">Address Line 1</label>
                <InputText class="form-control" @bind-Value="_vm.Organization.MailingAddressLine1" />
            </div>
            <div class="col-md-4">
                <label class="form-label">Address Line 2</label>
                <InputText class="form-control" @bind-Value="_vm.Organization.MailingAddressLine2" />
            </div>
            <div class="col-md-4">
                <label class="form-label">Address Line 3</label>
                <InputText class="form-control" @bind-Value="_vm.Organization.MailingAddressLine3" />
            </div>
            <div class="col-md-3">
                <label class="form-label">City</label>
                <InputText class="form-control" @bind-Value="_vm.Organization.MailingCity" />
            </div>
            <div class="col-md-3">
                <label class="form-label">State/Province</label>
                <InputText class="form-control" @bind-Value="_vm.Organization.MailingState" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Postal Code</label>
                <InputText class="form-control" @bind-Value="_vm.Organization.MailingPostalCode" />
            </div>
            <div class="col-md-3">
                <label class="form-label" for="mailingCountry">Country</label>
                <InputSelect id="mailingCountry" class="form-select" @bind-Value="_vm.Organization.MailingCountry">
                    @foreach (string c in _countryOptions)
                    {
                        <option value="@c">@c</option>
                    }
                </InputSelect>
            </div>
        </div>
    </div>

    <!-- Contacts -->
    <div class="row">
        <div class="col-lg-4">
            <div class="card mb-3">
                <div class="card-header d-flex align-items-center justify-content-between">
                    <span>General / Commercial Contact</span>
                    <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="@(() => CopyGeneralContactDownAsync())">Copy Down</button>
                </div>
                <div class="card-body row g-3">
                    <div class="col-md-6"><label class="form-label">First Name</label><InputText class="form-control" @bind-Value="_vm.Organization.ContactPersonFirstName" /></div>
                    <div class="col-md-6"><label class="form-label">Last Name</label><InputText class="form-control" @bind-Value="_vm.Organization.ContactPersonLastName" /></div>
                    <div class="col-md-4"><label class="form-label">CC</label>
                        <InputSelect id="ccPerson" class="form-select" @bind-Value="_vm.Organization.ContactPersonCountryCode">
                            @foreach (string i in _iddOptions)
                            {
                                <option value="@i">@i</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col-md-8"><label class="form-label">Phone</label><InputText class="form-control" @bind-Value="_vm.Organization.ContactPersonPhone" /></div>
                    <div class="col-12"><label class="form-label">Email</label><InputText class="form-control" @bind-Value="_vm.Organization.ContactPersonEmail" /></div>
                    <div class="col-12"><label class="form-label">Job Title</label><InputText class="form-control" @bind-Value="_vm.Organization.ContactPersonJobTitle" /></div>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card mb-3">
                <div class="card-header d-flex align-items-center justify-content-between">
                    <span>Billing Contact</span>
                    <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="@(() => CopyFromGeneralContactToBillingAsync())">Copy from General</button>
                </div>
                <div class="card-body row g-3">
                    <div class="col-md-6"><label class="form-label">First Name</label><InputText class="form-control" @bind-Value="_vm.Organization.BillingPersonFirstName" /></div>
                    <div class="col-md-6"><label class="form-label">Last Name</label><InputText class="form-control" @bind-Value="_vm.Organization.BillingPersonLastName" /></div>
                    <div class="col-md-4"><label class="form-label">CC</label>
                        <InputSelect id="ccBilling" class="form-select" @bind-Value="_vm.Organization.BillingPersonCountryCode">
                            @foreach (string i in _iddOptions)
                            {
                                <option value="@i">@i</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col-md-8"><label class="form-label">Phone</label><InputText class="form-control" @bind-Value="_vm.Organization.BillingPersonPhone" /></div>
                    <div class="col-12"><label class="form-label">Email</label><InputText class="form-control" @bind-Value="_vm.Organization.BillingPersonEmail" /></div>
                    <div class="col-12"><label class="form-label">Job Title</label><InputText class="form-control" @bind-Value="_vm.Organization.BillingPersonJobTitle" /></div>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card mb-3">
                <div class="card-header d-flex align-items-center justify-content-between">
                    <span>Admin / Technical Contact</span>
                    <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="@(() => CopyFromGeneralContactToAdminAsync())">Copy from General</button>
                </div>
                <div class="card-body row g-3">
                    <div class="col-md-6"><label class="form-label">First Name</label><InputText class="form-control" @bind-Value="_vm.Organization.AdminPersonFirstName" /></div>
                    <div class="col-md-6"><label class="form-label">Last Name</label><InputText class="form-control" @bind-Value="_vm.Organization.AdminPersonLastName" /></div>
                    <div class="col-md-4"><label class="form-label">CC</label>
                        <InputSelect id="ccAdmin" class="form-select" @bind-Value="_vm.Organization.AdminPersonCountryCode">
                            @foreach (string i in _iddOptions)
                            {
                                <option value="@i">@i</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col-md-8"><label class="form-label">Phone</label><InputText class="form-control" @bind-Value="_vm.Organization.AdminPersonPhone" /></div>
                    <div class="col-12"><label class="form-label">Email</label><InputText class="form-control" @bind-Value="_vm.Organization.AdminPersonEmail" /></div>
                    <div class="col-12"><label class="form-label">Job Title</label><InputText class="form-control" @bind-Value="_vm.Organization.AdminPersonJobTitle" /></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Domains -->
    <div class="card mb-3">
        <div class="card-header">Tenant Domains</div>
        <div class="card-body">
            <div class="input-group mb-2">
                <InputText class="form-control" @bind-Value="_vm.NewDomain" placeholder="example.com" />
                <button type="button" class="btn btn-outline-primary" @onclick="AddDomainAsync" disabled="@_isSaving">
                    Add
                </button>
            </div>

            @if (!string.IsNullOrWhiteSpace(_vm.DomainMessage))
            {
                <div class="text-danger small mb-2">@_vm.DomainMessage</div>
            }

            @if (_vm.Domains.Count == 0)
            {
                <div class="text-muted">No domains.</div>
            }
            else
            {
                <ul class="list-group">
                    @foreach (var d in _vm.Domains)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span>@d</span>
                            <button type="button"
                                    class="btn btn-sm btn-outline-danger"
                                    title="Remove"
                                    @onclick="async () => await RemoveDomainAsync(d)"
                                    disabled="@(_isSaving)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </li>
                    }
                </ul>
            }
        </div>
    </div>

    <!-- Policies -->
    <div class="card mb-3">
        <div class="card-header d-flex align-items-center justify-content-between">
            <span>Policies</span>
            <div class="btn-group">
                <button type="button" class="btn btn-outline-primary" @onclick="ViewTravelPolicies">Travel Policies</button>
                <button type="submit" class="btn btn-primary">Expense Policies</button>
            </div>
        </div>
        <div class="card-body row">
            <div class="col-md-6">
                <label class="form-label">Travel Policies</label>
                <ul class="list-group">
                    @if (_vm.Organization.TravelPolicies?.Any() == true)
                    {
                        @foreach (TravelPolicy p in _vm.Organization.TravelPolicies)
                        {
                            <li class="list-group-item">@p.PolicyName</li>
                        }
                    }
                    else
                    {
                        <li class="list-group-item text-muted">None</li>
                    }
                </ul>
            </div>
            <div class="col-md-6">
                <label class="form-label">Expense Policies</label>
                <ul class="list-group">
                    @if (_vm.Organization.ExpensePolicies?.Any() == true)
                    {
                        @foreach (var p in _vm.Organization.ExpensePolicies)
                        {
                            <li class="list-group-item">@p</li>
                        }
                    }
                    else
                    {
                        <li class="list-group-item text-muted">None</li>
                    }
                </ul>
            </div>
        </div>
    </div>

    <!-- Licensing -->
    <div class="card mb-3">
        <div class="card-header d-flex align-items-center justify-content-between">
            <span>Licensing / Billing</span>
            <div class="btn-group">
                <button type="submit" class="btn btn-primary">Billing Profile</button>
            </div>
        </div>
        <div class="card-body row g-3">
            <div class="col-md-3">
                <label class="form-label">License Agreement ID</label>
                <div class="input-group">
                    <InputText class="form-control bg-light" @bind-Value="_vm.Organization.LicenseAgreementId" readonly />
                    @if (_vm.Organization.LicenseAgreementId is not null)
                    {
                        <button type="button" class="btn btn-outline-secondary" @onclick="() => ViewLicense(_vm.Organization.LicenseAgreementId)">
                            <i class="bi bi-file-earmark-text"></i>
                        </button>
                    }
                </div>
            </div>
            <div class="col-md-3">
                <label class="form-label">Payment Status</label>
                <input class="form-control bg-light" value="@(_licenseVM?.PaymentStatus is null ? "(none)" : _licenseVM.PaymentStatus)" readonly />
            </div>
            <div class="col-md-3">
                <label class="form-label">Expiry Date</label>
                <input class="form-control bg-light" value="@(_licenseVM?.ExpiryDate is null ? "(none)" : _licenseVM.ExpiryDate)" readonly />
            </div>
            <div class="col-md-3">
                <label class="form-label">Renewal Date</label>
                <input class="form-control bg-light" value="@(_licenseVM?.RenewalDate is null ? "(none)" : _licenseVM.RenewalDate)" readonly />
            </div>
        </div>
    </div>

    <!-- Audit -->
    <div class="card mb-4">
        <div class="card-header">Audit</div>
        <div class="card-body row g-3">
            <div class="col-md-3">
                <label class="form-label">üåç Last Updated (UTC)</label>
                <div class="input-group">
                    <input class="form-control" value="@FormatUtc(_vm.Organization.LastUpdatedUtc)" readonly />
                    <button type="button" class="btn btn-outline-secondary" @onclick="() => CopyToClipboardAsync(FormatUtc(_vm.Organization.LastUpdatedUtc))">
                        <i class="bi bi-clipboard"></i>
                    </button>
                </div>
            </div>
            <div class="col-md-3">
                <label class="form-label">üïí Last Updated (Local)</label>
                <div class="input-group">
                    <input class="form-control" value="@FormatLocalBrowser(_vm.Organization.LastUpdatedUtc)" readonly />
                    <button type="button" class="btn btn-outline-secondary" @onclick="() => CopyToClipboardAsync(FormatLocalBrowser(_vm.Organization.LastUpdatedUtc))">
                        <i class="bi bi-clipboard"></i>
                    </button>
                </div>
            </div>    
        </div>
    </div>
</EditForm>

<OrgPickerModal @ref="_orgPicker" />

@code {
    // -----------------
    // Parameters and Classes
    // -----------------
    [Parameter] public string? OrgId { get; set; }

    private OrgEditVm _vm = new();
    private bool _isSaving;
    private string? _error;

    // holds the browser time zone (IANA id like "Australia/Sydney", "Europe/London", etc.)
    private TimeZoneInfo? _browserTz; 
    private string? _tzId;
    
    // holds parent org info
    private string? parentOrgName;
    private string? parentOrgType;
    private bool parentOrgActive = false;

    // license, billing
    private LicenseAgreementUnified? _licenseVM;
    
    private record CurrencyOption(string Code, string Flag);
    private readonly List<string> _taxIdOptions = new List<string>
    {
        string.Empty,
        "AU ABN",
        "AU ACN",
        "NZ ABN"
    };

    private readonly List<string> _countryOptions = new List<string>
    {
        string.Empty,
        "Australia",
        "New Zealand",
        "Singapore",
        "United Kingdom",
        "United States",
        "Canada"
    };

    private readonly List<string> _iddOptions = new List<string>
    {
        string.Empty,
        "+61",
        "+64",
        "+65",
        "+44",
        "+1"
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        try
        {
            _tzId = await JS.InvokeAsync<string>("blazorGetTz"); // e.g., "Australia/Sydney"
            _browserTz = TimeZoneInfo.FindSystemTimeZoneById(_tzId);

            // IMPORTANT: rooted path (leading slash)
            _clipboard = await JS.InvokeAsync<IJSObjectReference>("import", "/js/clipboard.js");

            // Optional sanity check (remove if you want)
            string? ping = await _clipboard.InvokeAsync<string>("ping");
        }
        catch
        {
            // If you want AU as default instead of server-local/UTC:
            _tzId = "Australia/Sydney";
            _browserTz = TimeZoneInfo.FindSystemTimeZoneById(_tzId);
        }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        // Load (plug into your existing service)
        if (!string.IsNullOrWhiteSpace(OrgId))
        {
            IAdminOrgServiceUnified.OrgAggregate? loaded = await OrgSvc.GetByIdAsync(OrgId);
            if (loaded is null)
            {
                Nav.NavigateTo(uri: "/error/no-org-id");
                return;
            }
            _vm.Organization = loaded.Org ?? new OrganizationUnified { Name = "Unknown" };
            _vm.Domains = (loaded.Domains ?? Array.Empty<OrganizationDomainUnified>())
                .Select(x => (x.Domain ?? string.Empty).Trim().ToLowerInvariant())
                .Where(s => !string.IsNullOrWhiteSpace(s))
                .Distinct(StringComparer.OrdinalIgnoreCase)
                .ToList();
            _vm.OriginalSignature = ComputeSignature(_vm.Organization, _vm.Domains);

            // load license if linked
            if (_vm.Organization.LicenseAgreementId is not null)
            {
                IAdminLicenseAgreementServiceUnified.LicenseAggregate? agg = await LicenseService.GetByIdAsync(_vm.Organization.LicenseAgreementId, CancellationToken.None);
                if (agg is not null)
                {
                    _licenseVM = agg.License;
                }
            }

            await LoadParentOrgInfo(pOrgId: _vm.Organization.ParentOrganizationId);
            await LoadChildrenAsync(_vm.Organization.Id);

            StateHasChanged();
        }
    }

    private async Task SaveAsync(bool navigateOnSuccess = true)
    {
        _error = null;
        _isSaving = true;

        try
        {
            // 1) Persist scalars (name, parent, addresses, tax, country, etc.)
            bool ok = await OrgSvc.UpdateOrgAsync(_vm.Organization);
            if (!ok)
            {
                _error = "Update did not apply: 0 rows affected (record may be unchanged or missing).";
                return; // stay on page, show error
            }

            // 2) Persist domains via unified replace
            List<string>? normalizedDomains = _vm.Domains
                .Select(d => (d ?? string.Empty).Trim().ToLowerInvariant())
                .Where(d => !string.IsNullOrWhiteSpace(d))
                .Distinct(StringComparer.OrdinalIgnoreCase)
                .ToList();

            IAdminOrgServiceUnified.OrgAggregate? updated = await OrgSvc.UpdateAsync(new IAdminOrgServiceUnified.UpdateOrgRequest(
                OrgId: _vm.Organization.Id,
                Name: null,
                Type: null,
                ParentOrganizationId: null,
                IsActive: null,
                DomainsReplace: normalizedDomains
            ));

            // 3) Rehydrate + recompute signature AFTER successful save
            _vm.Organization = updated.Org;
            _vm.Domains = (updated.Domains ?? Array.Empty<OrganizationDomainUnified>())
                .Select(x => (x.Domain ?? string.Empty).Trim().ToLowerInvariant())
                .Where(s => !string.IsNullOrWhiteSpace(s))
                .Distinct(StringComparer.OrdinalIgnoreCase)
                .ToList();

            await LoadParentOrgInfo(_vm.Organization.ParentOrganizationId);
            await LoadChildrenAsync(_vm.Organization.Id);

            _vm.OriginalSignature = ComputeSignature(_vm.Organization, _vm.Domains);

            if (navigateOnSuccess)
                Nav.NavigateTo("/platform/organizations");
        }
        catch (Exception ex)
        {
            var msg = ex.GetBaseException().Message;
            if (!string.IsNullOrWhiteSpace(_vm.NewDomain) &&
                msg.Contains("already", StringComparison.OrdinalIgnoreCase))
            {
                _vm.DomainMessage = BuildDomainConflictMessage(msg, _vm.NewDomain);
            }
            _error = msg;
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }

    private void GoBack() => Nav.NavigateTo("/platform/organizations");

    private async Task CopyFromGeneralContactToBillingAsync()
    {
        OrganizationUnified? o = _vm.Organization;
        o.BillingPersonFirstName = o.ContactPersonFirstName;
        o.BillingPersonLastName = o.ContactPersonLastName;
        o.BillingPersonCountryCode = o.ContactPersonCountryCode;
        o.BillingPersonPhone = o.ContactPersonPhone;
        o.BillingPersonEmail = o.ContactPersonEmail;
        o.BillingPersonJobTitle = o.ContactPersonJobTitle;

        await SaveAsync(navigateOnSuccess: false);
    }

    private async Task CopyFromGeneralContactToAdminAsync()
    {
        OrganizationUnified? o = _vm.Organization;
        o.AdminPersonFirstName = o.ContactPersonFirstName;
        o.AdminPersonLastName = o.ContactPersonLastName;
        o.AdminPersonCountryCode = o.ContactPersonCountryCode;
        o.AdminPersonPhone = o.ContactPersonPhone;
        o.AdminPersonEmail = o.ContactPersonEmail;
        o.AdminPersonJobTitle = o.ContactPersonJobTitle;

        await SaveAsync(navigateOnSuccess: false);
    }

    private async Task CopyGeneralContactDownAsync()
    {
        OrganizationUnified? o = _vm.Organization;
        o.BillingPersonFirstName = o.ContactPersonFirstName;
        o.BillingPersonLastName = o.ContactPersonLastName;
        o.BillingPersonCountryCode = o.ContactPersonCountryCode;
        o.BillingPersonPhone = o.ContactPersonPhone;
        o.BillingPersonEmail = o.ContactPersonEmail;
        o.BillingPersonJobTitle = o.ContactPersonJobTitle;
        o.AdminPersonFirstName = o.ContactPersonFirstName;
        o.AdminPersonLastName = o.ContactPersonLastName;
        o.AdminPersonCountryCode = o.ContactPersonCountryCode;
        o.AdminPersonPhone = o.ContactPersonPhone;
        o.AdminPersonEmail = o.ContactPersonEmail;
        o.AdminPersonJobTitle = o.ContactPersonJobTitle;

        await SaveAsync(navigateOnSuccess: false);
    }

    private void CopyPhysicalToMailing()
    {
        OrganizationUnified? o = _vm.Organization;
        o.MailingAddressLine1 = o.AddressLine1;
        o.MailingAddressLine2 = o.AddressLine2;
        o.MailingAddressLine3 = o.AddressLine3;
        o.MailingCity = o.City;
        o.MailingState = o.State;
        o.MailingPostalCode = o.PostalCode;
        o.MailingCountry = o.Country;
    }

    // Domain helpers
    private async Task AddDomainAsync()
    {
        _vm.DomainMessage = string.Empty;

        var value = (_vm.NewDomain ?? string.Empty).Trim().ToLowerInvariant();
        if (string.IsNullOrWhiteSpace(value))
        {
            _vm.DomainMessage = "Please enter a domain.";
            return;
        }

        if (_vm.Domains.Contains(value, StringComparer.OrdinalIgnoreCase))
        {
            _vm.DomainMessage = "That domain already exists.";
            return;
        }

        _isSaving = true;
        try
        {
            var newDomains = _vm.Domains
                .Append(value)
                .Select(d => d.Trim().ToLowerInvariant())
                .Where(d => !string.IsNullOrWhiteSpace(d))
                .Distinct(StringComparer.OrdinalIgnoreCase)
                .ToList();

            await OrgSvc.UpdateAsync(new IAdminOrgServiceUnified.UpdateOrgRequest(
                OrgId: _vm.Organization.Id,
                Name: null,
                Type: null,
                ParentOrganizationId: null,
                IsActive: null,
                DomainsReplace: newDomains
            ));

            var fresh = await OrgSvc.GetByIdAsync(_vm.Organization.Id);
            if (fresh is not null)
            {
                _vm.Organization = fresh.Org;
                _vm.Domains = (fresh.Domains ?? Array.Empty<OrganizationDomainUnified>())
                    .Select(x => (x.Domain ?? string.Empty).Trim().ToLowerInvariant())
                    .Where(s => !string.IsNullOrWhiteSpace(s))
                    .Distinct(StringComparer.OrdinalIgnoreCase)
                    .ToList();
            }

            await LoadChildrenAsync(_vm.Organization.Id);

            _vm.NewDomain = string.Empty;
        }
        catch (InvalidOperationException ex)
        {
            // Server uses exceptions for domain conflicts ‚Äî show a friendly error
            _vm.DomainMessage = BuildDomainConflictMessage(ex.Message, value);
        }
        catch (Exception ex)
        {
            // Anything else: still keep the page alive and show a compact error
            _vm.DomainMessage = $"Unable to add '{value}': {ex.GetBaseException().Message}";
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }

    private async Task RemoveDomainAsync(string domain)
    {
        _vm.DomainMessage = string.Empty;
        var target = (domain ?? string.Empty).Trim().ToLowerInvariant();
        if (string.IsNullOrWhiteSpace(target)) return;

        _isSaving = true;
        try
        {
            var newDomains = _vm.Domains
                .Where(d => !string.Equals(d?.Trim(), target, StringComparison.OrdinalIgnoreCase))
                .Select(d => (d ?? string.Empty).Trim().ToLowerInvariant())
                .Where(d => !string.IsNullOrWhiteSpace(d))
                .Distinct(StringComparer.OrdinalIgnoreCase)
                .ToList();

            await OrgSvc.UpdateAsync(new IAdminOrgServiceUnified.UpdateOrgRequest(
                OrgId: _vm.Organization.Id,
                Name: null,
                Type: null,
                ParentOrganizationId: null,
                IsActive: null,
                DomainsReplace: newDomains
            ));

            var fresh = await OrgSvc.GetByIdAsync(_vm.Organization.Id);

            await LoadChildrenAsync(_vm.Organization.Id);

            if (fresh is not null)
            {
                _vm.Organization = fresh.Org;
                _vm.Domains = (fresh.Domains ?? Array.Empty<OrganizationDomainUnified>())
                    .Select(x => (x.Domain ?? string.Empty).Trim().ToLowerInvariant())
                    .Where(s => !string.IsNullOrWhiteSpace(s))
                    .Distinct(StringComparer.OrdinalIgnoreCase)
                    .ToList();
                _vm.OriginalSignature = ComputeSignature(_vm.Organization, _vm.Domains);
            }
            else
            {
                // Fallback: if refresh failed, baseline from current org + the list we just persisted
                _vm.OriginalSignature = ComputeSignature(_vm.Organization, newDomains);
            }
        }
        catch (Exception ex)
        {
            _vm.DomainMessage = $"Unable to remove '{target}': {ex.GetBaseException().Message}";
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }

    private string DomainLabel(OrganizationDomainUnified d)
        => GetDomain(d);

    private static string GetDomain(OrganizationDomainUnified d)
    {
        // Prefer a 'Domain' property if present; fall back to ToString()
        var prop = d.GetType().GetProperty("Domain");
        return prop?.GetValue(d)?.ToString() ?? d.ToString() ?? "(domain)";
    }

    // -----------------
    // ViewModel
    // -----------------
    private sealed class OrgEditVm
    {
        public OrganizationUnified Organization { get; set; } = new OrganizationUnified { Name = string.Empty };

        // Manage domains the OLD way: simple strings
        public List<string> Domains { get; set; } = new();

        public string? NewDomain { get; set; }
        public string DomainMessage { get; set; } = string.Empty;
        public string OriginalSignature { get; set; } = string.Empty;
    }

    private readonly CurrencyOption[] _currencyOptions =
    [
        new CurrencyOption(Code: "AUD", Flag: "üá¶üá∫"),
        new CurrencyOption(Code: "GBP", Flag: "üá¨üáß"),
        new CurrencyOption(Code: "USD", Flag: "üá∫üá∏"),
        new CurrencyOption(Code: "NZD", Flag: "üá≥üáø"),
        new CurrencyOption(Code: "CAD", Flag: "üá®üá¶"),
        new CurrencyOption(Code: "HKD", Flag: "üá≠üá∞"),
        new CurrencyOption(Code: "EUR", Flag: "üá™üá∫"),
    ];

    private static string FormatUtc(DateTime utc)
    {
        DateTime fixedUtc = utc.Kind == DateTimeKind.Utc ? utc : DateTime.SpecifyKind(utc, DateTimeKind.Utc);
        return fixedUtc.ToString(format: "yyyy-MM-dd HH:mm:ss.fff");
    }

    private string FormatLocalBrowser(DateTime utc)
    {
        if (_browserTz is null) return "‚Ä¶";
        DateTime fixedUtc = utc.Kind == DateTimeKind.Utc ? utc : DateTime.SpecifyKind(utc, DateTimeKind.Utc);
        DateTime local = TimeZoneInfo.ConvertTimeFromUtc(fixedUtc, _browserTz);
        return local.ToString(format: "yyyy-MM-dd HH:mm:ss.fff");
    }
    private IJSObjectReference? _clipboard;

    private async Task CopyToClipboardAsync(string? value)
    {
        // Lazy-load if user clicks before first render finished
        _clipboard ??= await JS.InvokeAsync<IJSObjectReference>("import", "/js/clipboard.js");

        var ok = await _clipboard.InvokeAsync<bool>("copyText", value ?? string.Empty);
    }

    private async Task LoadParentOrgInfo(string? pOrgId)
    {
        if (!string.IsNullOrWhiteSpace(pOrgId))
        {
            IAdminOrgServiceUnified.OrgAggregate? loaded = await OrgSvc.GetByIdAsync(pOrgId);
            if (loaded is null)
                return;
            
            parentOrgActive = loaded.Org.IsActive;
            parentOrgName = loaded.Org.Name;
            parentOrgType = loaded.Org.Type.ToString();
        }
    }

    // Modal reference
    private OrgPickerModal? _orgPicker;

    // Optional friendly display text (Name + Id)
    private string? _parentOrgDisplay;

    private async Task OpenParentPickerAsync()
    {
        var excludeId = _vm?.Organization?.Id;

        var picked = await _orgPicker!.OpenAsync(
            excludeOrgId: excludeId,
            title: "Select Parent Organization",
            typePreset: null);

        if (picked is null) return;

        var org = _vm?.Organization;
        if (org is null) return;

        // No change? Do nothing (don't trigger a save or navigation)
        if (org.ParentOrganizationId == picked.Id) return;

        org.ParentOrganizationId = picked.Id;
        _parentOrgDisplay = $"{picked.Name} ({picked.Id})";

        // Save but stay on this page even if it fails (error will show in the alert)
        await SaveAsync(navigateOnSuccess: false);
    }

    private static string BuildDomainConflictMessage(string serverMessage, string attemptedDomain)
    {
        // If server returned a list like "These domain(s) are already in use: a.com, b.com"
        // we show a concise per-domain message. Otherwise fall back to a generic one.
        if (!string.IsNullOrWhiteSpace(serverMessage) &&
            serverMessage.Contains("already in use", StringComparison.OrdinalIgnoreCase))
        {
            return $"Domain '{attemptedDomain}' is already assigned to another organization.";
        }
        return $"Unable to add '{attemptedDomain}': {serverMessage}";
    }

    // save helpers 'cos the code is shit sometimes junk bitch
    private static readonly JsonSerializerOptions _sigJsonOpts = new()
    {
        DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull,
        WriteIndented = false
    };

    // Hash ONLY scalars from Organization + the normalized domains list.
    // This avoids nav properties and cycles.
    private static string ComputeSignature(OrganizationUnified org, IEnumerable<string> domains)
    {
        var orgScalarShape = ToScalarShape(org);
        var orgJson = JsonSerializer.Serialize(orgScalarShape, _sigJsonOpts);

        var domSig = string.Join("|", (domains ?? Array.Empty<string>())
            .Select(d => (d ?? string.Empty).Trim().ToLowerInvariant())
            .Where(d => !string.IsNullOrWhiteSpace(d))
            .Distinct(StringComparer.OrdinalIgnoreCase)
            .OrderBy(d => d, StringComparer.OrdinalIgnoreCase));

        return $"{orgJson}||{domSig}";
    }

    // Build a { PropertyName : Value } map of only scalar props.
    // Skips any navs/collections/classes that cause cycles.
    private static object ToScalarShape(object obj)
    {
        var dict = new SortedDictionary<string, object?>(StringComparer.Ordinal);
        var props = obj.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance);

        foreach (var p in props)
        {
            if (!p.CanRead) continue;
            var t = p.PropertyType;
            if (IsScalarType(t))
            {
                dict[p.Name] = p.GetValue(obj);
            }
            // else: skip (navs/collections/complex types)
        }

        return dict;
    }

    private static bool IsScalarType(Type t)
    {
        t = Nullable.GetUnderlyingType(t) ?? t;

        if (t.IsEnum) return true;
        if (t.IsPrimitive) return true;

        if (t == typeof(string)) return true;
        if (t == typeof(decimal)) return true;
        if (t == typeof(Guid)) return true;
        if (t == typeof(DateTime) || t == typeof(DateTimeOffset)) return true;

        // .NET 6+ date/time-only types without direct refs
        if (t.FullName == "System.DateOnly" || t.FullName == "System.TimeOnly") return true;

        return false;
    }

    // load children org details
    private async Task LoadChildrenAsync(string? parentId)
    {
        // Blank-out the list first so the UI reflects ‚Äúloading/empty‚Äù correctly
        _vm.Organization.Children = new List<OrganizationUnified>();

        if (string.IsNullOrWhiteSpace(parentId))
            return;

        // Use the existing unified search by parent id
        var kids = await OrgSvc.SearchAsync(parentOrgId: parentId);

        _vm.Organization.Children = kids?
            .Select(k => k.Org)
            .Where(o => o is not null)
            .ToList() ?? new List<OrganizationUnified>();
    }

    // navigate to child org by id
    public void GoToChildOrgById(string orgId)
    {
        Nav.NavigateTo(uri: $"/platform/organizations/{orgId}");
        return;
    }

    public void ViewLicense(string licenseId)
    {
        Nav.NavigateTo(uri: $"/platform/licenses/{licenseId}/license/edit");
        return;
    }

    public void ViewTravelPolicies()
    {
        Nav.NavigateTo(uri: $"/platform/travelpolicy/list/{OrgId}", forceLoad: true);
        return;
    }

//ValidateTaxIdAsync(_vm.Organization.Id)">
    public async Task ValidateTaxIdAsync(string orgId, string taxIdType)
    {
        if (string.IsNullOrWhiteSpace(_vm.Organization.TaxId))
            return;

        _isSaving = true;
        try
        {
            bool isValid = await OrgSvc.ValidateTaxIdAsync(orgId, _vm.Organization.TaxId, _vm.Organization.TaxIdType);
            if (!isValid)
            {
                _error = "The provided Tax ID is not valid.";
            }
            else
            {
                _error = null; // clear previous error if any
            }
        }
        catch (Exception ex)
        {
            _error = $"Error validating Tax ID: {ex.GetBaseException().Message}";
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }
}
