@page "/platform/organizations/{OrgId}/edit"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Sudo,Platform.SuperAdmin")]

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using BlazorLoginDemo.Shared.Services.Interfaces.Platform
@using BlazorLoginDemo.Shared.Models.Kernel.Platform
@using BlazorLoginDemo.Shared.Models.Static.Platform
@inject IAdminOrgServiceUnified OrgSvc
@inject NavigationManager Nav

<div class="container-lg py-4">
  <!-- Title / Back -->
  <div class="d-flex align-items-start justify-content-between mb-3">
    <div>
      <h1 class="h4 mb-1">Edit Organization</h1>
      <p class="text-muted mb-0">Update core org details and managed domains.</p>
    </div>
    <div>
      <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="GoBack" disabled="@isSaving"><i class="bi bi-arrow-left"></i> Back</button>
    </div>
  </div>

  <div class="card shadow-sm">
    <EditForm Model="@vm" OnValidSubmit="SaveAsync">
      <DataAnnotationsValidator />

      <div class="card-header border-0 pb-0">
        @if (!string.IsNullOrWhiteSpace(success))
        {
          <div class="alert alert-success d-flex align-items-center mb-3">
            <i class="bi bi-check-circle-fill fs-5 me-2"></i>
            <div>@success</div>
          </div>
        }
        @if (!string.IsNullOrWhiteSpace(error))
        {
          <div class="alert alert-danger d-flex align-items-center mb-3">
            <i class="bi bi-x-circle-fill fs-5 me-2"></i>
            <div>@error</div>
          </div>
        }
        <ValidationSummary class="alert alert-warning mb-0" />
      </div>

      <div class="card-body">
        @if (isLoading)
        {
          <div class="d-flex align-items-center text-muted"><span class="spinner-border spinner-border-sm me-2"></span> Loading…</div>
        }
        else if (vm is not null)
        {
          <!-- Core Details -->
          <div class="mb-4">
            <div class="row g-3">
              <div class="col-md-7">
                <label for="name" class="form-label">Name</label>
                <InputText id="name" class="form-control" @bind-Value="vm.Name" disabled="@isSaving" />
                <ValidationMessage For="@(() => vm.Name)" class="text-danger" />
              </div>

              <div class="col-md-5">
                <label for="type" class="form-label">Type</label>
                <InputSelect id="type" class="form-select" @bind-Value="vm.Type" disabled="@isSaving">
                  @foreach (var t in orgTypes)
                  {
                    <option value="@t">@t</option>
                  }
                </InputSelect>
              </div>

              <div class="col-md-7">
                <label for="parent" class="form-label">Parent Organization <span class="text-muted">(optional)</span></label>
                <InputSelect id="parent" class="form-select" @bind-Value="vm.ParentOrganizationId" disabled="@isSaving">
                  <option value="">(None)</option>
                  @foreach (var o in parentOrgOptions)
                  {
                    <option value="@o.Id">@o.Label</option>
                  }
                </InputSelect>
              </div>

              <div class="col-md-5 d-flex align-items-end">
                <div class="form-check form-switch">
                  <InputCheckbox id="active" class="form-check-input" @bind-Value="vm.IsActive" disabled="@isSaving" />
                  <label for="active" class="form-check-label ms-2">Active</label>
                </div>
              </div>
            </div>
          </div>

          <hr class="text-body-secondary opacity-25" />

          <!-- Domains -->
          <div class="mb-2">
            <div class="d-flex align-items-center mb-2">
              <i class="bi bi-at me-2"></i>
              <h2 class="h6 mb-0">Managed Email Domains</h2>
            </div>

            <div class="row g-2 align-items-center mb-2">
              <div class="col-sm-8 col-md-6">
                <input class="form-control" placeholder="example.com" @bind="newDomain" @bind:event="oninput" @onkeydown="OnDomainKeyDown" disabled="@isSaving" />
              </div>
              <div class="col-auto">
                <button type="button" class="btn btn-outline-primary" @onclick="AddDomain" disabled="@isSaving || string.IsNullOrWhiteSpace(newDomain)"><i class="bi bi-plus"></i> Add</button>
              </div>
            </div>

            @if (vm.Domains.Count == 0)
            {
              <div class="text-muted small">No domains configured.</div>
            }
            else
            {
              <div class="d-flex flex-wrap gap-2">
                @foreach (var d in vm.Domains)
                {
                  <span class="badge text-bg-light border">
                    <i class="bi bi-globe me-1"></i>@d
                    <button type="button" class="btn btn-sm btn-link text-danger ms-1 p-0 align-text-top" title="Remove" @onclick="() => RemoveDomain(d)" disabled="@isSaving"><i class="bi bi-x"></i></button>
                  </span>
                }
              </div>
            }
          </div>
        }
      </div>

      <div class="card-footer d-flex justify-content-between align-items-center">
        <div class="text-muted small">Saving will replace the domain list with what is shown above.</div>
        <div class="d-flex gap-2">
          <button type="button" class="btn btn-outline-secondary" @onclick="GoBack" disabled="@isSaving">Cancel</button>
          <button type="submit" class="btn btn-primary" disabled="@isSaving || isLoading">
            @if (isSaving) { <span class="spinner-border spinner-border-sm me-2"> Saving…</span> } else { <span>Save changes</span> }
          </button>
        </div>
      </div>

    </EditForm>
  </div>
</div>

@code {
  [Parameter] public string OrgId { get; set; } = default!;

  // State
  private OrgEditVm vm = new();
  private string? error;
  private string? success;
  private bool isLoading = true;
  private bool isSaving;
  private string newDomain = string.Empty;

  private readonly List<SelectOption> parentOrgOptions = new();
  private readonly OrganizationType[] orgTypes = Enum.GetValues<OrganizationType>();

  protected override async Task OnParametersSetAsync()
  {
    await LoadAsync();
  }

  private async Task LoadAsync()
  {
    isLoading = true; error = success = null;
    parentOrgOptions.Clear();

    try
    {
      var agg = await OrgSvc.GetByIdAsync(OrgId);
      if (agg is null)
      {
        error = "Organization not found.";
        return;
      }

      vm = new OrgEditVm
      {
        OrgId = agg.Org.Id,
        Name = agg.Org.Name,
        Type = agg.Org.Type,
        ParentOrganizationId = agg.Org.ParentOrganizationId,
        IsActive = agg.Org.IsActive,
        Domains = agg.Domains.Select(d => d.Domain.Trim().ToLowerInvariant()).Distinct().OrderBy(x => x).ToList()
      };

      var parents = await OrgSvc.SearchAsync(isActive: true);
      foreach (var p in parents.Where(p => p.Org.Id != OrgId))
      {
        parentOrgOptions.Add(new SelectOption(p.Org.Id, p.Org.Name));
      }
      parentOrgOptions.Sort((a,b) => string.Compare(a.Label, b.Label, StringComparison.OrdinalIgnoreCase));
    }
    catch (Exception ex)
    {
      error = ex.GetBaseException().Message;
    }
    finally
    {
      isLoading = false;
    }
  }

  private async Task SaveAsync()
  {
    if (isSaving) return;
    isSaving = true; error = success = null;
    try
    {
      var req = new IAdminOrgServiceUnified.UpdateOrgRequest(
        OrgId: vm.OrgId!,
        Name: vm.Name,
        Type: vm.Type,
        ParentOrganizationId: string.IsNullOrWhiteSpace(vm.ParentOrganizationId) ? null : vm.ParentOrganizationId,
        IsActive: vm.IsActive,
        DomainsReplace: vm.Domains
      );

      var updated = await OrgSvc.UpdateAsync(req);
      success = $"Saved. Org: {updated.Org.Name}";
    }
    catch (Exception ex)
    {
      error = ex.GetBaseException().Message;
    }
    finally
    {
      isSaving = false;
    }
  }

  private void AddDomain()
  {
    var d = (newDomain ?? string.Empty).Trim().ToLowerInvariant();
    if (string.IsNullOrWhiteSpace(d)) return;
    if (d.Contains(' ') || d.Contains("@")) { error = "Enter a bare domain like example.com"; return; }
    if (!vm.Domains.Contains(d)) vm.Domains.Add(d);
    vm.Domains = vm.Domains.Distinct().OrderBy(x => x).ToList();
    newDomain = string.Empty; error = null;
  }

  private void RemoveDomain(string d)
  {
    vm.Domains.Remove(d);
  }

  private void OnDomainKeyDown(KeyboardEventArgs e)
  {
    if (e.Key == "Enter") { AddDomain(); }
  }

  private void GoBack() => Nav.NavigateTo("/platform/organizations");

  private sealed record SelectOption(string Id, string Label);

  private sealed class OrgEditVm
  {
    public string? OrgId { get; set; }

    [Required]
    public string? Name { get; set; }

    [Required]
    public OrganizationType? Type { get; set; }

    public string? ParentOrganizationId { get; set; }
    public bool IsActive { get; set; }

    public List<string> Domains { get; set; } = new();
  }
}
