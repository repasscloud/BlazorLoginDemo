@page "/platform/orgs/{id}/edit"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Sudo,Platform.SuperAdmin")]
@using System.ComponentModel.DataAnnotations
@using BlazorLoginDemo.Shared.Models.Static.Platform
@using BlazorLoginDemo.Shared.Services.Interfaces.Platform
@inject IAdminOrgService OrgService
@inject NavigationManager Nav
@inject ILogger<Edit> Log

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-xl-8 col-lg-9">
            <div class="card shadow-sm">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <div>
                        <h5 class="mb-0">Edit Organization</h5>
                        <small class="text-muted">Update name, type, status, parent, and domains.</small>
                    </div>
                    <div class="d-flex gap-2">
                        <button class="btn btn-outline-secondary" @onclick="BackToList">Back</button>
                        <button class="btn btn-outline-secondary" @onclick="View"><i class="bi bi-box-arrow-up-right me-1"></i>View</button>
                    </div>
                </div>

                <EditForm Model="@vm" OnValidSubmit="@SaveAsync">
                    <DataAnnotationsValidator />

                    <div class="card-body">
                        @if (!string.IsNullOrWhiteSpace(error))
                        {
                            <div class="alert alert-danger d-flex align-items-center" role="alert">
                                <i class="bi bi-x-circle-fill fs-5 me-2"></i>
                                <div>@error</div>
                            </div>
                        }

                        @if (!string.IsNullOrWhiteSpace(success))
                        {
                            <div class="alert alert-success d-flex align-items-center" role="alert">
                                <i class="bi bi-check-circle-fill fs-5 me-2"></i>
                                <div>@success</div>
                            </div>
                        }

                        <ValidationSummary class="alert alert-warning mb-4" />

                        <div class="row g-3">
                            <div class="col-md-6">
                                <label for="orgName" class="form-label">Name</label>
                                <InputText id="orgName" class="form-control" @bind-Value="vm.Name" disabled="@isBusy" />
                                <ValidationMessage For="@(() => vm.Name)" class="text-danger" />
                            </div>

                            <div class="col-md-6">
                                <label for="orgType" class="form-label">Type</label>
                                <InputSelect id="orgType" class="form-select" @bind-Value="vm.Type" disabled="@isBusy">
                                    @foreach (var t in Enum.GetValues<OrganizationType>())
                                    {
                                        <option value="@t">@t</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => vm.Type)" class="text-danger" />
                            </div>

                            <div class="col-md-8">
                                <label for="parentId" class="form-label">Parent Organization Id (optional)</label>
                                <div class="input-group">
                                    <InputText id="parentId" class="form-control" @bind-Value="vm.ParentOrganizationId" placeholder="Org Id" disabled="@isBusy" />
                                    <button type="button"
                                            class="btn btn-outline-secondary"
                                            title="Select Parent"
                                            @onclick="OpenParentPicker"
                                            disabled="@isBusy">
                                        <i class="bi bi-diagram-2"></i>
                                    </button>
                                </div>
                                @if (!string.IsNullOrWhiteSpace(parentDisplay))
                                {
                                    <div class="form-text">
                                        Selected: <code>@parentDisplay</code>
                                        <button type="button" class="btn btn-link btn-sm p-0 ms-2"
                                                @onclick="@(() => { vm.ParentOrganizationId = string.Empty; parentDisplay = null; })">
                                            Clear
                                        </button>
                                    </div>
                                }
                            </div>

                            <div class="col-md-4 d-flex align-items-end">
                                <div class="form-check">
                                    <InputCheckbox id="isActive" class="form-check-input" @bind-Value="vm.IsActive" disabled="@isBusy" />
                                    <label for="isActive" class="form-check-label">Is Active</label>
                                </div>
                            </div>

                            <div class="col-12">
                                <label class="form-label">Domains</label>
                                <div class="input-group mb-2">
                                    <input class="form-control" @bind="newDomain" placeholder="example.com" disabled="@isBusy" />
                                    <button type="button" class="btn btn-outline-primary" @onclick="AddDomain" disabled="@isBusy">Add</button>
                                </div>

                                @if (vm.Domains.Count == 0)
                                {
                                    <div class="text-muted">No domains.</div>
                                }
                                else
                                {
                                    <ul class="list-group">
                                        @foreach (var d in vm.Domains)
                                        {
                                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                                <span>@d</span>
                                                <button type="button"
                                                        class="btn btn-sm btn-outline-danger"
                                                        @onclick="async () => await RemoveDomainAsync(d)"
                                                        disabled="@isBusy">
                                                    Remove
                                                </button>
                                            </li>
                                        }
                                    </ul>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="card-footer d-flex justify-content-between">
                        <button type="button" class="btn btn-outline-secondary" @onclick="BackToList" disabled="@isBusy">Cancel</button>
                        <button type="submit" class="btn btn-primary" disabled="@isBusy">
                            @if (isBusy)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Saving…</span>
                            }
                            else
                            {
                                <span>Save changes</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@* Simple boolean-toggled modal (no JS interop), same style as user modal *@
@if (showParentPicker)
{
    <div class="modal fade show" style="display:block;" tabindex="-1" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-lg modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title mb-0">Select Parent Organization</h5>
                    <button type="button" class="btn-close" @onclick="CloseParentPicker" aria-label="Close"></button>
                </div>
                <div class="modal-body">

                    @if (!string.IsNullOrWhiteSpace(pickerError))
                    {
                        <div class="alert alert-danger d-flex align-items-center" role="alert">
                            <i class="bi bi-x-circle-fill fs-5 me-2"></i>
                            <div>@pickerError</div>
                        </div>
                    }

                    <div class="row g-2 align-items-end mb-2">
                        <div class="col-md-8">
                            <label class="form-label" for="pickerQuery">Search (name or domain)</label>
                            <input id="pickerQuery" class="form-control" @bind="pickerQuery" placeholder="Start typing…" />
                        </div>
                        <div class="col-md-4 d-grid">
                            <button type="button" class="btn btn-primary" @onclick="SearchParentsAsync" disabled="@pickerBusy">
                                @if (pickerBusy)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                }
                                Search
                            </button>
                        </div>
                    </div>

                    <div class="list-group">
                        @if (pickerBusy && pickerResults.Count == 0)
                        {
                            <div class="text-muted small">Searching…</div>
                        }
                        else if (pickerResults.Count == 0)
                        {
                            <div class="text-muted small">No results.</div>
                        }
                        else
                        {
                            @foreach (var r in pickerResults)
                            {
                                var ds = (r.Org.Domains?.Select(x => x.Domain).OrderBy(x => x).ToArray()) ?? Array.Empty<string>();
                                <button type="button"
                                        class="list-group-item list-group-item-action"
                                        @onclick="() => PickParent(r.Org.Id, r.Org.Name)">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h6 class="mb-1">@r.Org.Name</h6>
                                        <small class="text-muted">@r.Org.Type @((r.Org.IsActive ? "· Active" : "· Inactive"))</small>
                                    </div>
                                    <small class="text-muted"><code>@r.Org.Id</code></small><br />
                                    @if (ds.Length > 0)
                                    {
                                        <small class="text-muted">Domains: @string.Join(", ", ds)</small>
                                    }
                                </button>
                            }
                        }
                    </div>
                </div>
                <div class="card-footer d-flex justify-content-end gap-2">
                    <button class="btn btn-outline-secondary" @onclick="CloseParentPicker">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public string id { get; set; } = default!;

    private EditVm vm = new();
    private bool isBusy;
    private string? error;
    private string? success;
    private string? newDomain;
    private string? parentDisplay;

    // Parent picker state (simple modal)
    private bool showParentPicker;
    private bool pickerBusy;
    private string? pickerError;
    private string? pickerQuery;
    private List<IAdminOrgService.OrgAggregate> pickerResults = new();

    protected override async Task OnParametersSetAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        try
        {
            isBusy = true;
            error = null;
            success = null;

            var agg = await OrgService.GetByIdAsync(id);
            if (agg is null)
            {
                error = $"Organization '{id}' not found.";
                return;
            }

            vm = new EditVm
            {
                OrgId = agg.Org.Id,
                Name = agg.Org.Name,
                Type = agg.Org.Type,
                ParentOrganizationId = agg.Org.ParentOrganizationId,
                IsActive = agg.Org.IsActive,
                Domains = (agg.Org.Domains?.Select(d => d.Domain).OrderBy(x => x).ToList()) ?? new List<string>()
            };

            parentDisplay = string.IsNullOrWhiteSpace(vm.ParentOrganizationId) ? null : vm.ParentOrganizationId;
        }
        catch (Exception ex)
        {
            Log.LogError(ex, "Load org for edit failed");
            error = ex.GetBaseException().Message;
        }
        finally
        {
            isBusy = false;
        }
    }

    private async Task SaveAsync()
    {
        try
        {
            isBusy = true;
            error = null;
            success = null;

            var req = new IAdminOrgService.UpdateOrgRequest(
                OrgId: vm.OrgId,
                Name: vm.Name?.Trim(),
                Type: vm.Type,
                // null  => don't change
                // ""    => clear parent
                ParentOrganizationId: vm.ParentOrganizationId is null ? null : vm.ParentOrganizationId.Trim(),
                IsActive: vm.IsActive,
                DomainsReplace: vm.Domains.Select(d => d.Trim().ToLowerInvariant())
                                          .Where(d => !string.IsNullOrWhiteSpace(d))
                                          .Distinct(StringComparer.OrdinalIgnoreCase)
                                          .ToList()
            );

            var updated = await OrgService.UpdateAsync(req);
            success = $"Saved. Org Id: {updated.Org.Id}";
            await LoadAsync();
        }
        catch (Exception ex)
        {
            Log.LogError(ex, "Save org failed");
            error = ex.GetBaseException().Message;
        }
        finally
        {
            isBusy = false;
        }
    }

    private void AddDomain()
    {
        if (string.IsNullOrWhiteSpace(newDomain))
            return;

        var d = newDomain.Trim().ToLowerInvariant();
        if (!vm.Domains.Contains(d, StringComparer.OrdinalIgnoreCase))
            vm.Domains.Add(d);
        newDomain = string.Empty;
    }

    private async Task RemoveDomainAsync(string domain)
    {
        try
        {
            isBusy = true;
            error = null;
            success = null;

            await OrgService.RemoveDomainAsync(vm.OrgId, domain);
            await LoadAsync();

            success = $"Removed domain '{domain}'.";
        }
        catch (Exception ex)
        {
            Log.LogError(ex, "Remove domain failed");
            error = ex.GetBaseException().Message;
        }
        finally
        {
            isBusy = false;
        }
    }

    // Modal open: show results immediately (no pre-fill with current org name)
    private async Task OpenParentPicker()
    {
        pickerQuery = null;
        pickerError = null;
        showParentPicker = true;
        await SearchParentsAsync();
    }

    private void CloseParentPicker()
    {
        showParentPicker = false;
    }

    private async Task SearchParentsAsync()
    {
        try
        {
            pickerBusy = true;
            pickerError = null;

            var list = await OrgService.SearchAsync(
                nameContains: pickerQuery,
                type: null,
                isActive: true,
                parentOrgId: null,
                domainContains: pickerQuery
            );

            // Exclude the current org so it cannot be its own parent
            pickerResults = list
                .Where(x => x.Org.Id != vm.OrgId)
                .OrderBy(x => x.Org.Name)
                .ThenBy(x => x.Org.Id)
                .Take(100)
                .ToList();
        }
        catch (Exception ex)
        {
            pickerError = ex.GetBaseException().Message;
            pickerResults.Clear();
        }
        finally
        {
            pickerBusy = false;
        }
    }

    private void PickParent(string parentId, string parentName)
    {
        vm.ParentOrganizationId = parentId;
        parentDisplay = $"{parentName} ({parentId})";
        CloseParentPicker();
        StateHasChanged();
    }

    private void BackToList() => Nav.NavigateTo("/platform/orgs/search");
    private void View() => Nav.NavigateTo($"/platform/orgs/{id}");

    public sealed class EditVm
    {
        [Required]
        public string OrgId { get; set; } = default!;

        [Required, MaxLength(128)]
        public string Name { get; set; } = string.Empty;

        [Required]
        public OrganizationType? Type { get; set; } = OrganizationType.Client;

        public string? ParentOrganizationId { get; set; }

        public bool IsActive { get; set; } = true;

        public List<string> Domains { get; set; } = new();
    }
}
