@page "/platform/organizations/{OrgId}/edit"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Sudo,Platform.SuperAdmin")]

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using BlazorLoginDemo.Shared.Models.Kernel.Platform
@using BlazorLoginDemo.Shared.Models.Static.Platform
@using BlazorLoginDemo.Shared.Services.Interfaces.Platform

@inject IAdminOrgServiceUnified OrgSvc
@inject NavigationManager Nav

<div class="container-lg py-4">
  <div class="d-flex align-items-center mb-3">
    <button type="button" class="btn btn-link text-decoration-none me-2" @onclick="GoBack">
      <i class="bi bi-arrow-left"></i>
      Back
    </button>
    <h1 class="h4 mb-0">Edit Organisation</h1>
  </div>

  @if (!string.IsNullOrWhiteSpace(error))
  {
    <div class="alert alert-danger d-flex align-items-start" role="alert">
      <i class="bi bi-exclamation-triangle me-2"></i>
      <div>
        <div class="fw-semibold">Error</div>
        <div>@error</div>
      </div>
    </div>
  }

  @if (vm is null || editContext is null)
  {
    <div class="text-muted d-flex align-items-center">
      <span class="spinner-border spinner-border-sm me-2"></span>
      Loading…
    </div>
  }
  else
  {
    <EditForm EditContext="editContext" OnValidSubmit="SaveAsync">
      <DataAnnotationsValidator />
      <ValidationSummary />

      <div class="card shadow-sm">
        <div class="card-body">
          <div class="row g-3">

            <div class="col-md-8">
              <label class="form-label">Organisation Name</label>
              <InputText class="form-control" @bind-Value="vm.Name" disabled="@isSaving" />
            </div>

            <div class="col-md-4">
              <label class="form-label">Type</label>
              <InputSelect class="form-select" @bind-Value="vm.Type" disabled="@isSaving">
                @foreach (var t in Enum.GetValues<OrganizationType>())
                {
                  <option value="@t">@t</option>
                }
              </InputSelect>
            </div>

            <div class="col-12">
              <div class="row g-3">
                <div class="col-md-7">
                  <label for="parent" class="form-label">Parent Organization <span class="text-muted">(optional)</span></label>
                  <InputSelect id="parent" class="form-select" @bind-Value="vm.ParentOrganizationId" disabled="@isSaving">
                    <option value="">(None)</option>
                    @foreach (var p in parentOrgOptions)
                    {
                      <option value="@p.Id">@p.Label</option>
                    }
                  </InputSelect>
                </div>

                <div class="col-md-5 d-flex align-items-end">
                  <div class="form-check form-switch">
                    <InputCheckbox id="active" class="form-check-input" @bind-Value="vm.IsActive" disabled="@isSaving" />
                    <label for="active" class="form-check-label ms-2">Active</label>
                  </div>
                </div>
              </div>
            </div>

            <!-- Domains -->
            <div class="mb-2">
              <div class="d-flex align-items-center mb-2">
                <i class="bi bi-at me-2"></i>
                <h2 class="h6 mb-0">Managed Email Domains</h2>
              </div>

              <div class="row g-2 align-items-center mb-2">
                <div class="col-sm-8 col-md-6">
                  <input class="form-control"
                         placeholder="example.com"
                         @bind="newDomain"
                         @bind:event="oninput"
                         disabled="@isSaving" />
                </div>
                <div class="col-auto">
                  <button type="button"
                          class="btn btn-outline-primary"
                          @onclick="AddDomain"
                          disabled="@isSaving">
                    <i class="bi bi-plus"></i> Add
                  </button>
                </div>
              </div>

              @if (vm.Domains.Count == 0)
              {
                <div class="text-muted">No domains added.</div>
              }
              else
              {
                <ul class="list-group">
                  @foreach (var d in vm.Domains)
                  {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                      <span>@d</span>
                      <button type="button"
                              class="btn btn-sm btn-outline-danger"
                              @onclick="() => RemoveDomain(d)"
                              disabled="@isSaving">
                        <i class="bi bi-x-lg"></i>
                        Remove
                      </button>
                    </li>
                  }
                </ul>
              }
            </div>

          </div>
        </div>

        <div class="card-footer d-flex justify-content-between">
          <div class="text-muted">
            @if (isSaving)
            {
              <span class="spinner-border spinner-border-sm me-2">Saving…</span>
            }
          </div>
          <div class="d-flex">
            <button type="button" class="btn btn-outline-secondary me-2" @onclick="GoBack" disabled="@isSaving">
              Cancel
            </button>
            <button type="submit" class="btn btn-primary" disabled="@isSaving">
              @if (isSaving)
              {
                <span class="spinner-border spinner-border-sm me-2"></span>
              }
              Save
            </button>
          </div>
        </div>
      </div>
    </EditForm>
  }
</div>

@code {
  [Parameter] public string? OrgId { get; set; }

  private Vm? vm;
  private EditContext? editContext;
  private string? error;
  private bool isSaving;
  private string? newDomain;

  private List<(string Id, string Label)> parentOrgOptions = new();

  protected override async Task OnInitializedAsync()
  {
    try
    {
      if (string.IsNullOrWhiteSpace(OrgId))
      {
        error = "No organization id provided.";
        return;
      }

      // Load the target org
      var agg = await OrgSvc.GetByIdAsync(OrgId);
      if (agg is null)
      {
        error = $"Organization not found: {OrgId}";
        return;
      }

      // Build VM from aggregate (note: fields live under agg.Org)
      vm = new Vm
      {
        OrgId = agg.Org.Id,
        Name = agg.Org.Name,
        Type = agg.Org.Type,                          // OrganizationUnified.Type
        ParentOrganizationId = agg.Org.ParentOrganizationId,
        IsActive = agg.Org.IsActive,
        Domains = (agg.Domains ?? Array.Empty<OrganizationDomainUnified>())
                    .Select(d => d.Domain)
                    .Distinct(StringComparer.OrdinalIgnoreCase)
                    .OrderBy(x => x)
                    .ToList()
      };

      // Parent options via SearchAsync (no GetAllAsync on the interface)
      var all = await OrgSvc.SearchAsync();
      parentOrgOptions = all
        .Where(x => x.Org.Id != vm.OrgId)
        .Select(x => (x.Org.Id, $"{x.Org.Name} ({x.Org.Type})"))
        .OrderBy(x => x.Item2)
        .ToList();

      editContext = new EditContext(vm);
    }
    catch (Exception ex)
    {
      error = ex.GetBaseException().Message;
    }
  }

  private async Task SaveAsync()
  {
    if (vm is null || editContext is null)
      return;

    error = null;
    isSaving = true;

    try
    {
      if (!editContext.Validate())
      {
        error = "Please fix validation errors.";
        return;
      }

      // Prepare update request
      var req = new IAdminOrgServiceUnified.UpdateOrgRequest(
        OrgId: vm.OrgId!,
        Name: vm.Name?.Trim(),
        Type: vm.Type, // nullable OrganizationType?
        ParentOrganizationId: string.IsNullOrWhiteSpace(vm.ParentOrganizationId) ? "" : vm.ParentOrganizationId!.Trim(),
        IsActive: vm.IsActive,
        DomainsReplace: vm.Domains?.ToList() // replace set with plain strings
      );

      await OrgSvc.UpdateAsync(req);

      Nav.NavigateTo("/platform/organizations");
    }
    catch (Exception ex)
    {
      error = ex.GetBaseException().Message;
    }
    finally
    {
      isSaving = false;
      StateHasChanged();
    }
  }

  private void AddDomain()
  {
    var d = (newDomain ?? string.Empty).Trim().ToLowerInvariant();

    if (string.IsNullOrWhiteSpace(d))
    {
      error = "Enter a domain like example.com";
      StateHasChanged();
      return;
    }
    if (d.Contains(' ') || d.Contains("@"))
    {
      error = "Enter a bare domain (no spaces, no @).";
      StateHasChanged();
      return;
    }

    if (!vm!.Domains.Contains(d, StringComparer.OrdinalIgnoreCase))
      vm.Domains.Add(d);

    vm.Domains = vm.Domains.Distinct(StringComparer.OrdinalIgnoreCase).OrderBy(x => x).ToList();
    newDomain = string.Empty;
    error = null;
    StateHasChanged();
  }

  private void RemoveDomain(string d)
  {
    vm!.Domains.RemoveAll(x => string.Equals(x, d, StringComparison.OrdinalIgnoreCase));
    StateHasChanged();
  }

  private void GoBack() => Nav.NavigateTo("/platform/organizations");

  private sealed class Vm
  {
    public string? OrgId { get; set; }

    [Required, MaxLength(128)]
    public string? Name { get; set; }

    [Required]
    public OrganizationType? Type { get; set; }

    public string? ParentOrganizationId { get; set; }
    public bool IsActive { get; set; }
    public List<string> Domains { get; set; } = new();
  }
}
