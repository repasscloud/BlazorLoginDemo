@page "/platform/organizations/{Id}"
@rendermode InteractiveServer
@attribute [Authorize(Policy = AppPolicies.PlatformPolicy.AdminArea)]

@using BlazorLoginDemo.Shared.Services.Interfaces.Platform
@using BlazorLoginDemo.Shared.Models.Kernel.Platform
@using BlazorLoginDemo.Shared.Models.Static.Platform
@using Microsoft.AspNetCore.Components.Routing
@using BlazorLoginDemo.Shared.Auth
@inject IAdminOrgServiceUnified OrgService
@inject NavigationManager Nav

<PageTitle>Org QuickView</PageTitle>

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-xl-8 col-lg-9">

            @if (_loading)
            {
                <div class="text-center my-5">
                    <div class="spinner-border text-primary"></div>
                </div>
            }
            else if (_error is not null)
            {
                <div class="alert alert-danger">@_error</div>
            }
            else if (_org?.Org is not null)  @* guard both _org and _org.Org *@
            {
                var org = _org.Org;

                <div class="card shadow-sm mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">@org.Name</h4>
                        <div>
                            @if (org.LicenseAgreement is null)
                            {
                                <button class="btn btn-warning me-2" @onclick="CreateLicense"><i class="bi bi-file-earmark-plus"></i> Add License</button>
                            }
                            <div class="btn-group">
                                <button class="btn btn-outline-secondary" @onclick="BackToList">Back</button>
                                <button class="btn btn-primary" @onclick="EditOrg">Edit</button>
                            </div>
                        </div>
                    </div>

                    <div class="card-body">
                        <dl class="row mb-0">
                            <dt class="col-sm-3">ID</dt>
                            <dd class="col-sm-9">@org.Id</dd>

                            <dt class="col-sm-3">Type</dt>
                            <dd class="col-sm-9">@org.Type</dd>

                            <dt class="col-sm-3">Active</dt>
                            <dd class="col-sm-9">@(org.IsActive ? "Yes" : "No")</dd>

                            @if (!string.IsNullOrWhiteSpace(org.ParentOrganizationId))
                            {
                                <dt class="col-sm-3">Parent Org ID</dt>
                                <dd class="col-sm-9">@org.ParentOrganizationId</dd>
                            }

                            <dt class="col-sm-3">Domains</dt>
                            <dd class="col-sm-9">
                                @if (_org.Domains.Count == 0)
                                {
                                    <span class="text-muted">None</span>
                                }
                                else
                                {
                                    <ul class="mb-0">
                                        @foreach (var d in _org.Domains)
                                        {
                                            <li>@d.Domain</li>
                                        }
                                    </ul>
                                }    
                            </dd>
                        </dl>
                    </div>
                </div>

                <div class="card shadow-sm mb-4">
                    <div class="card-header"><strong>Contact Info</strong></div>
                    <div class="card-body">
                        <dl class="row mb-0">
                            <dt class="col-sm-3">General Contact</dt>
                            <dd class="col-sm-9">
                                @((MarkupString)FormatContact(org.ContactPersonFirstName, org.ContactPersonLastName, org.ContactPersonEmail, org.ContactPersonPhone))
                            </dd>

                            <dt class="col-sm-3">Billing Contact</dt>
                            <dd class="col-sm-9">
                                @((MarkupString)FormatContact(org.BillingPersonFirstName, org.BillingPersonLastName, org.BillingPersonEmail, org.BillingPersonPhone))
                            </dd>

                            <dt class="col-sm-3">Admin Contact</dt>
                            <dd class="col-sm-9">
                                @((MarkupString)FormatContact(org.AdminPersonFirstName, org.AdminPersonLastName, org.AdminPersonEmail, org.AdminPersonPhone))
                            </dd>
                        </dl>
                    </div>
                </div>

                @if (org.LicenseAgreement is not null)
                {
                    <div class="card shadow-sm">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <strong>License Agreement</strong> <button class="btn btn-outline-secondary me-2" @onclick="ViewEditLicense"><i class="bi bi-file-text"></i> Vew License</button>
                        </div>
                        <div class="card-body">
                            <dl class="row mb-0">
                                <dt class="col-sm-4">License Agreement ID</dt>
                                <dd class="col-sm-8">@org.LicenseAgreement.Organization?.LicenseAgreementId</dd>

                                <dt class="col-sm-4">Start Date</dt>
                                <dd class="col-sm-8">@org.LicenseAgreement.StartDate.ToString("yyyy-MM-dd")</dd>

                                <dt class="col-sm-4">Expiry Date</dt>
                                @{
                                    var expiry = org.LicenseAgreement.ExpiryDate.ToDateTime(TimeOnly.MinValue);
                                    var daysLeft = (expiry - DateTime.UtcNow.Date).TotalDays;
                                    string badgeClass = daysLeft > 90 ? "text-bg-secondary" :
                                                        daysLeft > 60 ? "text-bg-success" :
                                                        daysLeft > 30 ? "text-bg-warning" :
                                                        daysLeft > 0  ? "text-bg-danger" :
                                                                        "text-bg-dark";
                                }
                                <dd class="col-sm-8">
                                    @org.LicenseAgreement.ExpiryDate.ToString("yyyy-MM-dd")
                                    <span class="badge @badgeClass ms-2">
                                        @(daysLeft <= 0 ? "Expired" : $"{Math.Ceiling(daysLeft)} days left")
                                    </span>
                                </dd>

                                <dt class="col-sm-4">Renewal Date</dt>
                                <dd class="col-sm-8">
                                    @(org.LicenseAgreement.RenewalDate.HasValue 
                                        ? org.LicenseAgreement.RenewalDate.Value.ToString("yyyy-MM-dd") 
                                        : "â€”")
                                </dd>

                                <dt class="col-sm-4">Remittance Email</dt>
                                <dd class="col-sm-8">
                                    @(string.IsNullOrWhiteSpace(org.LicenseAgreement.RemittanceEmail)
                                        ? (MarkupString)"<span class='text-muted'>None</span>"
                                        : (MarkupString)org.LicenseAgreement.RemittanceEmail)
                                </dd>

                                <dt class="col-sm-4">Client Count Limit</dt>
                                <dd class="col-sm-8">@(org.LicenseAgreement.ClientCountLimit?.ToString() ?? "Unlimited")</dd>

                                <dt class="col-sm-4">User Account Limit</dt>
                                <dd class="col-sm-8">@(org.LicenseAgreement.UserAccountLimit?.ToString() ?? "Unlimited")</dd>

                                <dt class="col-sm-4">Payment Status</dt>
                                <dd class="col-sm-8">@((BlazorLoginDemo.Shared.Models.Static.Billing.PaymentStatus)org.LicenseAgreement.PaymentStatus)</dd>

                                <dt class="col-sm-4">Created At (UTC)</dt>
                                <dd class="col-sm-8">@org.LicenseAgreement.CreatedAtUtc.ToString("yyyy-MM-dd HH:mm:ss")</dd>

                                <dt class="col-sm-4">Last Updated (UTC)</dt>
                                <dd class="col-sm-8">@org.LicenseAgreement.LastUpdatedAtUtc.ToString("yyyy-MM-dd HH:mm:ss")</dd>
                            </dl>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>


@code {
    [Parameter] public string Id { get; set; } = string.Empty;

    private IAdminOrgServiceUnified.OrgAggregate? _org;
    private bool _loading = true;
    private string? _error;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _org = await OrgService.GetByIdAsync(Id);
            if (_org == null) _error = "Organization not found.";
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    private void BackToList() => Nav.NavigateTo("/platform/organizations");

    private void EditOrg()
    {
        if (_org != null)
            Nav.NavigateTo($"/platform/organizations/{_org.Org.Id}/edit");
    }

    private static string FormatContact(string? first, string? last, string? email, string? phone)
    {
        if (string.IsNullOrWhiteSpace(first) && string.IsNullOrWhiteSpace(last) && string.IsNullOrWhiteSpace(email) && string.IsNullOrWhiteSpace(phone))
            return "<span class='text-muted'>None</span>";

        var parts = new List<string>();
        if (!string.IsNullOrWhiteSpace(first) || !string.IsNullOrWhiteSpace(last))
            parts.Add($"{first} {last}".Trim());
        if (!string.IsNullOrWhiteSpace(email))
            parts.Add(email);
        if (!string.IsNullOrWhiteSpace(phone))
            parts.Add(phone);
        return string.Join(" | ", parts);
    }

    private void CreateLicense()
    {
        if (_org is not null)
            Nav.NavigateTo($"/platform/organizations/{_org.Org.Id}/license/new");
    }

    private void ViewEditLicense()
    {
        if (_org is not null)
        {
            if (!string.IsNullOrWhiteSpace(_org.LicenseAgreement?.Organization?.LicenseAgreementId))
                Nav.NavigateTo($"/platform/licenses/{_org.LicenseAgreement.Organization.LicenseAgreementId}/license/edit");
                return;
        }
    }
}
