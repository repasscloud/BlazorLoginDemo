@page "/platform/organizations/{Id}"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Sudo,Platform.SuperAdmin")]

@using BlazorLoginDemo.Shared.Services.Interfaces.Platform
@using BlazorLoginDemo.Shared.Models.Kernel.Platform
@using BlazorLoginDemo.Shared.Models.Static.Platform
@inject IAdminOrgServiceUnified OrgService
@inject NavigationManager Nav

<PageTitle>Organization Details</PageTitle>

<div class="container py-4">
  <div class="row justify-content-center">
    <div class="col-xl-8 col-lg-9">
      <div class="d-flex justify-content-between align-items-center mb-3">
        <h4 class="mb-0">@_org?.Org.Name</h4>
        <div>
          <button class="btn btn-outline-secondary me-2" @onclick="BackToList">Back</button>
          <button class="btn btn-primary" @onclick="EditOrg" disabled="@(_org is null)">Edit</button>
        </div>
      </div>

      @if (_loading)
      {
        <div class="text-center my-5">
          <div class="spinner-border text-primary"></div>
        </div>
      }
      else if (_error is not null)
      {
        <div class="alert alert-danger">@_error</div>
      }
      else if (_org is not null)
      {
        <div class="card shadow-sm mb-4">
          <div class="card-body">
            <dl class="row mb-0">
              <dt class="col-sm-3">ID</dt>
              <dd class="col-sm-9">@_org.Org.Id</dd>

              <dt class="col-sm-3">Type</dt>
              <dd class="col-sm-9">@_org.Org.Type</dd>

              <dt class="col-sm-3">Active</dt>
              <dd class="col-sm-9">@( _org.Org.IsActive ? "Yes" : "No")</dd>

              @if (!string.IsNullOrWhiteSpace(_org.Org.ParentOrganizationId))
              {
                <dt class="col-sm-3">Parent Org ID</dt>
                <dd class="col-sm-9">@_org.Org.ParentOrganizationId</dd>
              }

              <dt class="col-sm-3">Domains</dt>
              <dd class="col-sm-9">
                @if (_org.Domains.Count == 0)
                {
                  <span class="text-muted">None</span>
                }
                else
                {
                  <ul class="mb-0">
                    @foreach (var d in _org.Domains)
                    {
                      <li>@d.Domain</li>
                    }
                  </ul>
                }
              </dd>
            </dl>
          </div>
        </div>

        <div class="card shadow-sm mb-4">
          <div class="card-header"><strong>Contact Info</strong></div>
          <div class="card-body">
            <dl class="row mb-0">
              <dt class="col-sm-3">General Contact</dt>
              <dd class="col-sm-9">@FormatContact(_org.Org.ContactPersonFirstName, _org.Org.ContactPersonLastName, _org.Org.ContactPersonEmail, _org.Org.ContactPersonPhone)</dd>

              <dt class="col-sm-3">Billing Contact</dt>
              <dd class="col-sm-9">@FormatContact(_org.Org.BillingPersonFirstName, _org.Org.BillingPersonLastName, _org.Org.BillingPersonEmail, _org.Org.BillingPersonPhone)</dd>

              <dt class="col-sm-3">Admin Contact</dt>
              <dd class="col-sm-9">@FormatContact(_org.Org.AdminPersonFirstName, _org.Org.AdminPersonLastName, _org.Org.AdminPersonEmail, _org.Org.AdminPersonPhone)</dd>
            </dl>
          </div>
        </div>

        @if (_org.Org.LicenseAgreement is not null)
        {
          <div class="card shadow-sm">
            <div class="card-header"><strong>License Agreement</strong></div>
            <div class="card-body">
              <pre class="mb-0">@System.Text.Json.JsonSerializer.Serialize(_org.Org.LicenseAgreement, new System.Text.Json.JsonSerializerOptions { WriteIndented = true })</pre>
            </div>
          </div>
        }
      }
    </div>
  </div>
</div>

@code {
  [Parameter] public string Id { get; set; } = string.Empty;

  private IAdminOrgServiceUnified.OrgAggregate? _org;
  private bool _loading = true;
  private string? _error;

  protected override async Task OnInitializedAsync()
  {
    try
    {
      _org = await OrgService.GetByIdAsync(Id);
      if (_org == null) _error = "Organization not found.";
    }
    catch (Exception ex)
    {
      _error = ex.Message;
    }
    finally
    {
      _loading = false;
    }
  }

  private void BackToList() => Nav.NavigateTo("/platform/organizations");

  private void EditOrg()
  {
    if (_org != null)
      Nav.NavigateTo($"/platform/organizations/{_org.Org.Id}/edit");
  }

  private static string FormatContact(string? first, string? last, string? email, string? phone)
  {
    if (string.IsNullOrWhiteSpace(first) && string.IsNullOrWhiteSpace(last) && string.IsNullOrWhiteSpace(email) && string.IsNullOrWhiteSpace(phone))
      return "<span class='text-muted'>None</span>";

    var parts = new List<string>();
    if (!string.IsNullOrWhiteSpace(first) || !string.IsNullOrWhiteSpace(last))
      parts.Add($"{first} {last}".Trim());
    if (!string.IsNullOrWhiteSpace(email))
      parts.Add(email);
    if (!string.IsNullOrWhiteSpace(phone))
      parts.Add(phone);
    return string.Join(" | ", parts);
  }
}
