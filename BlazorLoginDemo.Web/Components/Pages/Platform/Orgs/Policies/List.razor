@page "/platform/travelpolicy/list/{OrganizationId}"

@using BlazorLoginDemo.Shared.Models.Kernel.Platform
@using BlazorLoginDemo.Shared.Services.Interfaces.Platform
@using BlazorLoginDemo.Shared.Services.Interfaces.Policy

@inject IAdminOrgServiceUnified AdminOrgService
@inject ITravelPolicyService TravelPolicyService
@inject NavigationManager Nav

<h3 class="mb-3">Travel Policies</h3>

@if (_loading)
{
    <div class="text-center my-5">
        <div class="spinner-border" role="status"></div>
    </div>
}
else
{
    <div class="card">
        <div class="card-header d-flex align-items-center justify-content-between">
            <div>
                <div class="fw-bold">@_org?.Org.Name</div>
                <small class="text-muted">Policies assigned to this organization</small>
            </div>
            <div class="btn-group">
                <button class="btn btn-outline-secondary" @onclick="GoBack">Back</button>
                <button class="btn btn-primary" @onclick="GoBack">Edit</button>
            </div>
        </div>

        <div class="card-body p-0">
            @if (_policies.Count == 0)
            {
                <div class="p-3 text-muted">None</div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover align-middle mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Name</th>
                                <th>Effective From</th>
                                <th>Expires On</th>
                                <th>Active</th>
                                <th>Default</th>
                                <th>Updated</th>
                                <th class="text-end">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                        @foreach (TravelPolicy p in _policies)
                        {
                            <tr>
                                <td class="fw-medium">@p.PolicyName</td>
                                <td>@(p.EffectiveFromUtc?.ToLocalTime().ToString("yyyy-MM-dd") ?? "—")</td>
                                <td>@(p.ExpiresOnUtc?.ToLocalTime().ToString("yyyy-MM-dd") ?? "—")</td>
                                <td>
                                    @if (p.ExpiresOnUtc is not null && p.ExpiresOnUtc > DateTime.UtcNow)
                                    {
                                        <span class="badge bg-success">Active</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">Inactive</span>
                                    }
                                </td>
                                <td>
                                    @if (_org?.Org.DefaultTravelPolicyId == p.Id)
                                    {
                                        <span class="badge bg-primary">Default</span>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-outline-secondary" @onclick="@(() => SetAsDefaultPolicyAsync(p.Id, OrganizationId))">Set As Default</button>
                                    }
                                </td>
                                <td>@((p.LastUpdatedUtc).ToLocalTime().ToString("yyyy-MM-dd HH:mm") ?? "—")</td>
                                <td class="text-end">
                                    <a class="btn btn-sm btn-primary"
                                       href="@($"/platform/travelpolicy/edit/{p.Id}")">
                                        Edit
                                    </a>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public string OrganizationId { get; set; } = default!;

    private IAdminOrgServiceUnified.OrgAggregate? _org;
    private List<TravelPolicy> _policies = new List<TravelPolicy>();
    private bool _loading;

    protected override async Task OnParametersSetAsync()
    {
        _loading = true;
        _org = await AdminOrgService.GetByIdAsync(OrganizationId); // must include TravelPolicies
        _policies = _org?.Org.TravelPolicies?.OrderByDescending(x => x.LastUpdatedUtc).ToList()
                    ?? new List<TravelPolicy>();
        _loading = false;
    }

    void GoBack() => Nav.NavigateTo("/platform/organizations");

    private async Task SetAsDefaultPolicyAsync(string policyId, string orgId)
    {
        if (_org is null || _org.Org.Id != orgId)
            return;

        bool result = await TravelPolicyService.SetAsDefaultPolicyAsync(orgId, policyId);
        if (result)
        {
            _org.Org.DefaultTravelPolicyId = policyId;
            StateHasChanged();
        }
   }
}
