@page "/platform/orgs"
@page "/platform/orgs/search"
@page "/platform/organizations"
@page "/platform/organizations/search"
@rendermode InteractiveServer
@attribute [Authorize(Policy = AppPolicies.PlatformPolicy.AdminArea)]

@using BlazorLoginDemo.Shared.Auth
@using BlazorLoginDemo.Shared.Services.Interfaces.Platform
@using BlazorLoginDemo.Shared.Models.Static.Platform
@using BlazorLoginDemo.Shared.Models.Kernel.Platform
@inject IAdminOrgServiceUnified Orgs
@inject NavigationManager Nav

<h3 class="mb-3">Find Organization</h3>

<div class="card mb-3">
    <div class="card-body">
        <div class="row g-2 align-items-center">
            <div class="col-sm-6">
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-search"></i></span>
                    <input class="form-control"
                        placeholder="Search by name or domain..."
                        value="@_vm.Query"
                        @oninput="OnQueryChanged" />
                    @if (!string.IsNullOrWhiteSpace(_vm.Query))
                    {
                        <button type="button" class="btn btn-outline-secondary" @onclick="ClearQuery">Clear</button>
                    }
                </div>
            </div>

            <div class="col-sm-3">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="activeOnly"
                        checked="@_vm.ActiveOnly" @onchange="OnActiveOnlyChanged" />
                    <label class="form-check-label" for="activeOnly">Active only</label>
                </div>
            </div>

            <div class="col-sm-3 text-sm-end">
                <button type="button" class="btn btn-outline-primary" @onclick="GoToNewOrgPage">
                    <i class="bi bi-building-add me-1"></i> New
                </button>
                <button type="button" class="btn btn-outline-secondary" @onclick="ReloadAsync">
                    <i class="bi bi-arrow-repeat me-1"></i> Reload
                </button>
            </div>
        </div>
    </div>
</div>

@if (_vm.IsLoading)
{
    <div class="text-center my-5">
        <div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>
    </div>
}
else if (!string.IsNullOrEmpty(_vm.Error))
{
    <div class="alert alert-danger">@_vm.Error</div>
}
else
{
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <span>Organizations <span class="badge bg-secondary">@_vm.Filtered.Count</span></span>
            <small class="text-muted">Loaded @_vm.All.Count total</small>
        </div>

        <div class="list-group list-group-flush">
            @if (_vm.Filtered.Count == 0)
            {
                <div class="list-group-item text-muted">No matches.</div>
            }
            else
            {
                @foreach (var o in _vm.Filtered)
                {
                    <button type="button" class="list-group-item list-group-item-action text-start" title="Open @o.Name" @onclick="() => Go(o.Id)">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <div class="fw-semibold">@o.Name</div>

                                <div class="small text-muted">
                                    @if (o.Domains?.Length > 0)
                                    {
                                        <span>@string.Join(", ", o.Domains)</span>
                                    }
                                    @if (!string.IsNullOrWhiteSpace(o.ParentName))
                                    {
                                        <span class="ms-2">· Parent: @o.ParentName</span>
                                    }
                                </div>

                                <!-- Add this details block here -->
                                <div class="small">
                                    <span class="text-muted">Country:</span> @(!string.IsNullOrWhiteSpace(o.Country) ? o.Country : "-")
                                    <span class="mx-2">·</span>
                                    <span class="text-muted">TaxId:</span> @(!string.IsNullOrWhiteSpace(o.TaxId) ? o.TaxId : "-")
                                    <span class="mx-2">·</span>
                                    <span class="text-muted">Created:</span> @(o.CreatedAt.HasValue ? o.CreatedAt.Value.ToString("yyyy-MM-dd") : "-")
                                </div>
                                <!-- end details block -->

                            </div>
                            <div class="text-nowrap">
                                @if (o.IsActive)
                                {
                                    <span class="badge bg-success">Active</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">Inactive</span>
                                }
                                @if (o.LicenseAgreementId is null)
                                {
                                    <span class="badge bg-warning text-dark ms-2">No License</span>
                                }
                            </div>
                        </div>
                    </button>
                }
            }
        </div>
    </div>
}

@code {
    private Vm _vm = new();

    protected override async Task OnInitializedAsync() => await LoadAllAsync();
    private async Task ReloadAsync() => await LoadAllAsync();

    private async Task LoadAllAsync()
    {
        _vm.IsLoading = true;
        _vm.Error = null;

        try
        {
            // ⬇️ NO FILTERS — load absolutely everything
            var list = await Orgs.SearchAsync(
            nameContains: null,
            type: null,               // was OrganizationType.Client — removed
            isActive: null,           // include active + inactive
            parentOrgId: null,
            domainContains: null);

            _vm.All = list.Select(x => new OrgItem
            {
                Id = x.Org.Id,
                Name = x.Org.Name,
                IsActive = x.Org.IsActive,
                ParentName = x.Org.Parent?.Name, // null-safe
                Domains = (x.Domains?.Select(d => d.Domain).ToArray()) ?? Array.Empty<string>(),
                Country    = x.Org.Country,
                TaxId      = x.Org.TaxId,
                CreatedAt  = x.Org.CreatedAt,
                LicenseAgreementId = x.Org.LicenseAgreementId
            })
            .OrderBy(o => o.Name)
            .ToList();

            _vm.ApplyFilter();
        }
        catch (Exception ex)
        {
            _vm.Error = ex.Message;
        }
        finally
        {
            _vm.IsLoading = false;
            StateHasChanged();
        }
    }

    private void OnQueryChanged(ChangeEventArgs e)
    {
        _vm.Query = e.Value?.ToString() ?? "";
        _vm.ApplyFilter();
    }

    private void OnActiveOnlyChanged(ChangeEventArgs e)
    {
        _vm.ActiveOnly = bool.TryParse(e.Value?.ToString(), out var b) && b;
        _vm.ApplyFilter();
    }

    private void ClearQuery()
    {
        _vm.Query = string.Empty;
        _vm.ApplyFilter();
    }

    private void Go(string id)
    {
        if (!string.IsNullOrWhiteSpace(id))
            Nav.NavigateTo($"/platform/organizations/{id}");
    }

    private void GoToNewOrgPage()
    {
        Nav.NavigateTo(uri: "/platform/organizations/create");
        return;
    }

    private sealed class Vm
    {
        public bool IsLoading { get; set; }
        public string? Error { get; set; }
        public string Query { get; set; } = "";
        public bool ActiveOnly { get; set; } = false; // ⬅️ default OFF so ALL show immediately

        public List<OrgItem> All { get; set; } = new();
        public List<OrgItem> Filtered { get; set; } = new();

        public void ApplyFilter()
        {
            var q = (Query ?? string.Empty).Trim();
            IEnumerable<OrgItem> items = All;

            if (ActiveOnly)
                items = items.Where(i => i.IsActive);

            if (!string.IsNullOrWhiteSpace(q))
            {
                items = items.Where(i =>
                (i.Name?.Contains(q, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (i.ParentName?.Contains(q, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (i.Country?.Contains(q, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (i.TaxId?.Contains(q, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (i.Domains?.Any(d => d.Contains(q, StringComparison.OrdinalIgnoreCase)) ?? false));
            }

            Filtered = items.Take(2000).ToList(); // light safety cap
        }
    }

    private sealed class OrgItem
    {
        public string Id { get; set; } = default!;
        public string Name { get; set; } = default!;
        public bool IsActive { get; set; }
        public string? ParentName { get; set; }
        public string[]? Domains { get; set; }
        public string? Country { get; set; }
        public string? TaxId { get; set; }
        public DateTime? CreatedAt { get; set; } // or DateTime if non-nullable in your model
        public string? LicenseAgreementId { get; set; }
    }
}
