@page "/platform/bookings/create-v3"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@inject NavigationManager Nav

<!-- CreateBookingRequestV3.razor -->

<div class="container mt-4">
    <!-- Header -->
    <div class="d-flex align-items-center justify-content-between">
        <div class="d-flex align-items-center gap-3">
            <div>
                <h2 class="h4 m-0">Flight Search</h2>
                @* <div class="small text-muted">Sharp. Simple. TMC-ready.</div> *@
            </div>
        </div>
        <div class="d-none d-md-flex align-items-center gap-2">
            <span class="border rounded-pill px-2 py-1 small"><i class="bi bi-shield-check me-1"></i>Policy aware</span>
            <span class="border rounded-pill px-2 py-1 small"><i class="bi bi-lightning-charge me-1"></i>Fast lookup</span>
        </div>
    </div>

    <EditForm class="mt-3" Model="@Vm" OnValidSubmit="@OnSearch">
        <DataAnnotationsValidator />
        <ValidationSummary class="alert alert-danger" />

        <div class="card shadow-sm">
            <div class="card-body p-3 p-lg-4">
                <!-- Trip type -->
                <div class="mb-3">
                    <div class="btn-group" role="group" aria-label="Trip type">
                        <input type="radio" class="btn-check" name="tripType" id="tripOne"
                               checked="@(Vm.TripType == TripType.OneWay)" @onchange="() => SetTripType(TripType.OneWay)" />
                        <label class="btn btn-outline-primary" for="tripOne">One-Way</label>

                        <input type="radio" class="btn-check" name="tripType" id="tripReturn"
                               checked="@(Vm.TripType == TripType.Return)" @onchange="() => SetTripType(TripType.Return)" />
                        <label class="btn btn-outline-primary" for="tripReturn">Return</label>
                    </div>
                </div>

                <!-- From / To / Dates / Pax -->
                <div class="row g-3">
                    <!-- FROM -->
                    <div class="col-12 col-lg-3">
                        <label class="form-label">From</label>
                        <div class="position-relative">
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-geo-alt"></i></span>
                                <input class="form-control"
                                       placeholder="Type code or name"
                                       @bind="OriginQuery"
                                       @bind:event="oninput"
                                       @onfocus="() => ShowOriginList = true"
                                       @onkeydown="OnOriginKeyDown"
                                       @onblur="HideOriginListDeferred" />
                            </div>
                            <div class="dropdown-menu w-100 shadow-sm @(ShowOriginList && FilteredOrigins.Count > 0 ? "show" : "")" style="max-height:260px;overflow:auto;">
                                @foreach (var ap in FilteredOrigins)
                                {
                                    <button type="button" class="dropdown-item d-flex justify-content-between align-items-center"
                                            @onclick="() => PickOrigin(ap)">
                                        <span><span class="badge text-bg-secondary me-2">@ap.Code</span>@ap.Name</span>
                                        @if (Vm.Origin == ap.Code) { <span class="text-muted small">selected</span> }
                                    </button>
                                }
                            </div>
                        </div>
                        <ValidationMessage For="() => Vm.Origin" />
                    </div>

                    <!-- TO -->
                    <div class="col-12 col-lg-3">
                        <label class="form-label">To</label>
                        <div class="position-relative">
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-geo"></i></span>
                                <input class="form-control"
                                       placeholder="Type code or name"
                                       @bind="DestinationQuery"
                                       @bind:event="oninput"
                                       @onfocus="() => ShowDestinationList = true"
                                       @onkeydown="OnDestinationKeyDown"
                                       @onblur="HideDestinationListDeferred" />
                            </div>
                            <div class="dropdown-menu w-100 shadow-sm @(ShowDestinationList && FilteredDestinations.Count > 0 ? "show" : "")" style="max-height:260px;overflow:auto;">
                                @foreach (var ap in FilteredDestinations)
                                {
                                    <button type="button" class="dropdown-item d-flex justify-content-between align-items-center"
                                            @onclick="() => PickDestination(ap)">
                                        <span><span class="badge text-bg-secondary me-2">@ap.Code</span>@ap.Name</span>
                                        @if (Vm.Destination == ap.Code) { <span class="text-muted small">selected</span> }
                                    </button>
                                }
                            </div>
                        </div>
                        <ValidationMessage For="() => Vm.Destination" />
                    </div>

                    <!-- DEPART -->
                    <div class="col-6 col-lg-2">
                        <label class="form-label">Depart</label>
                        <InputDate TValue="DateOnly" class="form-control" @bind-Value="Vm.DepartDate" />
                        @* <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-calendar2"></i></span>
                            <InputDate TValue="DateOnly" class="form-control" @bind-Value="Vm.DepartDate" />
                        </div> *@
                        <ValidationMessage For="() => Vm.DepartDate" />
                    </div>

                    <!-- RETURN -->
                    <div class="col-6 col-lg-2">
                        <label class="form-label">Return</label>
                        <InputDate TValue="DateOnly?" class="form-control" @bind-Value="Vm.ReturnDate" disabled="@(Vm.TripType != TripType.Return)" />
                        @* <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-calendar2"></i></span>
                            <InputDate TValue="DateOnly?" class="form-control" @bind-Value="Vm.ReturnDate" disabled="@(Vm.TripType != TripType.Return)" />
                        </div> *@
                        @* @if (Vm.TripType != TripType.Return)
                        {
                            <div class="form-text">Disabled for One-Way.</div>
                        } *@
                    </div>

                    <!-- PAX -->
                    <div class="col-6 col-lg-2">
                        <label class="form-label">Pax</label>
                        <InputNumber class="form-control" @bind-Value="Vm.Pax" Min="1" />
                        <ValidationMessage For="() => Vm.Pax" />
                    </div>
                </div>

                <!-- Pills summary -->
                <div class="d-flex flex-wrap gap-2 mt-3">
                    <span class="badge rounded-pill text-bg-secondary">@Vm.TripType</span>
                    <span class="badge rounded-pill text-bg-secondary">@Vm.Cabin</span>
                    @if (Vm.RefundableOnly) { <span class="badge rounded-pill text-bg-success">Refundable</span>; }
                    @if (Vm.IncludeBaggage) { <span class="badge rounded-pill text-bg-info">Baggage</span>; }
                </div>

                <!-- Advanced filters -->
                <div class="accordion mt-3" id="advFilters">
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="advHeading">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#advCollapse"
                                    aria-expanded="false" aria-controls="advCollapse">
                                Advanced filters
                            </button>
                        </h2>
                        <div id="advCollapse" class="accordion-collapse collapse" aria-labelledby="advHeading" data-bs-parent="#advFilters">
                            <div class="accordion-body">
                                <div class="row g-3">
                                    <!-- Airlines (checkboxes) -->
                                    <div class="col-12 col-md-6">
                                        @* <label class="form-label">Airlines</label> *@
                                        <label class="form-label fw-semibold text-body-emphasis">Airlines</label>
                                        @foreach (var a in Airlines)
                                        {
                                            var id = $"air_{a.Code}";
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" id="@id" checked="@Vm.SelectedAirlines.Contains(a.Code)"
                                                       @onchange="e => ToggleAirline(a.Code, (bool?)e.Value == true)" />
                                                <label class="form-check-label" for="@id">@a.Name (@a.Code)</label>
                                            </div>
                                        }
                                        <div class="form-text">Leave blank for all airlines.</div>
                                    </div>

                                    <!-- Stops (multi-select checkboxes) -->
                                    <div class="col-12 col-md-6">
                                        <label class="form-label">Stops</label>
                                        @foreach (var s in StopsOptions)
                                        {
                                            var id = $"st_{s.Value}";
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" id="@id" checked="@Vm.SelectedStops.Contains(s.Value)"
                                                       @onchange="e => ToggleStop(s.Value, (bool?)e.Value == true)" />
                                                <label class="form-check-label" for="@id">@s.Label</label>
                                            </div>
                                        }
                                        <div class="form-text">Select any that apply. None = any stops.</div>
                                    </div>

                                    <!-- Check options -->
                                    <div class="col-12 col-md-6">
                                        <div class="form-check">
                                            <InputCheckbox class="form-check-input" @bind-Value="Vm.RefundableOnly" id="chkRefund" />
                                            <label class="form-check-label" for="chkRefund">Refundable only</label>
                                        </div>
                                        <div class="form-check">
                                            <InputCheckbox class="form-check-input" @bind-Value="Vm.IncludeBaggage" id="chkBaggage" />
                                            <label class="form-check-label" for="chkBaggage">Include checked baggage</label>
                                        </div>
                                    </div>

                                    <!-- Flight time window -->
                                    <div class="col-12 col-md-6">
                                        <label class="form-label">Departure time window (local)</label>
                                        <div class="input-group">
                                            <InputText class="form-control" type="time"
                                                       Value="@EarliestDepartLocalStr"
                                                       ValueChanged="@(v => EarliestDepartLocalStr = v)"
                                                       ValueExpression="() => EarliestDepartLocalStr" />
                                            <span class="input-group-text">to</span>
                                            <InputText class="form-control" type="time"
                                                       Value="@LatestDepartLocalStr"
                                                       ValueChanged="@(v => LatestDepartLocalStr = v)"
                                                       ValueExpression="() => LatestDepartLocalStr" />
                                        </div>
                                        <div class="form-text">24-hour HH:mm. Optional.</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- CTA -->
                <div class="d-grid d-sm-flex gap-2 mt-3">
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-search me-1"></i>Search
                    </button>
                    <button type="button" class="btn btn-outline-secondary" @onclick="ResetAll">Reset</button>
                </div>
            </div>
        </div>
    </EditForm>
</div>

@code {
    // ===== ViewModel =====
    public class BookingSearchVm
    {
        [Required, MinLength(2)]
        public string? Origin { get; set; }           // stores airport CODE
        [Required, MinLength(2)]
        public string? Destination { get; set; }      // stores airport CODE

        [Required]
        public DateOnly DepartDate { get; set; } = DateOnly.FromDateTime(DateTime.Today.AddDays(1));
        public DateOnly? ReturnDate { get; set; }

        [Range(1, 9)]
        public int Pax { get; set; } = 1;

        public TripType TripType { get; set; } = TripType.OneWay;
        public CabinClass Cabin { get; set; } = CabinClass.Economy;

        // Filters
        public HashSet<string> SelectedAirlines { get; } = new(StringComparer.OrdinalIgnoreCase);
        public HashSet<int> SelectedStops { get; } = new(); // 0=Nonstop,1,2,3,4=3+ stops
        public bool RefundableOnly { get; set; }
        public bool IncludeBaggage { get; set; }

        public TimeOnly? EarliestDepartLocal { get; set; }
        public TimeOnly? LatestDepartLocal { get; set; }
    }

    public enum TripType { OneWay, Return }
    public enum CabinClass { Economy, PremiumEconomy, Business, First }

    public record Airport(string Code, string Name);
    public record Airline(string Code, string Name);
    public record StopOption(int Value, string Label);

    private BookingSearchVm Vm = new();

    // ===== Typeahead state =====
    private string? OriginQuery { get => _originQuery; set { _originQuery = value; FilterOrigin(); } }
    private string? DestinationQuery { get => _destinationQuery; set { _destinationQuery = value; FilterDestination(); } }
    private string? _originQuery;
    private string? _destinationQuery;

    private bool ShowOriginList { get; set; }
    private bool ShowDestinationList { get; set; }
    private List<Airport> FilteredOrigins { get; set; } = new();
    private List<Airport> FilteredDestinations { get; set; } = new();

    // ===== Catalogs =====
    private readonly List<Airport> Airports = new()
    {
        new("SYD","Sydney Kingsford Smith"),
        new("MEL","Melbourne Tullamarine"),
        new("BNE","Brisbane"),
        new("ADL","Adelaide"),
        new("PER","Perth"),
        new("CBR","Canberra"),
        new("AKL","Auckland"),
        new("CHC","Christchurch"),
        new("WLG","Wellington"),
        new("SIN","Singapore Changi"),
        new("LAX","Los Angeles"),
        new("NRT","Tokyo Narita"),
        new("LHR","London Heathrow"),
        new("JFK","New York JFK"),
    };

    private readonly List<Airline> Airlines = new()
    {
        new("QF","Qantas"),
        new("JQ","Jetstar"),
        new("VA","Virgin Australia"),
        new("NZ","Air New Zealand"),
        new("SQ","Singapore Airlines"),
        new("BA","British Airways")
    };

    private readonly List<StopOption> StopsOptions = new()
    {
        new(0, "Non-Stop"),
        new(1, "1 Stop"),
        new(2, "2 Stops"),
        new(0, "3+ Stops"),
    };

    // ===== Time proxies for <InputText type=time> =====
    private string? EarliestDepartLocalStr
    {
        get => Vm.EarliestDepartLocal?.ToString("HH\\:mm", CultureInfo.InvariantCulture);
        set
        {
            if (string.IsNullOrWhiteSpace(value)) { Vm.EarliestDepartLocal = null; return; }
            if (TimeOnly.TryParseExact(value, "HH\\:mm", CultureInfo.InvariantCulture, DateTimeStyles.None, out var t))
                Vm.EarliestDepartLocal = t;
        }
    }
    private string? LatestDepartLocalStr
    {
        get => Vm.LatestDepartLocal?.ToString("HH\\:mm", CultureInfo.InvariantCulture);
        set
        {
            if (string.IsNullOrWhiteSpace(value)) { Vm.LatestDepartLocal = null; return; }
            if (TimeOnly.TryParseExact(value, "HH\\:mm", CultureInfo.InvariantCulture, DateTimeStyles.None, out var t))
                Vm.LatestDepartLocal = t;
        }
    }

    // ===== Typeahead logic =====
    private void FilterOrigin()
    {
        var q = (OriginQuery ?? string.Empty).Trim();
        ShowOriginList = true;
        FilteredOrigins = FilterAirports(q);
    }
    private void FilterDestination()
    {
        var q = (DestinationQuery ?? string.Empty).Trim();
        ShowDestinationList = true;
        FilteredDestinations = FilterAirports(q);
    }
    private List<Airport> FilterAirports(string q)
    {
        if (string.IsNullOrWhiteSpace(q))
            return Airports.Take(12).ToList();

        return Airports
            .Where(a =>
                a.Code.Contains(q, StringComparison.OrdinalIgnoreCase) ||
                a.Name.Contains(q, StringComparison.OrdinalIgnoreCase))
            .OrderByDescending(a => a.Code.StartsWith(q, StringComparison.OrdinalIgnoreCase) || a.Name.StartsWith(q, StringComparison.OrdinalIgnoreCase))
            .ThenBy(a => a.Code)
            .Take(12)
            .ToList();
    }
    private void PickOrigin(Airport ap)
    {
        Vm.Origin = ap.Code;
        OriginQuery = $"{ap.Code} — @ap.Name".Replace("@ap.Name", ap.Name);
        ShowOriginList = false;
    }
    private void PickDestination(Airport ap)
    {
        Vm.Destination = ap.Code;
        DestinationQuery = $"{ap.Code} — @ap.Name".Replace("@ap.Name", ap.Name);
        ShowDestinationList = false;
    }
    private async Task HideOriginListDeferred() { await Task.Delay(150); ShowOriginList = false; StateHasChanged(); }
    private async Task HideDestinationListDeferred() { await Task.Delay(150); ShowDestinationList = false; StateHasChanged(); }
    private void OnOriginKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && FilteredOrigins.Count > 0) { PickOrigin(FilteredOrigins[0]); }
        else if (e.Key == "Escape") { ShowOriginList = false; }
    }
    private void OnDestinationKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && FilteredDestinations.Count > 0) { PickDestination(FilteredDestinations[0]); }
        else if (e.Key == "Escape") { ShowDestinationList = false; }
    }

    // ===== Interaction =====
    private void SetTripType(TripType t)
    {
        Vm.TripType = t;
        if (t != TripType.Return) Vm.ReturnDate = null;
    }

    private void ToggleAirline(string code, bool on)
    {
        if (on) Vm.SelectedAirlines.Add(code);
        else Vm.SelectedAirlines.Remove(code);
    }

    private void ToggleStop(int value, bool on)
    {
        if (on) Vm.SelectedStops.Add(value);
        else Vm.SelectedStops.Remove(value);
    }

    private void ResetAll()
    {
        Vm = new BookingSearchVm();
        OriginQuery = null;
        DestinationQuery = null;
        FilteredOrigins.Clear();
        FilteredDestinations.Clear();
    }

    private void OnSearch()
    {
        // Build query and navigate to a results page your API will serve.
        var query = new Dictionary<string, object?>()
        {
            ["from"] = Vm.Origin,
            ["to"] = Vm.Destination,
            ["depart"] = Vm.DepartDate.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture),
            ["return"] = Vm.ReturnDate?.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture),
            ["trip"] = Vm.TripType.ToString(),
            ["pax"] = Vm.Pax,
            ["cabin"] = Vm.Cabin.ToString(),
            ["refund"] = Vm.RefundableOnly ? "1" : null,
            ["baggage"] = Vm.IncludeBaggage ? "1" : null,
            ["air"] = Vm.SelectedAirlines.Count > 0 ? string.Join(",", Vm.SelectedAirlines) : null,
            ["stops"] = Vm.SelectedStops.Count > 0 ? string.Join(",", Vm.SelectedStops.OrderBy(x => x)) : null,
            ["tstart"] = Vm.EarliestDepartLocal?.ToString("HH\\:mm"),
            ["tend"] = Vm.LatestDepartLocal?.ToString("HH\\:mm")
        };

        var uri = Nav.GetUriWithQueryParameters("/platform/bookings/results", query!);
        Nav.NavigateTo(uri);
    }
}
