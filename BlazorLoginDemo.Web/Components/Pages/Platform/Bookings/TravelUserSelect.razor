@page "/platform/pnr/create/{bookingType}"
@rendermode InteractiveServer
@using BlazorLoginDemo.Shared.Services.Interfaces.Platform
@using BlazorLoginDemo.Shared.Models.Kernel.Platform
@using Microsoft.AspNetCore.Components.Authorization
@using BlazorLoginDemo.Shared.Models.Static.Platform
@using System.Text.Json;

@attribute [Authorize(Policy = "Shared:BookingSelect")]

@inject IAdminOrgServiceUnified OrgSvc
@inject IAdminUserServiceUnified UserSvc
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthStateProvider

@if (Unauthorized)
{
    <div class="alert alert-danger">You are not authorized to access this page.</div>
}
else
{

    @if (IsSudo)
    {
        <div class="alert alert-info">
            You are logged in as <strong>Sudo</strong>. You can select any Vendor, TMC, Client and User.
        </div>
    }
    else if (IsPlatformUser)
    {
        <div class="alert alert-info">
            You are logged in as a <strong>Platform User</strong>. The Vendor is pre-selected. You can select any TMC, Client and User under this Vendor.
        </div>
    }
    else
    {
        <div class="alert alert-info">
            You are logged in as a <strong>TMC User</strong>. The TMC is pre-selected. You can select any Client and User under this TMC.
        </div>
    }

    <div class="container py-4">
        <div class="row justify-content-center">
            <div class="col-xl-8 col-lg-9">

                @if (IsSudo)
                {
                    <div class="card shadow-sm mb-4">
                        <div class="card-header"><strong>Select Vendor</strong></div>
                        <div class="card-body">
                            <dl class="row mb-0">
                                <div class="input-group">
                                    <select class="form-select" @bind="SelectedVendorId" disabled="@VendorLocked">
                                        <option value="">-- choose --</option>
                                        @foreach (var v in Vendors)
                                        {
                                            <option value="@v.Id">@v.Name</option>
                                        }
                                    </select>
                                    <button class="btn btn-outline-primary" type="button" @onclick="ConfirmVendor" disabled="@VendorLocked">Set</button>
                                </div>
                            </dl>
                        </div>
                    </div>
                }
                @if (!string.IsNullOrEmpty(SelectedVendorId) && VendorLocked)
                {
                    <div class="card shadow-sm mb-4">
                        <div class="card-header"><strong>Select TMC</strong></div>
                        <div class="card-body">
                            <dl class="row mb-0">
                                <div class="input-group">
                                    <select class="form-select" @bind="SelectedTmcId" disabled="@TmcLocked">
                                        <option value="">-- choose --</option>
                                        @foreach (var t in Tmcs)
                                        {
                                            <option value="@t.Id">@t.Name</option>
                                        }
                                    </select>
                                    <button class="btn btn-outline-primary" type="button" @onclick="ConfirmTmc" disabled="@TmcLocked">Set</button>
                                </div>
                            </dl>
                        </div>
                    </div>
                }
                @if (!string.IsNullOrEmpty(SelectedTmcId) && TmcLocked)
                {
                    <div class="card shadow-sm mb-4">
                        <div class="card-header"><strong>Select Client</strong></div>
                        <div class="card-body">
                            <dl class="row mb-0">
                                <div class="input-group">
                                    <select class="form-select" @bind="SelectedClientId" disabled="@ClientLocked">
                                        <option value="">-- choose --</option>
                                        @foreach (var c in Clients)
                                        {
                                            <option value="@c.Id">@c.Name</option>
                                        }
                                    </select>
                                    <button class="btn btn-outline-primary" type="button" @onclick="ConfirmClient" disabled="@ClientLocked">Set</button>
                                </div>
                            </dl>
                        </div>
                    </div>
                }
                @if (Users.Any() && ClientLocked)
                {
                    <div class="card shadow-sm mb-4">
                        <div class="card-header">
                            <strong>Available Users</strong>
                        </div>
                        <div class="card-body">
                            <ul class="list-group">
                                @foreach (var u in Users)
                                {
                                    <li class="list-group-item d-flex align-items-center">
                                        <input type="checkbox" class="form-check-input me-2"
                                            value="@u.UserId"
                                            @onchange="@((ChangeEventArgs e) => ToggleUserSelection(u.UserId, (bool)e.Value!))" />
                                        <span>@u.User.DisplayName (@u.User.Email)</span>
                                    </li>
                                }
                            </ul>

                            <button class="btn btn-primary mt-3" @onclick="CreateQuoteAsync">Continue</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string? bookingType { get; set; }

    bool Unauthorized;
    bool IsSudo;
    bool IsPlatformUser;

    private static readonly HashSet<string> AllowedBookingTypes = new(StringComparer.OrdinalIgnoreCase)
    {
        "flight", "accomodation", "taxi", "train", "hirecar", "bus", "simcard", "activity", "mixed"
    };

    List<IAdminOrgServiceUnified.OrganizationPickerDto> Vendors = new();
    List<IAdminOrgServiceUnified.OrganizationPickerDto> Tmcs = new();
    List<IAdminOrgServiceUnified.OrganizationPickerDto> Clients = new();
    List<IAdminUserServiceUnified.UserAggregate> Users = new();

    string? SelectedVendorId;
    string? SelectedTmcId;
    string? SelectedClientId;

    bool VendorLocked;
    bool TmcLocked;
    bool ClientLocked;

    HashSet<string> SelectedUserIds = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!(user.IsInRole("Sudo") ||
              user.IsInRole("Platform.SuperAdmin") ||
              user.IsInRole("Platform.SuperUser") ||
              user.IsInRole("Platform.Admin") ||
              user.IsInRole("Platform.Support.Admin") ||
              user.IsInRole("Platform.Support.Agent") ||
              user.IsInRole("Tmc.Admin") ||
              user.IsInRole("Tmc.BookingsManager") ||
              user.IsInRole("Tmc.TravelAgent")))
        {
            Unauthorized = true;
            return;
        }

        var orgId = user.FindFirst("OrganizationId")?.Value
                    ?? user.FindFirst("organizationId")?.Value
                    ?? user.FindFirst("org")?.Value;

        IsSudo = user.IsInRole("Sudo");
        IsPlatformUser = user.IsInRole("Platform.SuperAdmin") ||
                         user.IsInRole("Platform.SuperUser") ||
                         user.IsInRole("Platform.Admin") ||
                         user.IsInRole("Platform.Support.Admin") ||
                         user.IsInRole("Platform.Support.Agent");

        if (IsSudo)
        {
            Vendors = (await OrgSvc.SearchAsync(type: OrganizationType.Vendor))
                      .Select(a => new IAdminOrgServiceUnified.OrganizationPickerDto
                      {
                          Id = a.Org.Id,
                          Name = a.Org.Name,
                          Type = a.Org.Type,
                          IsActive = a.Org.IsActive
                      }).ToList();
        }
        else if (IsPlatformUser)
        {
            SelectedVendorId = orgId;
            VendorLocked = true;
            await LoadTmcs();
        }
        else if (user.IsInRole("Tmc.Admin") || user.IsInRole("Tmc.BookingsManager") || user.IsInRole("Tmc.TravelAgent"))
        {
            SelectedTmcId = orgId;
            TmcLocked = true;
            await LoadClients();
        }
        else
        {
            SelectedClientId = orgId;
            ClientLocked = true;
            await LoadUsers();
        }

        // bookingType not present
        if (string.IsNullOrWhiteSpace(bookingType))
        {
            Nav.NavigateTo(uri: "/booking/select", forceLoad: true);
            return;
        }

        // invalid booking type
        if (!AllowedBookingTypes.Contains(bookingType))
        {
            Nav.NavigateTo(uri: "/booking/select", forceLoad: true);
            return;
        }

        // bookingType is valid â†’ store
    }

    async Task ConfirmVendor()
    {
        if (string.IsNullOrEmpty(SelectedVendorId)) return;
        VendorLocked = true;
        await LoadTmcs();
    }

    async Task ConfirmTmc()
    {
        if (string.IsNullOrEmpty(SelectedTmcId)) return;
        TmcLocked = true;
        await LoadClients();
    }

    async Task ConfirmClient()
    {
        if (string.IsNullOrEmpty(SelectedClientId)) return;
        ClientLocked = true;
        await LoadUsers();
    }

    async Task LoadTmcs()
    {
        Tmcs = (await OrgSvc.SearchAsync(type: OrganizationType.Tmc, parentOrgId: SelectedVendorId))
               .Select(a => new IAdminOrgServiceUnified.OrganizationPickerDto
               {
                   Id = a.Org.Id,
                   Name = a.Org.Name,
                   Type = a.Org.Type,
                   IsActive = a.Org.IsActive
               }).ToList();
    }

    async Task LoadClients()
    {
        Clients = (await OrgSvc.SearchAsync(type: OrganizationType.Client, parentOrgId: SelectedTmcId))
                  .Select(a => new IAdminOrgServiceUnified.OrganizationPickerDto
                  {
                      Id = a.Org.Id,
                      Name = a.Org.Name,
                      Type = a.Org.Type,
                      IsActive = a.Org.IsActive
                  }).ToList();
    }

    async Task LoadUsers()
    {
        Users = (await UserSvc.SearchAsync(organizationId: SelectedClientId)).ToList();
    }

    void ToggleUserSelection(string userId, bool selected)
    {
        if (selected) SelectedUserIds.Add(userId);
        else SelectedUserIds.Remove(userId);
    }

    async Task CreateQuoteAsync()
    {
        if (string.IsNullOrEmpty(SelectedClientId) || SelectedUserIds.Count == 0)
            return;

        @* var quoteId = await Api.CreateTravelQuoteAsync(SelectedClientId, SelectedUserIds.ToList());
        Nav.NavigateTo($"/flightsearch/{quoteId}"); *@

        // Temporary: write selected user IDs to a temp file for the PNR creation page to read
        // docker exec blazor sh -c "mkdir -p /tmp/tmp-data && chmod 777 /tmp/tmp-data"
        var userIdList = SelectedUserIds.ToList();
        await File.WriteAllLinesAsync(path: $"/tmp/tmp-data/{bookingType}.txt", userIdList);
    }
}
