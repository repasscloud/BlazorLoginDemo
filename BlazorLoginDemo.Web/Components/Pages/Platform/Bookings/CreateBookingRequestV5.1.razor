@page "/platform/pnr/create2/{TravelQuoteId?}"
@rendermode InteractiveServer

@using BlazorLoginDemo.Shared.Models.Static.SysVar
@using BlazorLoginDemo.Shared.Services.Interfaces.Kernel
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using BlazorLoginDemo.Shared.Models.Search
@using System.Text.Json
@using System.Text.Json.Serialization

@inject NavigationManager Nav
@inject IHttpClientFactory HttpClientFactory
@inject ILoggerService _log

<!-- CreateBookingRequestV5 (unified style) -->

@if (_pageIsLoading == true)
{
    <div class="loading-overlay" role="status" aria-live="polite" aria-label="Loading">
        <div class="loading-wrap">
            <svg class="plane" viewBox="0 0 128 128" width="84" height="84" aria-hidden="true">
                <!-- simple plane icon -->
                <g fill="currentColor">
                    <path d="M8 64h52l40-22c5-3 10 2 7 7l-22 40v28l-12-12-12 12v-28L8 64z"/>
                </g>
            </svg>
            <div class="loading-text">Loadingâ€¦</div>
        </div>

        <!-- subtle clouds -->
        <div class="cloud cloud-1"></div>
        <div class="cloud cloud-2"></div>
        <div class="cloud cloud-3"></div>
    </div>
}
else
{
<div class="container mt-4">
    <!-- Header -->
    <div class="d-flex align-items-center justify-content-between">
        <div class="d-flex align-items-center gap-3">
            <div>
                <h2 class="h4 m-0">Flight Search</h2>
                <small class="text-muted">Build a request then run Search.</small>
            </div>
        </div>
        <div class="d-flex align-items-center gap-2">
            <button class="btn btn-outline-secondary" @onclick="ResetAll" title="Reset">
                <i class="bi bi-arrow-counterclockwise"></i> Reset
            </button>
            <button class="btn btn-primary" @onclick="SubmitSearch" disabled="@(!IsFormValid)">
                <i class="bi bi-search"></i> Search
            </button>
        </div>
    </div>

    <hr class="my-3" />

    <!-- Top meta row -->
    <div class="row g-3 mb-3">
        <div class="col-auto">
            <span class="badge text-bg-light text-secondary">Quote</span>
            <span class="ms-2 fw-medium">@DisplayQuoteId</span>
        </div>
        <div class="col-auto">
            <span class="badge text-bg-light text-secondary">Tenant</span>
            <span class="ms-2 text-muted">@Config.TenantName</span>
        </div>
        <div class="col-auto">
            <span class="badge text-bg-light text-secondary">Policy</span>
            <span class="ms-2 text-muted">@Config.PolicyName</span>
        </div>
    </div>

    <div class="row g-3">
        <div class="col-12 col-xl-9">
            <div class="card shadow-sm">
                <div class="card-body p-3 p-lg-4">

                    <!-- Trip type -->
                    <div class="mb-3">
                        @* <label class="form-label fw-semibold text-body-emphasis">Trip</label> *@
                        <div class="btn-group" role="group" aria-label="Trip type">
                            @foreach (var t in Enum.GetValues<TripType>())
                            {
                                string id = $"trip_{t}";
                                bool isChecked = Vm.Trip == t;
                                <input type="radio" class="btn-check" name="trip" id="@id" checked="@isChecked"
                                       @onchange="() => SetTripType(t)" />
                                <label class="btn btn-outline-primary" for="@id">@TripLabel(t)</label>
                            }
                        </div>
                    </div>

                    <!-- From / To / Dates / Pax -->
                    <div class="row g-3">
                        <!-- FROM -->
                        <div class="col-12 col-lg-6">
                            <label class="form-label fw-semibold text-body-emphasis">From</label>
                            <div class="dropdown w-100">
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-airplane"></i></span>
                                    <!-- FROM input -->
                                    <input class="form-control"
                                           placeholder="Type code or name"
                                           @bind="OriginQuery"
                                           @bind:event="oninput"
                                           @onfocus="() => { OriginFocused = true; }"
                                           @onkeydown="OnOriginKeyDown"
                                           @onblur="HideOriginListDeferred" />
                                </div>
                                <div class="dropdown-menu w-100 shadow-sm @((ShowOriginList && FilteredOrigins.Count > 0) ? "show" : "")"
                                     style="max-height:260px;overflow:auto;">
                                    @foreach (var ap in FilteredOrigins)
                                    {
                                        <button type="button"
                                                class="dropdown-item d-flex justify-content-between align-items-center"
                                                @onclick="() => PickOrigin(ap)">
                                            <span>
                                                <span class="badge text-bg-secondary me-2">@ap.Code</span>@ap.NameFormatted
                                            </span>
                                            @if (Vm.Origin == ap.Code)
                                            {
                                                <span class="text-muted small"><i class="bi bi-check2"></i></span>
                                            }
                                        </button>
                                    }
                                </div>
                            </div>
                            <div class="form-text">Airport list limited to policy-enabled origins.</div>
                        </div>

                        <!-- TO -->
                        <div class="col-12 col-lg-6">
                            <label class="form-label fw-semibold text-body-emphasis">To</label>
                            <div class="dropdown w-100">
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-geo-alt"></i></span>
                                    <!-- TO input -->
                                    <input class="form-control"
                                           placeholder="Type code or name"
                                           @bind="DestinationQuery"
                                           @bind:event="oninput"
                                           @onfocus="() => { DestinationFocused = true; }"
                                           @onkeydown="OnDestinationKeyDown"
                                           @onblur="HideDestinationListDeferred" />
                                </div>
                                <div class="dropdown-menu w-100 shadow-sm @((ShowDestinationList && FilteredDestinations.Count > 0) ? "show" : "")"
                                     style="max-height:260px;overflow:auto;">
                                    @foreach (var ap in FilteredDestinations)
                                    {
                                        <button type="button"
                                                class="dropdown-item d-flex justify-content-between align-items-center"
                                                @onclick="() => PickDestination(ap)">
                                            <span>
                                                <span class="badge text-bg-secondary me-2">@ap.Code</span>@ap.NameFormatted
                                            </span>
                                            @if (Vm.Destination == ap.Code)
                                            {
                                                <span class="text-muted small"><i class="bi bi-check2"></i></span>
                                            }
                                        </button>
                                    }
                                </div>
                            </div>
                            <div class="form-text">Airport list limited to policy-enabled destinations.</div>
                        </div>

                        <!-- DATES -->
                        <div class="col-12 col-md-6 col-xxl-3">
                            <label class="form-label fw-semibold text-body-emphasis">Depart</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-calendar-event"></i></span>
                                <input type="date" class="form-control"
                                       value="@BindDate(Vm.DepartDate)"
                                       min="@DepartMinAttr"
                                       @oninput="e => { Vm.DepartDate = ParseDate(e.Value?.ToString()); ValidateDates(); }"
                                       @onchange="e => { Vm.DepartDate = ParseDate(e.Value?.ToString()); ValidateDates(); }" />
                            </div>
                            @if (!string.IsNullOrEmpty(DepartError))
                            {
                                <div class="form-text text-danger">@DepartError</div>
                            }
                        </div>

                        <div class="col-12 col-md-6 col-xxl-3">
                            <label class="form-label fw-semibold text-body-emphasis">Return</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-calendar-event"></i></span>
                                <input type="date" class="form-control"
                                       value="@BindDate(Vm.ReturnDate)"
                                       min="@ReturnMinAttr"
                                       disabled="@(Vm.Trip == TripType.OneWay)"
                                       @oninput="e => { Vm.ReturnDate = ParseDate(e.Value?.ToString()); ValidateDates(); }"
                                       @onchange="e => { Vm.ReturnDate = ParseDate(e.Value?.ToString()); ValidateDates(); }" />
                            </div>
                            @if (!string.IsNullOrEmpty(ReturnError))
                            {
                                <div class="form-text text-danger">@ReturnError</div>
                            }
                        </div>




                        <!-- Pax -->
                        <div class="col-12 col-md-6 col-xxl-3">
                            <label class="form-label fw-semibold text-body-emphasis">Passengers</label>
                            <div class="input-group">
                                <button class="btn btn-outline-secondary" type="button" @onclick="() => AdjustAdults(-1)" disabled="@(Vm.Adults <= 1)"><i class="bi bi-dash"></i></button>
                                <span class="input-group-text">Adults</span>
                                <input type="number" class="form-control text-center" min="1" max="9" value="@Vm.Adults"
                                       @onchange="e => Vm.Adults = CoerceInt(e.Value, 1, 9)" />
                                <button class="btn btn-outline-secondary" type="button" @onclick="() => AdjustAdults(1)" disabled="@(Vm.Adults >= 9)"><i class="bi bi-plus"></i></button>
                            </div>
                            <div class="form-text">Ages 12+.</div>
                        </div>
                        <div class="col-12 col-md-6 col-xxl-3">
                            <label class="form-label fw-semibold text-body-emphasis">Children</label>
                            <div class="input-group">
                                <button class="btn btn-outline-secondary" type="button" @onclick="() => AdjustChildren(-1)" disabled="@(Vm.Children <= 0)"><i class="bi bi-dash"></i></button>
                                <span class="input-group-text">0â€“11</span>
                                <input type="number" class="form-control text-center" min="0" max="9" value="@Vm.Children"
                                       @onchange="e => Vm.Children = CoerceInt(e.Value, 0, 9)" />
                                <button class="btn btn-outline-secondary" type="button" @onclick="() => AdjustChildren(1)" disabled="@(Vm.Children >= 9)"><i class="bi bi-plus"></i></button>
                            </div>
                        </div>
                    </div>

                    <hr class="my-4" />

                    <!-- Timing and cabin -->
                    <div class="row g-3">
                        <!-- Time windows -->
                        <div class="col-12 col-lg-6">
                            <label class="form-label fw-semibold text-body-emphasis">Time preferences</label>
                            <div class="row g-2">
                                <div class="col-6">
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="bi bi-clock"></i></span>
                                        <input type="time" class="form-control"
                                               value="@Vm.DepartEarliest"
                                               @onchange="e => Vm.DepartEarliest = e.Value?.ToString() ?? string.Empty"
                                               readonly="@Config.HasFixedTimes" />
                                    </div>
                                    <div class="form-text">Earliest depart</div>
                                </div>
                                <div class="col-6">
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="bi bi-clock-history"></i></span>
                                        <input type="time" class="form-control"
                                               value="@Vm.DepartLatest"
                                               @onchange="e => Vm.DepartLatest = e.Value?.ToString() ?? string.Empty"
                                               readonly="@Config.HasFixedTimes" />
                                    </div>
                                    <div class="form-text">Latest depart</div>
                                </div>
                                @if (Vm.Trip == TripType.Return)
                                {
                                    <div class="col-6">
                                        <div class="input-group">
                                            <span class="input-group-text"><i class="bi bi-clock"></i></span>
                                            <input type="time" class="form-control"
                                                   value="@Vm.ReturnEarliest"
                                                   @onchange="e => Vm.ReturnEarliest = e.Value?.ToString() ?? string.Empty"
                                                   readonly="@Config.HasFixedTimes" />
                                        </div>
                                        <div class="form-text">Earliest return</div>
                                    </div>
                                    <div class="col-6">
                                        <div class="input-group">
                                            <span class="input-group-text"><i class="bi bi-clock-history"></i></span>
                                            <input type="time" class="form-control"
                                                   value="@Vm.ReturnLatest"
                                                   @onchange="e => Vm.ReturnLatest = e.Value?.ToString() ?? string.Empty"
                                                   readonly="@Config.HasFixedTimes" />
                                        </div>
                                        <div class="form-text">Latest return</div>
                                    </div>
                                }
                            </div>
                            @if (Config.HasFixedTimes)
                            {
                                <div class="alert alert-light border mt-3 mb-0">
                                    <i class="bi bi-info-circle me-1"></i>
                                    Time windows supplied by policy. Read-only.
                                </div>
                            }
                        </div>

                        <!-- Cabin class -->
                        <div class="col-12 col-lg-6">
                            <label class="form-label fw-semibold text-body-emphasis">Cabin</label>
                            <InputSelect class="form-select" @bind-Value="Vm.Cabin">
                                @foreach (var c in Enum.GetValues<CabinClass>().Where(c => c <= Config.MaxCabin))
                                {
                                    <option value="@c">@CabinLabel(c)</option>
                                }
                            </InputSelect>
                            <div class="form-text">Policy allows up to @CabinLabel(Config.MaxCabin).</div>
                        </div>

                    </div>

                    <hr class="my-4" />

                    <!-- Carriers and alliances -->
                    <div class="row g-3">
                        <div class="col-12 col-lg-6">
                            <label class="form-label fw-semibold text-body-emphasis">Airlines</label>
                            @if (Config.AvailableAirlines.Count == 0)
                            {
                                <div class="alert alert-light border">
                                    <i class="bi bi-info-circle me-1"></i>
                                    No specific airlines constrained by policy. You may still select alliance preferences.
                                </div>
                            }
                            else
                            {
                                <div class="row row-cols-1 row-cols-md-2 g-2">
                                    @foreach (var a in Config.AvailableAirlines)
                                    {
                                        var id = $"air_{a.Code}";
                                        <div class="col">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" id="@id"
                                                       checked="@Vm.Airlines.Contains(a.Code)"
                                                       @onchange="e => ToggleAirline(a.Code, e.Value is true)" />
                                                <label class="form-check-label d-flex align-items-center gap-2" for="@id">
                                                    <span class="badge text-bg-secondary">@a.Code</span>
                                                    <span>@a.Name</span>
                                                </label>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>

                        <div class="col-12 col-lg-6">
                            <label class="form-label fw-semibold text-body-emphasis">Alliances &amp; Rewards</label>
                            <div class="row row-cols-1 row-cols-md-2 g-2">
                                @foreach (var al in Enum.GetValues<Alliance>())
                                {
                                    string id = $"al_{al}";
                                    <div class="col">
                                        <div class="form-check d-flex align-items-center gap-2">
                                            <input class="form-check-input mt-0" type="checkbox" id="@id"
                                                checked="@Vm.Alliances.Contains(al)"
                                                @onchange="e => ToggleAlliance(al, e.Value is true)" />
                                            <img src="@AllianceIconUrl(al)" alt="@AllianceLabel(al)" width="20" height="20" class="rounded" />
                                            <label class="form-check-label mb-0" for="@id">@AllianceLabel(al)</label>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                </div>
            </div>

            <!-- Footer actions -->
            <div class="d-flex justify-content-between align-items-center mt-3 mb-3">
                <div class="text-muted small">
                    @if (!IsFormValid)
                    {
                        <span><i class="bi bi-exclamation-triangle me-1"></i>Complete required fields.</span>
                    }
                    else
                    {
                        <span><i class="bi bi-check2-circle me-1"></i>Ready to search.</span>
                    }
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-secondary" @onclick="ResetAll">Clear</button>
                    <button class="btn btn-primary" @onclick="SubmitSearch" disabled="@(!IsFormValid)">
                        <i class="bi bi-search"></i> Search
                    </button>
                </div>
            </div>
        </div>

        <!-- Summary -->
        <div class="col-12 col-xl-3">
            <div class="card shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center justify-content-between mb-2">
                        <div class="fw-semibold text-body-emphasis">Summary</div>
                        @* <span class="badge text-bg-light">VM</span> *@
                    </div>

                    <dl class="row mb-0 small">
                        <dt class="col-5">Trip</dt>
                        <dd class="col-7">@TripLabel(Vm.Trip)</dd>

                        <dt class="col-5">From</dt>
                        <dd class="col-7">@(!string.IsNullOrWhiteSpace(Vm.Origin) ? Vm.Origin : "\u00A0")</dd>

                        <dt class="col-5">To</dt>
                        <dd class="col-7">@(!string.IsNullOrWhiteSpace(Vm.Destination) ? Vm.Destination : "\u00A0")</dd>

                        <dt class="col-5">Depart</dt>
                        <dd class="col-7">@FormatDate(Vm.DepartDate)</dd>

                        @if (Vm.Trip == TripType.Return)
                        {
                            <dt class="col-5">Return</dt>
                            <dd class="col-7">@FormatDate(Vm.ReturnDate)</dd>
                        }

                        <dt class="col-5">Pax</dt>
                        <dd class="col-7">@Vm.Adults A, @Vm.Children C</dd>

                        <dt class="col-5">Cabin</dt>
                        <dd class="col-7">@CabinLabel(Vm.Cabin)</dd>

                        <dt class="col-5">Times</dt>
                        <dd class="col-7">
                            @Vm.DepartEarliest-@Vm.DepartLatest
                            @if (Vm.Trip == TripType.Return) { <span> / @Vm.ReturnEarliest-@Vm.ReturnLatest</span> }
                        </dd>

                        <dt class="col-5">Airlines</dt>
                        <dd class="col-7">@((Vm.Airlines.Count == 0) ? "Any" : string.Join(separator: ", ", Vm.Airlines))</dd>

                        <dt class="col-5">Alliances</dt>
                        <dd class="col-7">@((Vm.Alliances.Count == 0) ? "None" : string.Join(separator: ", ", Vm.Alliances.Select(AllianceLabel)))</dd>
                    </dl>
                </div>
            </div>
        </div>
    </div>
</div>
}



@code {
    // ===== Parameters =====
    [Parameter] public string? TravelQuoteId { get; set; }

    // Also allow query-string usage if preferred later.
    [SupplyParameterFromQuery] public string? tq { get; set; }

    // ===== View Model =====
    private FlightSearchPageConfig _cfg = default!;
    private SearchVm Vm { get; set; } = new SearchVm();

    // ===== Page State =====
    bool? _pageIsLoading = true;
    private PageConfig Config { get; set; } = PageConfig.Empty();
    private IConfigService _configSvc = default!;
    private CancellationTokenSource? _cts;
    static readonly JsonSerializerOptions JsonOpts = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
    // add once in the page
    static readonly JsonSerializerOptions EnumJson = new JsonSerializerOptions()
    {
        PropertyNameCaseInsensitive = true,
        Converters = { new JsonStringEnumConverter() }
    };

    private string? _error;

    // ===== Origin/Destination Dropdown State =====
    private bool ShowOriginList { get; set; }
    private bool ShowDestinationList { get; set; }
    private bool OriginFocused = false;
    private bool DestinationFocused = false;
    private string _originQuery = string.Empty;
    private string OriginQuery
    {
        get => _originQuery;
        set
        {
            _originQuery = value ?? "";
            ApplyOriginFilter();
        }
    }

    private string _destinationQuery = string.Empty;
    private string DestinationQuery
    {
        get => _destinationQuery;
        set
        {
            _destinationQuery = value ?? "";
            ApplyDestinationFilter();
        }
    }

    private List<BookingAirportItem> FilteredOrigins { get; set; } = new List<BookingAirportItem>();
    private List<BookingAirportItem> FilteredDestinations { get; set; } = new List<BookingAirportItem>();

    // ===== Lifecycle =====
    protected override async Task OnParametersSetAsync()
    {
        // Route param wins, else fall back to ?tq=
        string? id = !string.IsNullOrWhiteSpace(TravelQuoteId) ? TravelQuoteId : tq;

        // Require an ID
        if (string.IsNullOrWhiteSpace(id))
            Nav.NavigateTo(uri: "/platform/pnr/create", forceLoad: true);

        // Cancel prior load if any
        _cts?.Cancel();
        _cts = new CancellationTokenSource();
        CancellationToken ct = _cts.Token;

        // Create HttpClient for API calls
        HttpClient? client = HttpClientFactory.CreateClient(name: "AvaApi");
        string? url  = $"api/v1/travel/quotes/ui/flightsearchpageconfig/{Uri.EscapeDataString(id ?? string.Empty)}";

        await _log.InformationAsync(
            evt: "BOOKING_REQ_CONFIG_FETCH_START",
            cat: SysLogCatType.Api,
            act: SysLogActionType.Start,
            message: "Fetching CreateBookingRequest page config",
            ent: nameof(FlightSearchPageConfig),
            entId: url,
            note: "ingress:client");

        try
        {
            FlightSearchPageConfig? result = await client.GetFromJsonAsync<FlightSearchPageConfig>(url, EnumJson, ct);

            if (result == null)
            {
                _error = "Configuration data is null";
                await _log.WarningAsync(
                    evt: "BOOKING_REQ_CONFIG_EMPTY",
                    cat: SysLogCatType.Api,
                    act: SysLogActionType.Read,
                    message: _error,
                    ent: nameof(FlightSearchPageConfig),
                    entId: url);
                Nav.NavigateTo(uri: "/platform/pnr/create", forceLoad: true);
                return;
            }
            
            _cfg = result;
            _error = null;

            await _log.InformationAsync(
                evt: "BOOKING_REQ_CONFIG_FETCH_OK",
                cat: SysLogCatType.Api,
                act: SysLogActionType.End,
                message: "Fetched CreateBookingRequest page config",
                ent: nameof(FlightSearchPageConfig),
                entId: url);
        }
        catch (HttpRequestException ex)
        {
            _error = $"Error loading configuration: {ex.Message}";

            await _log.ErrorAsync(
                evt: "BOOKING_REQ_CONFIG_FETCH_ERR",
                cat: SysLogCatType.Api,
                act: SysLogActionType.Read,
                ex: ex,
                message: "HTTP error while fetching CreateBookingRequest page config",
                ent: nameof(FlightSearchPageConfig),
                entId: url,
                note: "http_error");
                
            Nav.NavigateTo(uri: "/platform/pnr/create", forceLoad: true);
        }
        catch (TaskCanceledException)
        {
            await _log.WarningAsync(
                evt: "BOOKING_REQ_CONFIG_FETCH_CANCEL",
                cat: SysLogCatType.Api,
                act: SysLogActionType.Read,
                message: "Config fetch cancelled",
                ent: nameof(FlightSearchPageConfig),
                entId: url,
                note: "task_canceled");

            // Ignore cancellations
            Nav.NavigateTo(uri: "/platform/pnr/create", forceLoad: true);
        }

        // Ensure service
        _configSvc ??= new TranslateFlightSearchPageConfigService();

        // Load full config from service
        Config = await _configSvc.LoadFSPConfigAsync(_cfg);

        // Initialize VM from config where required defaults exist
        InitializeVmFromConfig();

        // Build formatted airport lists from service-enabled sets
        RebuildAirportIndexes();

        // Initial filter
        ApplyOriginFilter();
        ApplyDestinationFilter();

        ValidateDates();
    }

    // ===== Commands =====
    private void SubmitSearch()
    {
        ValidateDates();
        if (!IsFormValid) return;

        // Forward VM to API (placeholder)
        // Nav.NavigateTo($"/platform/search/run?origin={Vm.Origin}&destination={Vm.Destination}...");
    }

    private void ResetAll()
    {
        Vm = new SearchVm();
        OriginQuery = string.Empty;
        DestinationQuery = string.Empty;
        ApplyOriginFilter();
        ApplyDestinationFilter();
    }

    private void SetTripType(TripType t)
    {
        Vm.Trip = t;
        if (t == TripType.OneWay)
        {
            Vm.ReturnDate = null;
            Vm.ReturnEarliest = string.Empty;
            Vm.ReturnLatest = string.Empty;
        }
    }

    private void ToggleAirline(string code, bool on)
    {
        if (on)
        {
            if (!Vm.Airlines.Contains(code)) Vm.Airlines.Add(code);
        }
        else
        {
            Vm.Airlines.Remove(code);
        }
    }

    private void ToggleAlliance(Alliance a, bool on)
    {
        if (on)
        {
            if (!Vm.Alliances.Contains(a)) Vm.Alliances.Add(a);
        }
        else
        {
            Vm.Alliances.Remove(a);
        }
    }

    private void AdjustAdults(int delta)
    {
        Vm.Adults = Math.Clamp(Vm.Adults + delta, min: 1, max: 9);
    }

    private void AdjustChildren(int delta)
    {
        Vm.Children = Math.Clamp(Vm.Children + delta, min: 0, max: 9);
    }

    // ===== Validation =====
    private bool IsFormValid =>
        !string.IsNullOrWhiteSpace(Vm.Origin)
        && !string.IsNullOrWhiteSpace(Vm.Destination)
        && Vm.Origin != Vm.Destination
        && Vm.DepartDate is not null
        && (Vm.Trip == TripType.OneWay || Vm.ReturnDate is not null)
        && !HasDateErrors;

    // ===== Errors =====
    private string? DepartError { get; set; }
    private string? ReturnError { get; set; }
    private bool HasDateErrors => !string.IsNullOrEmpty(DepartError) || !string.IsNullOrEmpty(ReturnError);

    // Validate dates against policy min and logical ordering
    private void ValidateDates()
    {
        DepartError = null;
        ReturnError = null;

        // Require a depart date
        if (Vm.DepartDate is null)
        {
            DepartError = "Select a depart date.";
            return;
        }

        // Enforce policy minimum for depart if present
        if (HasAdvance && Vm.DepartDate.Value.Date < MinDepartDate.Date)
            DepartError = $"Earliest allowed depart is {MinDepartDate:ddd, dd MMM yyyy}.";

        // Return checks only if return is in play and chosen
        if (Vm.Trip == TripType.Return && Vm.ReturnDate is not null)
        {
            if (Vm.ReturnDate.Value.Date < Vm.DepartDate.Value.Date)
                ReturnError = "Return date cannot be before depart date.";
        }
    }

    // ===== Airport filtering =====
    private void RebuildAirportIndexes()
    {
        _originIndex = Config.EnabledOrigins
            .Select(FormatAirport)
            .OrderBy(a => a.Code)
            .ToList();

        _destIndex = Config.EnabledDestinations
            .Select(FormatAirport)
            .OrderBy(a => a.Code)
            .ToList();
    }

    private void ApplyOriginFilter()
    {
        string? q = (OriginQuery ?? "").Trim();
        FilteredOrigins = FilterAirports(_originIndex, q);
        ShowOriginList = OriginFocused && q.Length >= 1 && FilteredOrigins.Count > 0;
    }

    private void ApplyDestinationFilter()
    {
        string? q = (DestinationQuery ?? "").Trim();
        FilteredDestinations = FilterAirports(_destIndex, q);
        ShowDestinationList = DestinationFocused && q.Length >= 1 && FilteredDestinations.Count > 0;
    }

    private static List<BookingAirportItem> FilterAirports(List<BookingAirportItem> all, string query)
    {
        if (string.IsNullOrWhiteSpace(query)) return all.Take(25).ToList();
        query = query.ToUpperInvariant();
        return all
            .Where(a => a.Code.Contains(query, StringComparison.OrdinalIgnoreCase)
                     || a.Name.Contains(query, StringComparison.OrdinalIgnoreCase)
                     || a.Country.Contains(query, StringComparison.OrdinalIgnoreCase))
            //.Take(count: 25)
            .ToList();
    }

    private void PickOrigin(BookingAirportItem a)
    {
        Vm.Origin = a.Code;
        OriginQuery = $"{a.Code} â€” {a.Name}";
        ShowOriginList = false;
    }

    private void PickDestination(BookingAirportItem a)
    {
        Vm.Destination = a.Code;
        DestinationQuery = $"{a.Code} â€” {a.Name}";
        ShowDestinationList = false;
    }

    private async void HideOriginListDeferred(FocusEventArgs _)
    {
        await Task.Delay(millisecondsDelay: 120);
        OriginFocused = false;
        ShowOriginList = false;
        StateHasChanged();
    }

    private async void HideDestinationListDeferred(FocusEventArgs _)
    {
        await Task.Delay(millisecondsDelay: 120);
        DestinationFocused = false;
        ShowDestinationList = false;
        StateHasChanged();
    }

    private void OnOriginKeyDown(KeyboardEventArgs e)
    {
        if (e.Key is "Escape")
        {
            ShowOriginList = false;
        }
    }

    private void OnDestinationKeyDown(KeyboardEventArgs e)
    {
        if (e.Key is "Escape")
        {
            ShowDestinationList = false;
        }
    }

    // ===== Helpers: labels, formatting, parsing =====
    private static string TripLabel(TripType t) => t switch
    {
        TripType.OneWay => "One-Way",
        TripType.Return => "Return",
        _ => t.ToString()
    };

    private static string CabinLabel(CabinClass c) => c switch
    {
        CabinClass.Economy => "Economy",
        CabinClass.PremiumEconomy => "Premium Economy",
        CabinClass.Business => "Business",
        CabinClass.First => "First",
        _ => c.ToString()
    };

    private static string CabinKey(CabinClass c) => c.ToString().ToLowerInvariant();

    private static string CabinIcon(CabinClass c) => c switch
    {
        CabinClass.Economy => "bi bi-cash-coin",
        CabinClass.PremiumEconomy => "bi bi-gem",
        CabinClass.Business => "bi bi-briefcase",
        CabinClass.First => "bi bi-star-fill",
        _ => "bi bi-person"
    };

    private static string AllianceLabel(Alliance a) => a switch
    {
        Alliance.Oneworld => "oneworld",
        Alliance.StarAlliance => "Star Alliance",
        Alliance.SkyTeam => "SkyTeam",
        _ => a.ToString()
    };

    private string BindDate(DateTime? dt) =>
        dt?.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) ?? string.Empty;

    private DateTime? ParseDate(string? v)
    {
        if (DateTime.TryParse(v, CultureInfo.InvariantCulture, DateTimeStyles.AssumeLocal, out var d))
        {
            return d.Date;
        }
        return null;
    }

    private static string AllianceIconUrl(Alliance a) => a switch
    {
        Alliance.Oneworld     => "/img/airline_alliance/oneworld.svg",
        Alliance.StarAlliance => "/img/airline_alliance/star_alliance_logo_cropped.svg",
        Alliance.SkyTeam      => "/img/airline_alliance/skyteam.svg",
        _ => ""
    };

    private string FormatDate(DateTime? dt) =>
        dt?.ToString(format: "ddd, dd MMM yyyy", CultureInfo.InvariantCulture) ?? "-";

    private string DisplayQuoteId => string.IsNullOrWhiteSpace(TravelQuoteId ?? tq) ? "(preview)" : (TravelQuoteId ?? tq)!;

    private static int CoerceInt(object? value, int min, int max)
    {
        if (value is null) return min;
        if (value is int i) return Math.Clamp(i, min, max);

        var s = Convert.ToString(value, CultureInfo.InvariantCulture);
        if (int.TryParse(s, NumberStyles.Integer, CultureInfo.InvariantCulture, out var n))
            return Math.Clamp(n, min, max);

        return min;
    }

    private bool HasAdvance => (Config.DaysInAdvanceBookingRequired ?? 0) > 0;
    private DateTime MinDepartDate => DateTime.Today.AddDays(Config.DaysInAdvanceBookingRequired ?? 0);
    private string MinDateStr(DateTime dt) => dt.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
    private string? DepartMinAttr => HasAdvance ? MinDateStr(MinDepartDate) : null;
    private string? ReturnMinAttr => HasAdvance ? MinDateStr((Vm.DepartDate ?? MinDepartDate)) : null;

    private static DateTime? EnforceMin(DateTime? dt, DateTime min)
    {
        if (dt is null) return null;
        var d = dt.Value.Date;
        return d < min.Date ? min.Date : d;
    }

    // ===== Initialize from config =====
    private void InitializeVmFromConfig()
    {
        // Preselect cabin to min of current vs allowed max
        if (Vm.Cabin > Config.MaxCabin)
            Vm.Cabin = Config.MaxCabin;

        if (Config.HasFixedTimes)
        {
            Vm.DepartEarliest = Config.FixedDepartEarliest;
            Vm.DepartLatest = Config.FixedDepartLatest;
            Vm.ReturnEarliest = Config.FixedReturnEarliest;
            Vm.ReturnLatest = Config.FixedReturnLatest;
        }

        // Seed dates if provided
        if (Config.SeedDepartDate is not null) Vm.DepartDate = Config.SeedDepartDate;
        if (Config.SeedReturnDate is not null) Vm.ReturnDate = Config.SeedReturnDate;

        // Optionally seed airlines
        if (Config.PreferredAirlines.Count > 0)
        {
            Vm.Airlines = Config.PreferredAirlines.Distinct().ToList();
        }

        if (HasAdvance)
        {
            // If no seed, default to min. If seed earlier than min, bump to min.
            Vm.DepartDate = EnforceMin(Vm.DepartDate ?? MinDepartDate, MinDepartDate);

            if (Vm.Trip == TripType.Return)
            {
                // Ensure return not before depart
                DateTime baseMinReturn = Vm.DepartDate ?? MinDepartDate;
                Vm.ReturnDate = EnforceMin(Vm.ReturnDate, baseMinReturn);
            }
        }

        // Seed adults count
        if (Config.Adults > 0)
        {
            Vm.Adults = Config.Adults;
        }
    }

    // ===== Backing indexes for airports =====
    private List<BookingAirportItem> _originIndex = new List<BookingAirportItem>();
    private List<BookingAirportItem> _destIndex = new List<BookingAirportItem>();

    private static BookingAirportItem FormatAirport(BookingAirport a) =>
        new BookingAirportItem(a.Code,
            a.Name,
            a.City,
            a.Country,
            NameFormatted: $"{a.Code} â€” {a.Name}{(string.IsNullOrWhiteSpace(a.City) ? "" : $", {a.City}")}{(string.IsNullOrWhiteSpace(a.Country) ? "" : $", {a.Country}")}");

    // ===== Data contracts =====
    private enum TripType { OneWay = 1, Return = 2 }

    private enum Alliance { Oneworld = 1, StarAlliance = 2, SkyTeam = 3 }

    private sealed class SearchVm
    {
        [Required] public string Origin { get; set; } = string.Empty;
        [Required] public string Destination { get; set; } = string.Empty;

        public TripType Trip { get; set; } = TripType.OneWay;

        public DateTime? DepartDate { get; set; } = DateTime.Today.AddDays(7);
        public DateTime? ReturnDate { get; set; } = null;

        public int Adults { get; set; } = 1;
        public int Children { get; set; } = 0;

        public CabinClass Cabin { get; set; } = CabinClass.Economy;

        // Time windows; become read-only when supplied by policy
        public string DepartEarliest { get; set; } = string.Empty; // "HH:mm"
        public string DepartLatest { get; set; } = string.Empty;
        public string ReturnEarliest { get; set; } = string.Empty;
        public string ReturnLatest { get; set; } = string.Empty;

        public List<string> Airlines { get; set; } = new List<string>();      // list of airline IATA codes
        public List<Alliance> Alliances { get; set; } = new List<Alliance>();   // reward programs
    }

    //Bprivate sealed record Airport(string Code, string Name, string City, string Country);

    //private sealed record Airline(string Code, string Name);

    //private sealed record AirportItem(string Code, string Name, string City, string Country, string NameFormatted);

    private sealed class PageConfig
    {
        public string TenantName { get; init; } = "â€”";
        public string PolicyName { get; init; } = "â€”";

        public List<BookingAirport> EnabledOrigins { get; init; } = new List<BookingAirport>();
        public List<BookingAirport> EnabledDestinations { get; init; } = new List<BookingAirport>();

        public List<BookingAirline> AvailableAirlines { get; init; } = new List<BookingAirline>();
        public List<string> PreferredAirlines { get; init; } = new List<string>();

        public CabinClass MaxCabin { get; init; } = CabinClass.First;

        public int? DaysInAdvanceBookingRequired { get; init; }

        public bool HasFixedTimes { get; init; }
        public string FixedDepartEarliest { get; init; } = string.Empty;
        public string FixedDepartLatest { get; init; } = string.Empty;
        public string FixedReturnEarliest { get; init; } = string.Empty;
        public string FixedReturnLatest { get; init; } = string.Empty;

        public DateTime? SeedDepartDate { get; init; }
        public DateTime? SeedReturnDate { get; init; }

        public int Adults { get; init; }

        public static PageConfig Empty() => new PageConfig();
    }

    // ===== Service abstraction =====
    private interface IConfigService
    {
        //Task<PageConfig> LoadAsync(string travelQuoteId);
        Task<PageConfig> LoadFSPConfigAsync(FlightSearchPageConfig _cfg);
    }

    // Wire in FlightSearchPageConfig from API based on TravelQuoteId.
    private sealed class TranslateFlightSearchPageConfigService : IConfigService
    {

        public Task<PageConfig> LoadFSPConfigAsync(FlightSearchPageConfig _cfg)
        {
            PageConfig cfg = new PageConfig
            {
                TenantName = _cfg.TenantName,
                PolicyName = _cfg.PolicyName,
                EnabledOrigins = _cfg.EnabledOrigins,
                EnabledDestinations = _cfg.EnabledDestinations,
                AvailableAirlines = _cfg.AvailableAirlines,
                PreferredAirlines = _cfg.PreferredAirlines,
                MaxCabin = (CabinClass)_cfg.MaxCabin,
                DaysInAdvanceBookingRequired = _cfg.DaysInAdvanceBookingRequired,
                HasFixedTimes = _cfg.HasFixedTimes,
                FixedDepartEarliest = _cfg.FixedDepartEarliest,
                FixedDepartLatest = _cfg.FixedDepartLatest,
                FixedReturnEarliest = _cfg.FixedReturnEarliest,
                FixedReturnLatest = _cfg.FixedReturnLatest,
                SeedDepartDate = _cfg.SeedDepartDate,
                SeedReturnDate = _cfg.SeedReturnDate,
                Adults = _cfg.Adults,
            };
            return Task.FromResult(cfg);
        }
    }
}
