@page "/support/contact"
@rendermode InteractiveServer
@attribute [Authorize]
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Claims
@using Microsoft.AspNetCore.Components

@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Nav

<CascadingAuthenticationState>
    @if (!_isAuthChecked)
    {
        <div class="container py-5">
            <div class="text-center text-muted">Loading…</div>
        </div>
    }
    else if (!_isAuthenticated)
    {
        <div class="container py-5">
            <div class="row justify-content-center">
                <div class="col-lg-7">
                    <div class="card border-danger">
                        <div class="card-header bg-danger text-white">Login required</div>
                        <div class="card-body">
                            <p class="mb-4">
                                Please sign in to submit a support ticket.
                            </p>
                            <a class="btn btn-primary" href="/login">Go to Login</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="container py-4">
            <div class="row justify-content-center">
                <div class="col-lg-9">
                    <div class="card">
                        <div class="card-header">Contact Support</div>

                        <div class="card-body">
                            <EditForm Model="_vm" OnValidSubmit="SubmitAsync">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <label class="form-label" for="userId">User ID</label>
                                        <InputText id="userId" class="form-control" @bind-Value="_vm.UserId" placeholder="none" readonly />
                                    </div>

                                    <div class="col-md-6">
                                        <label class="form-label" for="orgId">Org ID</label>
                                        <InputText id="orgId" class="form-control" @bind-Value="_vm.OrgId" placeholder="none" readonly />
                                    </div>

                                    <div class="col-12">
                                        <label class="form-label">Subject</label>
                                        <InputText class="form-control" @bind-Value="_vm.Subject" placeholder="Brief summary of the issue…" />
                                    </div>

                                    <!-- Category -->
                                    <div class="col-md-4">
                                        <label class="form-label" for="categoryGroup">Category</label>
                                        <InputSelect id="categoryGroup"
                                                    class="form-select"
                                                    @bind-Value="_selectedCategoryGroup"
                                                    @onchange="OnCategoryGroupChanged">
                                            <option value="@DefaultGroupKey">— Select Category —</option>
                                            @foreach (var g in _categoryGroups)
                                            {
                                                <option value="@g.Key">@g.Label</option>
                                            }
                                        </InputSelect>
                                    </div>

                                    <!-- SubCategory -->
                                    <div class="col-md-4">
                                        <label class="form-label" for="subcategory">Sub-Category</label>
                                        <InputSelect id="subcategory" class="form-select" @bind-Value="_vm.Category">
                                            <option value="@NoSubcatValue">— Select Sub-Category —</option>
                                            @foreach (var c in SubcategoriesForSelected)
                                            {
                                                <option value="@c.Value">@c.Label</option>
                                            }
                                        </InputSelect>
                                    </div>

                                    <!-- Priority -->
                                    <div class="col-md-4">
                                        <label class="form-label" for="priority">Priority</label>
                                        <InputSelect id="priority" class="form-select" @bind-Value="_vm.Priority">
                                            @foreach (var p in _priorities)
                                            {
                                                <option value="@p.Value">@p.Label</option>
                                            }
                                        </InputSelect>
                                    </div>

                                    <div class="col-12">
                                        <label class="form-label">Description</label>
                                        <InputTextArea class="form-control" @bind-Value="_vm.Description" placeholder="Describe the problem, steps to reproduce, expected vs actual…" rows="6" />
                                    </div>

                                    <div class="col-md-6">
                                        <label class="form-label">Callback Email (optional)</label>
                                        <InputText type="email" class="form-control" @bind-Value="_vm.CallbackEmail" placeholder="name@example.com" />
                                    </div>

                                    <div class="col-md-6">
                                        <label class="form-label">Related Page URL (optional)</label>
                                        <InputText class="form-control" @bind-Value="_vm.PageUrl" placeholder="https://yourapp/path/that/errored" />
                                        @* if came from error page with ?pageUrl=xxx already filled this *@
                                    </div>

                                    <div class="col-12">
                                        <div class="form-check">
                                            <input type="checkbox" class="form-check-input" id="diagChk" @bind="_vm.IncludeDiagnostics" />
                                            <label class="form-check-label" for="diagChk">Include diagnostics</label>
                                        </div>
                                    </div>

                                    <div class="col-12">
                                        <label class="form-label">Attachments (screenshots, logs)</label>
                                        <InputFile OnChange="OnFilesSelected" multiple />
                                        @if (_files.Count > 0)
                                        {
                                            <ul class="list-group list-group-flush mt-2">
                                                @foreach (var f in _files)
                                                {
                                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                                        <span class="text-truncate" style="max-width: 70%;">
                                                            @f.Name (@(FormatSize(f.Size)))
                                                        </span>
                                                        <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="() => RemoveFile(f)">Remove</button>
                                                    </li>
                                                }
                                            </ul>
                                        }
                                        @* <div class="form-text">Accepted: any common file. Max size handled server-side.</div> *@
                                    </div>

                                    <div class="col-12 d-flex justify-content-end gap-2">
                                        <button type="submit" class="btn btn-primary" disabled="@_isSubmitting">
                                            @if (_isSubmitting)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                            }
                                            Submit Ticket
                                        </button>
                                        <a class="btn btn-outline-secondary" href="javascript:history.back()">Cancel</a>
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</CascadingAuthenticationState>

@code {
    [Parameter, SupplyParameterFromQuery(Name = "pageUrl")]
    public string? IncomingPageUrl { get; set; }

    private bool _isAuthChecked;
    private bool _isAuthenticated;
    private bool _isSubmitting;

    private string? _userId;
    private string? _orgId;

    private record DropdownOption(string Value, string Label);
    private const string DefaultGroupKey = "none";
    private const string NoSubcatValue  = "no-cat";

    // Group container
    private sealed record CategoryGroup(string Key, string Label, DropdownOption[] Items);

    // Top-level category groups (short labels); subcats are the real saved values.
    private readonly CategoryGroup[] _categoryGroups =
    [
        new("techops",   "Technical / Ops", new[]
        {
            new DropdownOption("bug",                    "Bug / Defect"),
            new DropdownOption("incident-outage",        "Incident / Outage"),
            new DropdownOption("performance",            "Performance / Slowness"),
            new DropdownOption("access-login",           "Access / Login / SSO"),
            new DropdownOption("user-provisioning",      "User Provisioning / Deprovisioning"),
            new DropdownOption("config-setup",           "Configuration / Setup"),
            new DropdownOption("integration-api",        "Integrations / API / Webhooks"),
            new DropdownOption("data-import-export",     "Data Import / Export"),
            new DropdownOption("reporting",              "Reporting / Analytics"),
            new DropdownOption("security-compliance",    "Security / Privacy / Compliance"),
        }),

        new("travel",    "Travel / TMC", new[]
        {
            new DropdownOption("travel-policy",                 "Travel Policy / Approvals"),
            new DropdownOption("booking-issue",                 "Booking Issue (Flight/Hotel/Car)"),
            new DropdownOption("ticketing-pnr",                 "Ticketing / PNR"),
            new DropdownOption("refunds-exchanges-farerules",   "Refunds / Exchanges / Fare Rules"),
            new DropdownOption("traveler-profiles",             "Traveler Profiles"),
            new DropdownOption("duty-of-care",                  "Duty of Care / Traveler Safety"),
            new DropdownOption("gds-ndc",                       "GDS / NDC Content"),
        }),

        new("commercial","Vendor / Commercial", new[]
        {
            new DropdownOption("supplier-onboarding",     "Supplier / Vendor Onboarding"),
            new DropdownOption("licensing-entitlements",  "Licensing / Seats / Entitlements"),
        }),

        new("finance",   "Billing / Finance", new[]
        {
            new DropdownOption("billing-inquiry",  "Billing Inquiry"),
            new DropdownOption("invoice-receipt",  "Invoice / Receipt Request"),
            new DropdownOption("payment-issue",    "Payment Issue / Refund"),
            new DropdownOption("contract-po",      "Contract / PO / Order"),
            new DropdownOption("pricing-quote",    "Pricing / Quote"),
        }),

        new("misc",      "Enablement / Misc", new[]
        {
            new DropdownOption("implementation",   "Implementation / Project"),
            new DropdownOption("training",         "Training / Enablement"),
            new DropdownOption("support-sla",      "Support / SLA"),
            new DropdownOption("general-question", "General Question"),
        }),
    ];

    // Backing state for column 1 (filter only; not saved)
    private string _selectedCategoryGroup = DefaultGroupKey;

    // Filtered subcategory list for column 2
    private IEnumerable<DropdownOption> SubcategoriesForSelected =>
        _categoryGroups.FirstOrDefault(g => g.Key == _selectedCategoryGroup)?.Items
        ?? Array.Empty<DropdownOption>();

    // Ensure subcategory (_vm.Category) is valid for the chosen group
    private void OnCategoryGroupChanged(ChangeEventArgs _)
    {
        if (!SubcategoriesForSelected.Any(i => string.Equals(i.Value, _vm.Category, StringComparison.OrdinalIgnoreCase)))
            _vm.Category = NoSubcatValue; // reset to sentinel if current value not in this group
    }

    private readonly DropdownOption[] _priorities = 
    [
        new DropdownOption("low", "Low"),
        new DropdownOption("normal", "Normal"),
        new DropdownOption("high", "High"),
        new DropdownOption("urgent", "Urgent")
    ];

    private TicketVm _vm = new();

    // Keep files in memory for now; wire to your API when ready
    private List<IBrowserFile> _files = new();

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = auth.User;

        _isAuthenticated = user.Identity?.IsAuthenticated == true;
        _isAuthChecked = true;

        if (_isAuthenticated)
        {
            _vm.UserId ??= user.Identity?.Name
                ?? GetFirstClaim(user, ClaimTypes.NameIdentifier, "sub", "nameid");

            _vm.OrgId ??= GetFirstClaim(user,
                "org_id", "organization", "OrganizationId", "org", "tenant", "tenant_id");
        }

        // if _vm.Category already has a value, pick the matching group; else leave "none"
        var grp = _categoryGroups.FirstOrDefault(g => g.Items.Any(i =>
            string.Equals(i.Value, _vm.Category, StringComparison.OrdinalIgnoreCase)));
        if (grp is not null)
            _selectedCategoryGroup = grp.Key;
    }

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrWhiteSpace(IncomingPageUrl))
        {
            _vm.PageUrl = IncomingPageUrl;
        }
    }

    private async Task SubmitAsync()
    {
        _isSubmitting = true;
        try
        {
            // TODO: Build a multipart/form-data request to your backend:
            //  - Fields from _vm
            //  - _userId, _orgId
            //  - Files from _files (use IBrowserFile.OpenReadStream() and StreamContent)
            //
            // Example placeholder:
            await Task.Delay(600);

            // On success, navigate or show toast
            Nav.NavigateTo("/support/thanks", forceLoad: true);
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private void OnFilesSelected(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            _files.Add(file);
        }
    }

    private void RemoveFile(IBrowserFile file)
    {
        _files.Remove(file);
    }

    private static string? GetFirstClaim(ClaimsPrincipal user, params string[] types)
    {
        foreach (var t in types)
        {
            var v = user.FindFirst(t)?.Value;
            if (!string.IsNullOrWhiteSpace(v)) return v;
        }
        return null;
    }

    private static string FormatSize(long bytes)
    {
        string[] units = { "B", "KB", "MB", "GB" };
        double size = bytes;
        var unit = 0;
        while (size >= 1024 && unit < units.Length - 1)
        {
            size /= 1024;
            unit++;
        }
        return $"{size:0.##} {units[unit]}";
    }

    private sealed class TicketVm
    {
        public string? Subject { get; set; }
        public string Category { get; set; } = "bug";  // default
        public string Priority { get; set; } = "normal";  // default
        public string? Description { get; set; }

        public bool IncludeDiagnostics { get; set; } = true;
        [EmailAddress] public string? CallbackEmail { get; set; }
        public string? PageUrl { get; set; }

        public string? UserId { get; set; }
        public string? OrgId  { get; set; }

        public string CategoryLabel => string.IsNullOrWhiteSpace(Category) || Category == "Unspecified" ? "Uncategorized" : Category;
        public string PriorityLabel => string.IsNullOrWhiteSpace(Priority) ? "Normal" : Priority;
    }
}
