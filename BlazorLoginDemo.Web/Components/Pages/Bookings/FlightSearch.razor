@page "/flights/search"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using BlazorLoginDemo.Web.Components.Shared
@using BlazorLoginDemo.Shared.Models.Kernel.Travel
@using BlazorLoginDemo.Shared.Models.User
@using System.Net.Http.Json
@using System.Text.Json
@using System.Text.Json.Serialization
@using Macross.Json.Extensions
@attribute [Authorize]

@inject BlazorLoginDemo.Shared.Services.Interfaces.User.IAvaUserService AvaUserService
@inject NavigationManager Nav
@inject IHttpClientFactory HttpClientFactory

<PageTitle>Flight Search</PageTitle>

<h1 class="display-6 mb-3">Flight Search</h1>

<div class="card mb-4">
    <div class="card-header d-flex align-items-center justify-content-between">
        <button type="button" class="btn btn-outline-primary"
                @onclick="@(() => GoToPolicy(_travelPolicyId))">
            View Travel Policy
        </button>
        <div class="btn-group" role="group" aria-label="Trip type">
            <input type="radio" class="btn-check" id="oneway" name="tripType" checked="@(_model.TripType == TripType.OneWay)" @onchange="@(_ => SetTripType(TripType.OneWay))">
            <label class="btn btn-outline-primary" for="oneway">One-way</label>

            <input type="radio" class="btn-check" id="return" name="tripType" checked="@(_model.TripType == TripType.Return)" @onchange="@(_ => SetTripType(TripType.Return))">
            <label class="btn btn-outline-primary" for="return">Return</label>
        </div>
    </div>

    <EditForm Model="_model" OnValidSubmit="OnSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="card-body">
            <!-- Origin / Destination -->
            <div class="row g-2 align-items-end">
                <div class="col-md-5">
                    <label class="form-label">Origin</label>
                    <div class="position-relative">
                        <input class="form-control"
                                placeholder="Type code or city (e.g., SYD or Sydney)"
                                @bind="_originQuery"
                                @bind:event="oninput"
                                @onfocus="() => _originOpen = true"
                                @onblur="() => CloseDropdownSoon(nameof(_originOpen))" />
                        @if (_originOpen && OriginMatches.Any())
                        {
                            <ul class="list-group position-absolute w-100" style="z-index: 1000;">
                                @foreach (var a in OriginMatches)
                                {
                                    <li class="list-group-item list-group-item-action"
                                        @onclick="(() => PickOrigin(a))">
                                        <div class="d-flex justify-content-between">
                                            <span>@a.Code — @a.City</span>
                                            <small class="text-muted">@a.Name</small>
                                        </div>
                                    </li>
                                }
                            </ul>
                        }
                    </div>
                    <div class="form-text">Selected: @(_model.Origin ?? "—")</div>
                </div>

                <div class="col-md-1 d-flex justify-content-center">
                    <button type="button" class="btn btn-outline-secondary" title="Swap" @onclick="Swap">
                        <i class="bi bi-arrow-left-right"></i>
                    </button>
                </div>

                <div class="col-md-5">
                    <label class="form-label">Destination</label>
                    <div class="position-relative">
                        <input class="form-control"
                                placeholder="Type code or city (e.g., MEL or Melbourne)"
                                @bind="_destQuery"
                                @bind:event="oninput"
                                @onfocus="() => _destOpen = true"
                                @onblur="() => CloseDropdownSoon(nameof(_destOpen))" />
                        @if (_destOpen && DestMatches.Any())
                        {
                            <ul class="list-group position-absolute w-100" style="z-index: 1000;">
                                @foreach (var a in DestMatches)
                                {
                                    <li class="list-group-item list-group-item-action"
                                        @onclick="(() => PickDest(a))">
                                        <div class="d-flex justify-content-between">
                                            <span>@a.Code — @a.City</span>
                                            <small class="text-muted">@a.Name</small>
                                        </div>
                                    </li>
                                }
                            </ul>
                        }
                    </div>
                    <div class="form-text">Selected: @(_model.Destination ?? "—")</div>
                </div>
            </div>

            <!-- Dates -->
            <div class="row g-2 mt-2">
                <div class="col-md-4">
                    <label class="form-label">Departure</label>
                    @* <InputDate class="form-control"
                        @bind-Value="_model.DepartureDate"
                        min="@MinDepartDateString"
                        @onchange="OnDepartureChanged" /> *@
                    <WeekdayDatePicker
                        @bind-Date="_model.DepartureDate"
                        Min="MinDepartDate"
                        DisableSaturday="true"
                        DisableSunday="true" />
                    <div class="form-text">
                        Earliest: @(MinDepartDate.ToString("yyyy-MM-dd")) (@BookingDaysAdvanceMinDays day lead)
                    </div>
                </div>
                <div class="col-md-2" />
                <div class="col-md-4">
                    <label class="form-label">Return</label>
                    <InputDate class="form-control"
                        @bind-Value="_model.ReturnDate"
                        disabled="@(_model.TripType == TripType.OneWay)"
                        min="@MinReturnDateString" />
                    @if (_model.TripType == TripType.OneWay)
                    {
                        <div class="form-text">Return date disabled for One-way.</div>
                    }
                    else
                    {
                        <div class="form-text">Return can’t be before @MinReturnDateString</div>
                    }
                </div>
            </div>

            <!-- Cabin + Pax -->
            <div class="row g-2 mt-2">
                <div class="col-md-2">
                    <label class="form-label">Cabin Class</label>
                    <InputSelect class="form-select" @bind-Value="_model.Cabin">
                        @foreach (var c in Enum.GetValues<CabinClass>())
                        {
                            <option value="@c">@c.ToString().Replace('_',' ')</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Passengers</label>
                    <select class="form-select" @onchange="OnPassengersChanged">
                        @for (var i = 1; i <= 9; i++)
                        {
                            <option value="@i" selected="@(i == _model.Passengers)">@i</option>
                        }
                        <option value="10+">10+</option>
                    </select>
                </div>
            </div>

            @if (_showGroupPrompt)
            {
                <div class="alert alert-warning mt-3 d-flex align-items-center" role="alert">
                    <i class="bi bi-people-fill me-2"></i>
                    <div>
                        For groups of 10 or more, please contact your Account Manager to complete the booking.
                    </div>
                    <button type="button" class="btn btn-sm btn-outline-secondary ms-auto" @onclick="() => _showGroupPrompt = false">Got it</button>
                </div>
            }

            <!-- Actions -->
            <div class="d-flex gap-2 mt-3">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-search"></i> Search flights
                </button>
                <button type="button" class="btn btn-outline-secondary" @onclick="ResetForm">
                    Reset
                </button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthStateTask { get; set; } = default!;
    private string? _username;
    private string? _travelPolicyId;

    private HttpClient Api => _api ??= HttpClientFactory.CreateClient("AvaApi");
    private HttpClient? _api;

    // --- Data model & enums ---
    public enum TripType { OneWay, Return }
    public enum CabinClass { ECONOMY, PREMIUM_ECONOMY, BUSINESS, FIRST }

    public class FlightSearchModel : IValidatableObject
    {
        [Required(ErrorMessage = "Origin is required")]
        public string? Origin { get; set; }

        [Required(ErrorMessage = "Destination is required")]
        public string? Destination { get; set; }

        [Required]
        [DataType(DataType.Date)]
        public DateTime? DepartureDate { get; set; } = DateTime.Today.AddDays(7);

        [DataType(DataType.Date)]
        public DateTime? ReturnDate { get; set; }

        [Range(1, 9)]
        public int Passengers { get; set; } = 1;

        [Required]
        public CabinClass Cabin { get; set; } = CabinClass.ECONOMY;

        [Required]
        public TripType TripType { get; set; } = TripType.Return;

    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        var today = DateTime.Today;

        if (!DepartureDate.HasValue)
        {
            yield return new ValidationResult("Departure date is required.", new[] { nameof(DepartureDate) });
        }
        else
        {
            // Enforce lead time and no past dates
            var minDepart = today.AddDays(BookingDaysAdvanceMinDays);
            if (DepartureDate.Value.Date < minDepart)
                yield return new ValidationResult($"Earliest departure is {minDepart:yyyy-MM-dd}.", new[] { nameof(DepartureDate) });
        }

        if (TripType == TripType.Return)
        {
            if (!ReturnDate.HasValue)
            {
                yield return new ValidationResult("Return date is required for return trips.", new[] { nameof(ReturnDate) });
            }
            else
            {
                // Return cannot be before depart; also respect lead time
                var minReturn = (DepartureDate ?? today.AddDays(BookingDaysAdvanceMinDays)).Date;
                if (ReturnDate.Value.Date < minReturn)
                    yield return new ValidationResult($"Return date can’t be before {minReturn:yyyy-MM-dd}.", new[] { nameof(ReturnDate) });
            }
        }
    }
    }

    // --- Booking window / lead time ---
    private const int BookingDaysAdvanceMinDays = 12; // ← change this as desired (e.g., 5)
    private DateTime Today => DateTime.Today;
    private DateTime MinDepartDate => Today.AddDays(BookingDaysAdvanceMinDays);

    // yyyy-MM-dd for <input type="date" min="...">
    private string MinDepartDateString => MinDepartDate.ToString("yyyy-MM-dd");

    private DateTime MinReturnBase
    {
        get
        {
            var baseMin = MinDepartDate;
            var dep = _model.DepartureDate?.Date ?? baseMin;
            return dep > baseMin ? dep : baseMin;
        }
    }
    private string MinReturnDateString
    {
        get
        {
            var baseMin = MinDepartDate;
            var dep = _model.DepartureDate ?? baseMin;
            var min = dep > baseMin ? dep : baseMin;
            return min.ToString("yyyy-MM-dd");
        }
    }


    // --- Demo airport data & search ---
    private record Airport(string Code, string City, string Name);

    @* private static readonly Airport[] Airports = Array.Empty<Airport>(); *@
    private static readonly List<Airport> _airports = new();
    private Airport[] Airports => _airports.ToArray();

    private string _originQuery = "";
    private string _destQuery = "";
    private bool _originOpen;
    private bool _destOpen;

    private IEnumerable<Airport> OriginMatches =>
        FilterAirports(_originQuery).Where(a => a.Code != _model.Destination);

    private IEnumerable<Airport> DestMatches =>
        FilterAirports(_destQuery).Where(a => a.Code != _model.Origin);

    private IEnumerable<Airport> FilterAirports(string q)
    {
        if (string.IsNullOrWhiteSpace(q)) return Array.Empty<Airport>();
        var src = Airports; // snapshot
        q = q.Trim();

        return src.Where(a =>
            a.Code.Contains(q, StringComparison.OrdinalIgnoreCase) ||
            a.City.Contains(q, StringComparison.OrdinalIgnoreCase) ||
            a.Name.Contains(q, StringComparison.OrdinalIgnoreCase));
    }

    private void PickOrigin(Airport a)
    {
        _model.Origin = a.Code;
        _originQuery = $"{a.Code} — {a.City}";
        _originOpen = false;
    }

    private void PickDest(Airport a)
    {
        _model.Destination = a.Code;
        _destQuery = $"{a.Code} — {a.City}";
        _destOpen = false;
    }

    private async Task CloseDropdownSoon(string which)
    {
        // Small delay to allow click selection before blur closes the menu
        await Task.Delay(150);
        if (which == nameof(_originOpen)) _originOpen = false;
        if (which == nameof(_destOpen)) _destOpen = false;
        StateHasChanged();
    }

    private void Swap()
    {
        (_model.Origin, _model.Destination) = (_model.Destination, _model.Origin);
        // Refresh visible queries
        var o = Airports.FirstOrDefault(a => a.Code == _model.Origin);
        var d = Airports.FirstOrDefault(a => a.Code == _model.Destination);
        _originQuery = o is null ? "" : $"{o.Code} — {o.City}";
        _destQuery = d is null ? "" : $"{d.Code} — {d.City}";
    }

    // --- Form state ---
    private FlightSearchModel _model = new();
    private bool _showGroupPrompt;

    private void SetTripType(TripType t)
    {
        _model.TripType = t;

        // Ensure departure honors lead time
        if (!_model.DepartureDate.HasValue || _model.DepartureDate.Value.Date < MinDepartDate)
            _model.DepartureDate = MinDepartDate;

        if (t == TripType.OneWay)
        {
            _model.ReturnDate = null;
        }
        else
        {
            var minReturn = (_model.DepartureDate ?? MinDepartDate).Date;
            if (!_model.ReturnDate.HasValue || _model.ReturnDate.Value.Date < minReturn)
                _model.ReturnDate = minReturn.AddDays(1);
        }
    }

    private void OnPassengersChanged(ChangeEventArgs e)
    {
        var val = Convert.ToString(e.Value);
        if (string.Equals(val, "10+", StringComparison.OrdinalIgnoreCase))
        {
            _showGroupPrompt = true;
            // Keep Passengers at 9 (max online) so the form stays valid
            _model.Passengers = 9;
        }
        else if (int.TryParse(val, out var pax))
        {
            _model.Passengers = Math.Clamp(pax, 1, 9);
        }
    }

    private void ResetForm()
    {
        _model = new FlightSearchModel
        {
            DepartureDate = MinDepartDate,
            TripType = TripType.Return
        };
        _model.ReturnDate = _model.DepartureDate.Value.AddDays(1);

        _originQuery = "";
        _destQuery = "";
        _showGroupPrompt = false;
    }

    private void OnSubmit()
    {
        // You can push these as query params to your results page.
        // Example: Nav.NavigateTo($"/flights/results?trip={_model.TripType}&orig={_model.Origin}&dest={_model.Destination}&out={_model.DepartureDate:yyyy-MM-dd}&ret={_model.ReturnDate:yyyy-MM-dd}&cabin={_model.Cabin}&pax={_model.Passengers}");
        // For now, navigate to your existing demo results page or keep this placeholder:
        var ret = _model.TripType == TripType.Return ? $"&ret={_model.ReturnDate:yyyy-MM-dd}" : "";
        var url = $"/flights/results?trip={_model.TripType}&orig={_model.Origin}&dest={_model.Destination}&out={_model.DepartureDate:yyyy-MM-dd}{ret}&cabin={_model.Cabin}&pax={_model.Passengers}";
        Nav.NavigateTo(url);
    }

    private void OnDepartureChanged(ChangeEventArgs _)
    {
        // Re-clamp return date if needed
        if (_model.TripType == TripType.Return)
        {
            var minReturn = (_model.DepartureDate ?? MinDepartDate).Date;
            if (!_model.ReturnDate.HasValue || _model.ReturnDate.Value.Date < minReturn)
                _model.ReturnDate = minReturn.AddDays(1);
        }
    }

@* protected override async Task OnInitializedAsync()
{
    try
    {
        // --- merged from OnInitialized() ---
        if (_model.DepartureDate is null || _model.DepartureDate < MinDepartDate)
            _model.DepartureDate = MinDepartDate;

        if (_model.TripType == TripType.Return)
        {
            var minReturn = _model.DepartureDate ?? MinDepartDate;
            if (_model.ReturnDate is null || _model.ReturnDate < minReturn)
                _model.ReturnDate = minReturn.AddDays(1);
        }
        // -----------------------------------

        // Auth
        var authState = await AuthStateTask;
        var user = authState.User;

        if (user.Identity?.IsAuthenticated != true)
        {
            _username = "Anonymous";
            Nav.NavigateTo("/", replace: true);
            return;
        }

        _username = user.Identity?.Name ?? "Anonymous";

        // AvaUser lookup (isolate its failures)
        AvaUser? avaUser = null;
        try
        {
            avaUser = await AvaUserService.GetByEmailAsync(_username);
        }
        catch
        {
            // API/user service unreachable or errored
            Nav.NavigateTo("/service-unavailable", replace: true);
            return;
        }

        if (string.IsNullOrWhiteSpace(avaUser?.TravelPolicyId))
        {
            Nav.NavigateTo("/user-has-no-assigned-travelpolicyid-error", replace: true);
            return;
        }

        _travelPolicyId = avaUser.TravelPolicyId!;

        // --- load data from the API ---
        IReadOnlyList<AirportInfo>? dto;
        try
        {
            var url = "api/v1/kerneldata/airport-info/search-multi?type=MediumAirport&type=LargeAirport&country=AU&hasIata=true&hasMunicipality=true&skip=0&take=500";
            dto = await Api.GetFromJsonAsync<IReadOnlyList<AirportInfo>>(url);
        }
        catch
        {
            // Kernel data API down/unreachable
            Nav.NavigateTo("/service-unavailable", replace: true);
            return;
        }

        var mappedAirports = (dto ?? Array.Empty<AirportInfo>())
            .Select(x => new Airport(
                Code:  !string.IsNullOrWhiteSpace(x.IataCode)  ? x.IataCode.Trim().ToUpperInvariant()
                     : !string.IsNullOrWhiteSpace(x.GpsCode)   ? x.GpsCode.Trim().ToUpperInvariant()
                     : !string.IsNullOrWhiteSpace(x.LocalCode) ? x.LocalCode.Trim().ToUpperInvariant()
                     : (x.Ident ?? string.Empty).Trim().ToUpperInvariant(),
                City:  !string.IsNullOrWhiteSpace(x.Municipality) ? x.Municipality.Trim()
                     : (x.Name ?? string.Empty).Trim(),
                Name:  (x.Name ?? string.Empty).Trim()
            ))
            .Where(a => !string.IsNullOrEmpty(a.Code))
            .DistinctBy(a => a.Code)
            .OrderBy(a => a.City).ThenBy(a => a.Name)
            .ToList();

        _airports.Clear();
        _airports.AddRange(mappedAirports);
    }
    catch (OperationCanceledException)
    {
        // optional: ignore if a CTS was used and canceled
    }
    catch
    {
        // unexpected
        Nav.NavigateTo("/error", replace: true);
    }
} *@


    protected override async Task OnInitializedAsync()
    {
        // --- merged from OnInitialized() ---
        // Ensure default dates respect lead time
        if (_model.DepartureDate is null || _model.DepartureDate < MinDepartDate)
            _model.DepartureDate = MinDepartDate;

        if (_model.TripType == TripType.Return)
        {
            var minReturn = _model.DepartureDate ?? MinDepartDate;
            if (_model.ReturnDate is null || _model.ReturnDate < minReturn)
                _model.ReturnDate = minReturn.AddDays(1);
        }
        // -----------------------------------

        // --- original async auth/init ---
        var authState = await AuthStateTask;
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            _username = user.Identity.Name;

            // must have a travel policy to proceed
            var avaUser = await AvaUserService.GetByEmailAsync(_username);
            if (string.IsNullOrWhiteSpace(avaUser.TravelPolicyId))
            {
                Nav.NavigateTo("/user-has-no-assigned-travelpolicyid-error");
                return;
            }

            _travelPolicyId = avaUser.TravelPolicyId;
        }
        else
        {
            _username = "Anonymous";
            Nav.NavigateTo("/");
            return;
        }

        // --- load data from the API
        @* var jsonOpts = new JsonSerializerOptions(JsonSerializerDefaults.Web);
        jsonOpts.Converters.Add(new JsonStringEnumConverter());
        jsonOpts.Converters.Add(new JsonStringEnumMemberConverter()); *@
        var url = "api/v1/kerneldata/airport-info/search-multi?type=MediumAirport&type=LargeAirport&country=AU&hasIata=true&hasMunicipality=true&skip=0&take=500";
        @* var _dto = await Api.GetFromJsonAsync<IReadOnlyList<AirportInfo>>(url, jsonOpts) ?? Array.Empty<AirportInfo>(); *@
        var _dto = await Api.GetFromJsonAsync<IReadOnlyList<AirportInfo>>(url, JsonDefaults.WebEnums) ?? Array.Empty<AirportInfo>();

        var mappedAirports = _dto.Select(x => new Airport(
            Code:  !string.IsNullOrWhiteSpace(x.IataCode)  ? x.IataCode.Trim().ToUpperInvariant()
                 : !string.IsNullOrWhiteSpace(x.GpsCode)   ? x.GpsCode.Trim().ToUpperInvariant()
                 : !string.IsNullOrWhiteSpace(x.LocalCode) ? x.LocalCode.Trim().ToUpperInvariant()
                 : (x.Ident ?? "").Trim().ToUpperInvariant(),
            City:  !string.IsNullOrWhiteSpace(x.Municipality) ? x.Municipality.Trim()
                 : (x.Name ?? "").Trim(),
            Name:  (x.Name ?? "").Trim()
        ))
        .Where(a => !string.IsNullOrEmpty(a.Code))
        .DistinctBy(a => a.Code)
        .OrderBy(a => a.City).ThenBy(a => a.Name)
        .ToList();

        // <<< This is where your lines go
        _airports.Clear();
        _airports.AddRange(mappedAirports);
    }


    private void GoToPolicy(string? policyId)
    {
        if (!string.IsNullOrWhiteSpace(_travelPolicyId))
        {
            Nav.NavigateTo($"/admin/policies/travel/{_travelPolicyId}"); //?returnPath=/admin/policies/travel/juY9T9sIYx3Tbbylp4jCg/list");
            return;
        }
    }
}
