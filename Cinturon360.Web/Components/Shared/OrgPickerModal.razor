@using Microsoft.AspNetCore.Components.Web
@using Cinturon360.Shared.Services.Interfaces.Platform
@using Cinturon360.Shared.Models.Static.Platform
@using OrgDto = Cinturon360.Shared.Services.Interfaces.Platform.IAdminOrgServiceUnified.OrganizationPickerDto

@inject IAdminOrgServiceUnified OrgService

@if (_show)
{
    <div class="modal fade show" style="display:block;" tabindex="-1" aria-modal="true" role="dialog" aria-labelledby="orgPickerTitle">
        <div class="modal-dialog modal-lg modal-dialog-scrollable">
            <div class="modal-content">

                <div class="modal-header">
                    <h5 id="orgPickerTitle" class="modal-title mb-0">@(_title ?? "Select Organization")</h5>
                    <button type="button" class="btn-close" @onclick="Close" aria-label="Close"></button>
                </div>

                <div class="modal-body">

                    @if (!string.IsNullOrWhiteSpace(_error))
                    {
                        <div class="alert alert-danger d-flex align-items-center" role="alert">
                            <i class="bi bi-x-circle-fill fs-5 me-2"></i>
                            <div>@_error</div>
                        </div>
                    }

                    <!-- Search row -->
                    <div class="row g-3 align-items-end mb-3">
                        <!-- Search (live) -->
                        <div class="col-12 col-lg-6">
                            <label class="form-label" for="orgSearch">Search (any field)</label>
                            <input id="orgSearch"
                                   class="form-control"
                                   placeholder="Start typing…"
                                   @bind-value="Query"
                                   @bind-value:event="oninput"
                                   @onkeydown="OnSearchKeyDown" />
                        </div>

                        <!-- Type (live filter) -->
                        <div class="col-auto">
                            <label class="form-label" for="orgType">Type</label>
                            <InputSelect id="orgType" class="form-select" @bind-Value="TypeFilter" TValue="OrganizationType?">
                                <option value="">All types</option>
                                @foreach (var t in Enum.GetValues<OrganizationType>())
                                {
                                    <option value="@t">@t</option>
                                }
                            </InputSelect>
                        </div>

                        <!-- Actions -->
                        <div class="col-auto d-grid">
                            <label class="form-label d-block">&nbsp;</label>
                            <button type="button" class="btn btn-outline-secondary" @onclick="ClearFilters" disabled="@_busy">
                                Clear
                            </button>
                        </div>

                        <!-- Page size (pinned right on lg+) -->
                        <div class="col-12 col-lg-auto ms-lg-auto text-lg-end">
                            <label class="form-label me-2">Page size</label>
                            <select class="form-select d-inline-block" style="width: 6.5rem" @bind="PageSize">
                                @foreach (var ps in new[] { 10, 20, 50, 100 })
                                {
                                    <option value="@ps">@ps</option>
                                }
                            </select>
                        </div>
                    </div>

                    <!-- Results -->
                    <div class="list-group">
                        @if (_busy && _view.Count == 0)
                        {
                            <div class="text-muted small">Loading…</div>
                        }
                        else if (_view.Count == 0)
                        {
                            <div class="text-muted small">No results.</div>
                        }
                        else
                        {
                            @foreach (var r in PagedResults())
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                    <div class="me-3">
                                        <div>
                                            <strong>@r.Name</strong>
                                            <span class="text-muted"> @r.Country</span>
                                            <span class="text-muted"> @(r.IsActive ? "Active" : "Inactive")</span>
                                            <code class="ms-2">@r.Id</code>
                                        </div>
                                    </div>
                                    <button type="button" class="btn btn-sm btn-outline-primary" @onclick="() => Select(r)">Assign</button>
                                </div>
                            }
                        }
                    </div>

                    <!-- Pager -->
                    @if (_view.Count > 0 && _totalPages > 1)
                    {
                        <nav class="mt-3" aria-label="Org picker pagination">
                            <ul class="pagination mb-0 justify-content-center">
                                <li class="page-item @(_page == 1 ? "disabled" : null)">
                                    <button class="page-link" @onclick="() => GoToPage(_page - 1)">Previous</button>
                                </li>
                                @for (var i = 1; i <= _totalPages; i++)
                                {
                                    <li class="page-item @(i == _page ? "active" : null)">
                                        <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                                    </li>
                                }
                                <li class="page-item @(_page == _totalPages ? "disabled" : null)">
                                    <button class="page-link" @onclick="() => GoToPage(_page + 1)">Next</button>
                                </li>
                            </ul>
                        </nav>
                    }
                </div>

                <div class="modal-footer d-flex justify-content-end gap-2" style="border-top:0;">
                    <button class="btn btn-outline-secondary" @onclick="Cancel">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    // -------- Public API --------
    public async Task<OrgDto?> OpenAsync(
        string? excludeOrgId = null,
        string? title = null,
        OrganizationType? typePreset = null)
    {
        _excludeOrgId = excludeOrgId;
        _title = title;
        TypeFilter = typePreset; // property triggers ApplyFilter
        Query = null;

        _show = true;
        StateHasChanged();

        _tcs = new TaskCompletionSource<OrgDto?>();

        await LoadAllAsync();  // fresh load each time (switch to cache if you want)
        ApplyFilter();

        return await _tcs.Task;
    }

    public async Task<string?> OpenForIdAsync(
        string? excludeOrgId = null,
        string? title = null,
        OrganizationType? typePreset = null)
    {
        var picked = await OpenAsync(excludeOrgId, title, typePreset);
        return picked?.Id;
    }

    // -------- State --------
    private bool _show;
    private bool _busy;
    private string? _error;
    private string? _title;
    private string? _excludeOrgId;

    private TaskCompletionSource<OrgDto?>? _tcs;

    // Full set from DB; filtered view for display
    private List<OrgDto> _all = new();
    private List<OrgDto> _view = new();

    // Filters (properties trigger ApplyFilter)
    private string? _queryBacking;
    private string? Query
    {
        get => _queryBacking;
        set { if (_queryBacking != value) { _queryBacking = value; ApplyFilter(); } }
    }

    private OrganizationType? _typeFilterBacking;
    private OrganizationType? TypeFilter
    {
        get => _typeFilterBacking;
        set { if (_typeFilterBacking != value) { _typeFilterBacking = value; ApplyFilter(); } }
    }

    // Paging
    private int _pageSizeBacking = 20;
    private int PageSize
    {
        get => _pageSizeBacking;
        set { if (_pageSizeBacking != value) { _pageSizeBacking = value; GoToPage(1); } }
    }
    private int _page = 1;
    private int _totalPages = 1;

    // -------- Behaviors --------
    private async Task LoadAllAsync()
    {
        try
        {
            _busy = true;
            _error = null;

            var list = await OrgService.GetAllForPickerAsync();
            _all = list.OrderBy(o => o.Name).ThenBy(o => o.Id).ToList();
        }
        catch (Exception ex)
        {
            _error = ex.GetBaseException().Message;
            _all = new();
        }
        finally
        {
            _busy = false;
        }
    }

    private void ApplyFilter()
    {
        IEnumerable<OrgDto> q = _all;

        if (!string.IsNullOrWhiteSpace(_excludeOrgId))
            q = q.Where(o => o.Id != _excludeOrgId);

        if (TypeFilter.HasValue)
            q = q.Where(o => o.Type == TypeFilter.Value);

        var text = (Query ?? string.Empty).Trim();
        if (text.Length > 0)
        {
            q = q.Where(o =>
                   o.Id.Contains(text, StringComparison.OrdinalIgnoreCase)
                || o.Name.Contains(text, StringComparison.OrdinalIgnoreCase)
                || o.Country.Contains(text, StringComparison.OrdinalIgnoreCase)
                || (o.TaxId?.Contains(text, StringComparison.OrdinalIgnoreCase) ?? false)
                || (o.ContactPersonFirstName?.Contains(text, StringComparison.OrdinalIgnoreCase) ?? false)
                || (o.ContactPersonLastName?.Contains(text, StringComparison.OrdinalIgnoreCase) ?? false)
                || (o.ContactPersonEmail?.Contains(text, StringComparison.OrdinalIgnoreCase) ?? false)
                || (o.ContactPersonPhone?.Contains(text, StringComparison.OrdinalIgnoreCase) ?? false)
                || (o.BillingPersonFirstName?.Contains(text, StringComparison.OrdinalIgnoreCase) ?? false)
                || (o.BillingPersonLastName?.Contains(text, StringComparison.OrdinalIgnoreCase) ?? false)
                || (o.BillingPersonEmail?.Contains(text, StringComparison.OrdinalIgnoreCase) ?? false)
                || (o.BillingPersonPhone?.Contains(text, StringComparison.OrdinalIgnoreCase) ?? false)
                || (o.AdminPersonFirstName?.Contains(text, StringComparison.OrdinalIgnoreCase) ?? false)
                || (o.AdminPersonLastName?.Contains(text, StringComparison.OrdinalIgnoreCase) ?? false)
                || (o.AdminPersonEmail?.Contains(text, StringComparison.OrdinalIgnoreCase) ?? false)
                || (o.AdminPersonPhone?.Contains(text, StringComparison.OrdinalIgnoreCase) ?? false)
                || o.Type.ToString().Contains(text, StringComparison.OrdinalIgnoreCase)
                || (o.IsActive ? "active" : "inactive").Contains(text, StringComparison.OrdinalIgnoreCase)
            );
        }

        _view = q.OrderBy(o => o.Name).ThenBy(o => o.Id).ToList();

        _page = 1;
        ComputeTotals();
        StateHasChanged();
    }

    private IEnumerable<OrgDto> PagedResults()
        => _view.Skip((_page - 1) * _pageSizeBacking).Take(_pageSizeBacking);

    private void GoToPage(int p)
    {
        if (p < 1) p = 1;
        if (p > _totalPages) p = _totalPages;
        _page = p;
    }

    private void ComputeTotals()
    {
        _totalPages = Math.Max(1, (int)Math.Ceiling(_view.Count / (double)_pageSizeBacking));
        if (_page > _totalPages) _page = _totalPages;
    }

    private void OnSearchKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            ApplyFilter(); // already live, but keeps UX parity
        }
    }

    private void ClearFilters()
    {
        Query = null;
        TypeFilter = null;
        // ApplyFilter() is called by the setters above.
    }

    private void Select(OrgDto dto)
    {
        _tcs?.TrySetResult(dto);
        Close();
    }

    private void Cancel()
    {
        _tcs?.TrySetResult(null);
        Close();
    }

    private void Close()
    {
        _show = false;
        StateHasChanged();
    }
}
