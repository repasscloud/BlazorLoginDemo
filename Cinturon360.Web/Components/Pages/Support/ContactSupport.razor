@page "/support/contact"
@rendermode InteractiveServer
@attribute [Authorize]
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Claims
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.WebUtilities

@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Nav

<CascadingAuthenticationState>
    @if (!_isAuthChecked)
    {
        <div class="container py-5">
            <div class="text-center">
                <div class="spinner-border" role="status" aria-hidden="true"></div>
                <div class="mt-3">Loading…</div>
            </div>
        </div>
    }
    else if (!_isAuthenticated)
    {
        <div class="container py-5">
            <div class="alert alert-warning">
                <h5 class="alert-heading mb-2">Sign in required</h5>
                <p class="mb-0">You must be signed in to contact support.</p>
            </div>
        </div>
    }
    else
    {
        <div class="container py-4">
            <div class="row justify-content-center">
                <div class="col-lg-9">
                    <div class="card">
                        <div class="card-header">Contact Support</div>

                        <div class="card-body">
                            <EditForm Model="_vm" OnValidSubmit="SubmitAsync">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <label class="form-label" for="userId">User ID</label>
                                        <InputText id="userId" class="form-control bg-light" @bind-Value="_vm.UserId" readonly />
                                        <div class="form-text">Auto-detected from your session if available.</div>
                                    </div>

                                    <div class="col-md-6">
                                        <label class="form-label" for="orgId">Organization ID</label>
                                        <InputText id="orgId" class="form-control bg-light" @bind-Value="_vm.OrgId" readonly />
                                        <div class="form-text">Optional. Include if relevant to your request.</div>
                                    </div>

                                    <div class="col-12">
                                        <label class="form-label" for="subject">Subject</label>
                                        <InputText id="subject" class="form-control" @bind-Value="_vm.Subject" />
                                    </div>

                                    <div class="col-md-4">
                                        <label class="form-label" for="categoryGroup">Category Group</label>
                                        <InputSelect id="categoryGroup"
                                                    class="form-select"
                                                    @bind-Value="_selectedCategoryGroup"
                                                    @onchange="OnCategoryGroupChanged">
                                            <option value="@DefaultGroupKey">— Select Category Group —</option>
                                            @foreach (var g in _categoryGroups)
                                            {
                                                <option value="@g.Key">@g.Label</option>
                                            }
                                        </InputSelect>
                                    </div>

                                    <!-- SubCategory -->
                                    <div class="col-md-4">
                                        <label class="form-label" for="subcategory">Sub-Category</label>
                                        <InputSelect id="subcategory" class="form-select" @bind-Value="_vm.Category">
                                            <option value="@NoSubcatValue">— Select Sub-Category —</option>
                                            @foreach (var item in SubcategoriesForSelected)
                                            {
                                                <option value="@item.Value">@item.Label</option>
                                            }
                                        </InputSelect>
                                        <div class="form-text">
                                            Sub-category is applied only if it belongs to the chosen group.
                                        </div>
                                    </div>

                                    <div class="col-md-4">
                                        <label class="form-label" for="priority">Priority</label>
                                        <InputSelect id="priority" class="form-select" @bind-Value="_vm.Priority">
                                            @foreach (var p in _priorities)
                                            {
                                                <option value="@p.Value">@p.Label</option>
                                            }
                                        </InputSelect>
                                    </div>

                                    <div class="col-12">
                                        <label class="form-label" for="description">Description</label>
                                        <InputTextArea id="description" class="form-control" rows="6" @bind-Value="_vm.Description" />
                                    </div>

                                    <div class="col-12">
                                        <div class="form-check">
                                            <InputCheckbox id="diag" class="form-check-input" @bind-Value="_vm.IncludeDiagnostics" />
                                            <label class="form-check-label" for="diag">Include diagnostics</label>
                                        </div>
                                        <div class="form-text">
                                            Attaches non-sensitive client info such as browser, route, and timestamps.
                                        </div>
                                    </div>

                                    <div class="col-md-6">
                                        <label class="form-label" for="callbackEmail">Callback Email</label>
                                        <InputText id="callbackEmail" class="form-control" @bind-Value="_vm.CallbackEmail" />
                                    </div>

                                    <div class="col-md-6">
                                        <label class="form-label" for="pageUrl">Related URL</label>
                                        <InputText id="pageUrl" class="form-control" @bind-Value="_vm.PageUrl" />
                                        <div class="form-text">
                                            Filled from <code>relatedurl</code> or <code>pageUrl</code> query string.
                                        </div>
                                    </div>

                                    <div class="col-12">
                                        <label class="form-label">Attachments (screenshots, logs)</label>
                                        <InputFile OnChange="OnFilesSelected" multiple />
                                        @if (_files.Count > 0)
                                        {
                                            <ul class="list-group list-group-flush mt-2">
                                                @foreach (var f in _files)
                                                {
                                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                                        <span class="text-truncate" style="max-width: 70%;">
                                                            @f.Name (@(FormatSize(f.Size)))
                                                        </span>
                                                        <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => RemoveFile(f)">Remove</button>
                                                    </li>
                                                }
                                            </ul>
                                        }
                                    </div>
                                </div>

                                <div class="mt-4 d-flex gap-2">
                                    <button type="submit" class="btn btn-primary" disabled="_isSubmitting">
                                        @if (_isSubmitting)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        }
                                        Submit Ticket
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary" @onclick="Back">Cancel</button>
                                </div>
                            </EditForm>
                        </div>

                        <div class="card-footer text-muted small">
                            Query keys are case-insensitive. <code>+</code> treated as space. SubCategory applied only if it belongs to the chosen Category Group.
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</CascadingAuthenticationState>

@code {
    [Parameter, SupplyParameterFromQuery(Name = "pageUrl")]
    public string? IncomingPageUrl { get; set; }

    private bool _isAuthChecked;
    private bool _isAuthenticated;
    private bool _isSubmitting;

    private record DropdownOption(string Value, string Label);
    private const string DefaultGroupKey = "none";
    private const string NoSubcatValue  = "no-cat";

    // Group container
    private sealed record CategoryGroup(string Key, string Label, DropdownOption[] Items);

    // Top-level category groups (short labels); subcats are the real saved values.
    private readonly CategoryGroup[] _categoryGroups =
    [
        new(DefaultGroupKey, "Uncategorized", new[]
        {
            new DropdownOption(NoSubcatValue, "— None —"),
        }),

        new("platform", "Platform / UI", new[]
        {
            new DropdownOption("ui-bug",              "UI / Rendering Bug"),
            new DropdownOption("nav-routing",         "Navigation / Routing"),
            new DropdownOption("auth-session",        "Authentication / Session"),
            new DropdownOption("perf-slow",           "Performance / Slowness"),
            new DropdownOption("accessibility",       "Accessibility"),
        }),

        new("data", "Data / Integrations", new[]
        {
            new DropdownOption("import-export",       "Import / Export"),
            new DropdownOption("integration-api",     "API / Integration"),
            new DropdownOption("reporting-analytics", "Reporting / Analytics"),
            new DropdownOption("db-migration",        "DB Migration / Schema"),
        }),

        new("tmc", "TMC / Travel", new[]
        {
            new DropdownOption("policy",              "Travel Policy"),
            new DropdownOption("quote",               "Travel Quote"),
            new DropdownOption("booking",             "Booking"),
            new DropdownOption("region-country",      "Region / Country / Taxonomy"),
        }),

        new("commercial","Vendor / Commercial", new[]
        {
            new DropdownOption("supplier-onboarding",     "Supplier / Vendor Onboarding"),
            new DropdownOption("licensing-entitlements",  "Licensing / Seats / Entitlements"),
        }),

        new("finance",   "Billing / Finance", new[]
        {
            new DropdownOption("billing-inquiry",  "Billing Inquiry"),
            new DropdownOption("invoice-receipt",  "Invoice / Receipt Request"),
            new DropdownOption("payment-issue",    "Payment Issue / Refund"),
            new DropdownOption("contract-po",      "Contract / PO / Order"),
            new DropdownOption("pricing-quote",    "Pricing / Quote"),
        })
    ];

    private string _selectedCategoryGroup = DefaultGroupKey;

    // Filtered subcategory list for column 2
    private IEnumerable<DropdownOption> SubcategoriesForSelected =>
        _categoryGroups.FirstOrDefault(g => g.Key == _selectedCategoryGroup)?.Items
        ?? Array.Empty<DropdownOption>();

    // Ensure subcategory (_vm.Category) is valid for the chosen group
    private void OnCategoryGroupChanged(ChangeEventArgs _)
    {
        if (!SubcategoriesForSelected.Any(i => string.Equals(i.Value, _vm.Category, StringComparison.OrdinalIgnoreCase)))
            _vm.Category = NoSubcatValue; // reset to sentinel if current value not in this group
    }

    private readonly DropdownOption[] _priorities =
    [
        new DropdownOption("low", "Low"),
        new DropdownOption("normal", "Normal"),
        new DropdownOption("high", "High"),
        new DropdownOption("urgent", "Urgent")
    ];

    private TicketVm _vm = new();

    // Keep files in memory for now; wire to your API when ready
    private List<IBrowserFile> _files = new();

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = auth.User;

        _isAuthenticated = user.Identity?.IsAuthenticated == true;
        _isAuthChecked = true;

        if (_isAuthenticated)
        {
            _vm.UserId ??= user.Identity?.Name
                ?? GetFirstClaim(user, ClaimTypes.NameIdentifier)
                ?? GetFirstClaim(user, ClaimTypes.Email);

            _vm.CallbackEmail ??= GetFirstClaim(user, ClaimTypes.Email);
        }
    }

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrWhiteSpace(IncomingPageUrl))
        {
            _vm.PageUrl = IncomingPageUrl;
        }
        ApplyQueryDefaults();
    }

    private void ApplyQueryDefaults()
    {
        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        if (string.IsNullOrEmpty(uri.Query))
            return;

        var q = QueryHelpers.ParseQuery(uri.Query);

        string? Get(string key)
        {
            foreach (var kv in q)
                if (string.Equals(kv.Key, key, StringComparison.OrdinalIgnoreCase))
                    return kv.Value.ToString();
            return null;
        }

        static string Clean(string? s) =>
            string.IsNullOrWhiteSpace(s) ? string.Empty : s.Replace('+', ' ').Trim();

        // Subject
        var message = Get("message");
        if (!string.IsNullOrWhiteSpace(message) && string.IsNullOrWhiteSpace(_vm.Subject))
            _vm.Subject = Clean(message);

        // Category group match by key or label
        var cat = Get("category");
        string? matchedGroupKey = null;
        if (!string.IsNullOrWhiteSpace(cat))
        {
            var c = Clean(cat);
            matchedGroupKey = _categoryGroups
                .FirstOrDefault(g =>
                    string.Equals(g.Key, c, StringComparison.OrdinalIgnoreCase) ||
                    g.Label.Contains(c, StringComparison.OrdinalIgnoreCase))?.Key;

            if (!string.IsNullOrWhiteSpace(matchedGroupKey))
                _selectedCategoryGroup = matchedGroupKey!;
        }

        // Subcategory only if category matched and the subcategory belongs to it
        var sub = Get("subcategory");
        if (!string.IsNullOrWhiteSpace(sub) && !string.IsNullOrWhiteSpace(matchedGroupKey))
        {
            var s = Clean(sub);
            var match = _categoryGroups
                .FirstOrDefault(g => g.Key == matchedGroupKey)
                ?.Items
                .FirstOrDefault(i =>
                    string.Equals(i.Value, s, StringComparison.OrdinalIgnoreCase) ||
                    i.Label.Contains(s, StringComparison.OrdinalIgnoreCase));

            if (match is not null)
                _vm.Category = match.Value; // canonical subcategory value
            // else: skip per requirement
        }

        // Priority mapping by value or label
        var pr = Get("priority");
        if (!string.IsNullOrWhiteSpace(pr) && string.IsNullOrWhiteSpace(_vm.Priority))
        {
            var p = Clean(pr);
            var pm = _priorities.FirstOrDefault(i =>
                        string.Equals(i.Value, p, StringComparison.OrdinalIgnoreCase) ||
                        i.Label.Contains(p, StringComparison.OrdinalIgnoreCase));
            if (pm is not null) _vm.Priority = pm.Value;
        }

        // Related URL: prefer relatedurl, else alias pageUrl if not already set
        var relatedUrl = Get("relatedurl");
        if (!string.IsNullOrWhiteSpace(relatedUrl) && string.IsNullOrWhiteSpace(_vm.PageUrl))
            _vm.PageUrl = Clean(relatedUrl);

        var pageUrl = Get("pageUrl");
        if (string.IsNullOrWhiteSpace(_vm.PageUrl) && !string.IsNullOrWhiteSpace(pageUrl))
            _vm.PageUrl = Clean(pageUrl);

        // Description
        var desc = Get("description");
        if (!string.IsNullOrWhiteSpace(desc) && string.IsNullOrWhiteSpace(_vm.Description))
            _vm.Description = Clean(desc);
    }

    private async Task SubmitAsync()
    {
        _isSubmitting = true;
        try
        {
            // TODO: Build a multipart/form-data request to your backend:
            //  - Fields from _vm
            //  - _userId, _orgId
            //  - Files from _files (use IBrowserFile.OpenReadStream() and StreamContent)
            await Task.Delay(600); // placeholder
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private void Back() => Nav.NavigateTo(Nav.Uri, forceLoad: false);

    private void OnFilesSelected(InputFileChangeEventArgs e)
    {
        foreach (var f in e.GetMultipleFiles())
            _files.Add(f);
    }

    private void RemoveFile(IBrowserFile f) => _files.Remove(f);

    private static string? GetFirstClaim(ClaimsPrincipal user, string type) =>
        user.Claims.FirstOrDefault(c => c.Type == type)?.Value;

    private static string FormatSize(long bytes)
    {
        string[] units = ["B","KB","MB","GB","TB"];
        double size = bytes;
        int unit = 0;
        while (size >= 1024 && unit < units.Length - 1)
        {
            size /= 1024;
            unit++;
        }
        return $"{size:0.##} {units[unit]}";
    }

    class TicketVm
    {
        public string? Subject { get; set; }
        public string Category { get; set; } = "bug";        // holds subcategory value
        public string Priority { get; set; } = "normal";
        public string? Description { get; set; }

        public bool IncludeDiagnostics { get; set; } = true;
        [EmailAddress] public string? CallbackEmail { get; set; }
        public string? PageUrl { get; set; }

        public string? UserId { get; set; }
        public string? OrgId  { get; set; }
    }
}
