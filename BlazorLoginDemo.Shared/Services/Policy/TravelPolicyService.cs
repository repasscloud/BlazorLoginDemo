using BlazorLoginDemo.Shared.Services.Interfaces.Kernel;
using BlazorLoginDemo.Shared.Services.Interfaces.Policy;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;

namespace BlazorLoginDemo.Shared.Services.Policy;

public sealed class TravelPolicyService : ITravelPolicyService
{
    private readonly ApplicationDbContext _db;
    private readonly ILoggerService _logger;

    public TravelPolicyService(ApplicationDbContext db, ILoggerService logger)
    {
        _db = db;
        _logger = logger;
    }

    // -----------------------------
    // CREATE
    // -----------------------------
    public async Task<TravelPolicy> CreateAsync(TravelPolicy policy, CancellationToken ct = default)
    {
        if (policy is null) throw new ArgumentNullException(nameof(policy));
        if (string.IsNullOrWhiteSpace(policy.OrganizationUnifiedId))
            throw new ArgumentException("OrganizationUnifiedId must be provided.", nameof(policy));
        if (string.IsNullOrWhiteSpace(policy.PolicyName))
            throw new ArgumentException("PolicyName must be provided.", nameof(policy));
        if (string.IsNullOrWhiteSpace(policy.DefaultCurrencyCode))
            throw new ArgumentException("DefaultCurrencyCode must be provided.", nameof(policy));

        // Ensure ID present (policy.Id is generated by the model by default, but be defensive)
        if (string.IsNullOrWhiteSpace(policy.Id))
            policy.Id = NanoidDotNet.Nanoid.Generate(NanoidDotNet.Nanoid.Alphabets.LettersAndDigits.ToUpper(), 14);

        // NormalizeAirlineCodes(policy);
        NormalizePolicyLists(policy);

        // verify org exists
        var orgExists = await _db.Organizations.AsNoTracking().AnyAsync(o => o.Id == policy.OrganizationUnifiedId, ct);
        if (!orgExists) throw new InvalidOperationException($"Organization '{policy.OrganizationUnifiedId}' not found.");

        await _logger.LogInfoAsync($"Creating TravelPolicy '{policy.PolicyName}' for Org '{policy.OrganizationUnifiedId}'");

        await _db.TravelPolicies.AddAsync(policy, ct);
        await _db.SaveChangesAsync(ct);
        return policy;
    }

    public async Task<TravelPolicy> CreateDefaultAsync(TravelPolicy policy, CancellationToken ct = default)
        => await CreateAsync(policy, ct);

    // -----------------------------
    // READ
    // -----------------------------
    public async Task<TravelPolicy?> GetByIdAsync(string id, CancellationToken ct = default)
        => await _db.TravelPolicies
            .AsNoTracking()
            .Include(x => x.Regions)
            .Include(x => x.Continents)
            .Include(x => x.Countries)
            .Include(x => x.DisabledCountries)
            .FirstOrDefaultAsync(x => x.Id == id, ct);

    public async Task<IReadOnlyList<TravelPolicy>> GetAllAsync(CancellationToken ct = default)
        => await _db.TravelPolicies
            .AsNoTracking()
            .OrderBy(x => x.OrganizationUnifiedId)
            .ThenBy(x => x.PolicyName)
            .ToListAsync(ct);

    public async Task<IReadOnlyList<TravelPolicy>> GetForOrganizationAsync(string organizationId, CancellationToken ct = default)
    {
        if (string.IsNullOrWhiteSpace(organizationId)) return Array.Empty<TravelPolicy>();
        return await _db.TravelPolicies
            .AsNoTracking()
            .Where(x => x.OrganizationUnifiedId == organizationId)
            .OrderBy(x => x.PolicyName)
            .ToListAsync(ct);
    }

    // -----------------------------
    // UPDATE (replace whole object)
    // -----------------------------
    public async Task<TravelPolicy> UpdateAsync(TravelPolicy policy, CancellationToken ct = default)
    {
        if (policy is null) throw new ArgumentNullException(nameof(policy));
        if (string.IsNullOrWhiteSpace(policy.Id))
            throw new ArgumentException("Id must be provided for update.", nameof(policy));
        if (string.IsNullOrWhiteSpace(policy.OrganizationUnifiedId))
            throw new ArgumentException("OrganizationUnifiedId must be provided.", nameof(policy));
        if (string.IsNullOrWhiteSpace(policy.PolicyName))
            throw new ArgumentException("PolicyName must be provided.", nameof(policy));
        if (string.IsNullOrWhiteSpace(policy.DefaultCurrencyCode))
            throw new ArgumentException("DefaultCurrencyCode must be provided.", nameof(policy));

        // verify org exists
        var orgExists = await _db.Organizations.AsNoTracking().AnyAsync(o => o.Id == policy.OrganizationUnifiedId, ct);
        if (!orgExists) throw new InvalidOperationException($"Organization '{policy.OrganizationUnifiedId}' not found.");

        // NormalizeAirlineCodes(policy);
        NormalizePolicyLists(policy);

        _db.Attach(policy);
        _db.Entry(policy).State = EntityState.Modified;

        await _db.SaveChangesAsync(ct);
        return policy;
    }

    // -----------------------------
    // DELETE
    // -----------------------------
    public async Task<bool> DeleteAsync(string id, CancellationToken ct = default)
    {
        var existing = await _db.TravelPolicies.FindAsync([id], ct);
        if (existing is null) return false;

        _db.TravelPolicies.Remove(existing);
        await _db.SaveChangesAsync(ct);
        return true;
    }

    // -----------------------------
    // UTIL
    // -----------------------------
    public async Task<bool> ExistsAsync(string id, CancellationToken ct = default)
        => await _db.TravelPolicies.AsNoTracking().AnyAsync(x => x.Id == id, ct);

    // -----------------------------
    // RESOLUTION (countries only for UI)
    // -----------------------------
    public async Task<IReadOnlyList<Country>> ResolveAllowedCountriesAsync(string policyId, CancellationToken ct = default)
    {
        var tp = await _db.TravelPolicies
            .Include(p => p.Countries)
            .Include(p => p.Continents).ThenInclude(c => c.Countries)
            .Include(p => p.Regions).ThenInclude(r => r.Continents).ThenInclude(c => c.Countries)
            .Include(p => p.DisabledCountries)
            .FirstOrDefaultAsync(p => p.Id == policyId, ct)
            ?? throw new InvalidOperationException($"TravelPolicy '{policyId}' not found");

        var union = new HashSet<int>();
        foreach (var c in tp.Countries) union.Add(c.Id);
        foreach (var cont in tp.Continents)
            foreach (var c in cont.Countries) union.Add(c.Id);
        foreach (var reg in tp.Regions)
            foreach (var cont in reg.Continents)
                foreach (var c in cont.Countries) union.Add(c.Id);

        foreach (var dc in tp.DisabledCountries)
            union.Remove(dc.CountryId);

        return await _db.Countries
            .Where(c => union.Contains(c.Id))
            .OrderBy(c => c.Name)
            .ToListAsync(ct);
    }

    // -----------------------------
    // Helpers
    // -----------------------------
    private static void NormalizeAirlineCodes(TravelPolicy policy)
    {
        policy.IncludedAirlineCodes = (policy.IncludedAirlineCodes ?? Array.Empty<string>())
            .Where(s => !string.IsNullOrWhiteSpace(s))
            .Select(s => s.Trim().ToUpperInvariant())
            .Distinct()
            .ToArray();

        policy.ExcludedAirlineCodes = (policy.ExcludedAirlineCodes ?? Array.Empty<string>())
            .Where(s => !string.IsNullOrWhiteSpace(s))
            .Select(s => s.Trim().ToUpperInvariant())
            .Distinct()
            .Except(policy.IncludedAirlineCodes)
            .ToArray();
    }

    private static void NormalizePolicyLists(TravelPolicy policy)
    {
        // Generic cleaners
        static string[] Clean(string[]? arr) =>
            (arr ?? Array.Empty<string>())
                .Where(s => !string.IsNullOrWhiteSpace(s))
                .Select(s => s.Trim().ToUpperInvariant())
                .Distinct()
                .ToArray();

        static (string[] inc, string[] exc) CleanIncludeExclude(string[]? inc, string[]? exc)
        {
            var included = Clean(inc);
            var excluded = Clean(exc).Except(included).ToArray();
            return (included, excluded);
        }

        // Flights
        (policy.IncludedAirlineCodes, policy.ExcludedAirlineCodes) =
            CleanIncludeExclude(policy.IncludedAirlineCodes, policy.ExcludedAirlineCodes);

        // Accommodation
        (policy.IncludedHotelChains, policy.ExcludedHotelChains) =
            CleanIncludeExclude(policy.IncludedHotelChains, policy.ExcludedHotelChains);

        // Taxi / Ride-hail
        (policy.IncludedTaxiVendors, policy.ExcludedTaxiVendors) =
            CleanIncludeExclude(policy.IncludedTaxiVendors, policy.ExcludedTaxiVendors);

        // Train
        (policy.IncludedRailOperators, policy.ExcludedRailOperators) =
            CleanIncludeExclude(policy.IncludedRailOperators, policy.ExcludedRailOperators);

        // Hire car
        policy.AllowedCarHireClasses = Clean(policy.AllowedCarHireClasses);
        (policy.IncludedCarHireVendors, policy.ExcludedCarHireVendors) =
            CleanIncludeExclude(policy.IncludedCarHireVendors, policy.ExcludedCarHireVendors);

        // Bus / Coach
        (policy.IncludedBusOperators, policy.ExcludedBusOperators) =
            CleanIncludeExclude(policy.IncludedBusOperators, policy.ExcludedBusOperators);

        // SIM / eSIM
        (policy.IncludedSimVendors, policy.ExcludedSimVendors) =
            CleanIncludeExclude(policy.IncludedSimVendors, policy.ExcludedSimVendors);

        // Holiday activity
        (policy.IncludedActivityProviders, policy.ExcludedActivityProviders) =
            CleanIncludeExclude(policy.IncludedActivityProviders, policy.ExcludedActivityProviders);
    }
}
