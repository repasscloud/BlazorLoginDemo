using BlazorLoginDemo.Shared.Services.Interfaces.Policy;
using Microsoft.EntityFrameworkCore;

namespace BlazorLoginDemo.Shared.Services.Policies;

public sealed class TravelPolicyService : ITravelPolicyService
{
    private readonly ApplicationDbContext _db;

    public TravelPolicyService(ApplicationDbContext db) => _db = db;

    // -----------------------------
    // CREATE
    // -----------------------------
    public async Task<TravelPolicy> CreateAsync(TravelPolicy policy, CancellationToken ct = default)
    {
        if (policy is null) throw new ArgumentNullException(nameof(policy));
        if (string.IsNullOrWhiteSpace(policy.AvaClientId))
            throw new ArgumentException("AvaClientId must be provided.", nameof(policy));
        if (string.IsNullOrWhiteSpace(policy.PolicyName))
            throw new ArgumentException("PolicyName must be provided.", nameof(policy));
        if (string.IsNullOrWhiteSpace(policy.DefaultCurrencyCode))
            throw new ArgumentException("DefaultCurrencyCode must be provided.", nameof(policy));

        // Ensure ID present (policy.Id is generated by the model by default, but be defensive)
        if (string.IsNullOrWhiteSpace(policy.Id))
            policy.Id = NanoidDotNet.Nanoid.Generate(NanoidDotNet.Nanoid.Alphabets.LettersAndDigits.ToUpper(), 14);

        NormalizeAirlineCodes(policy);

        // find the existing AvaClient to update it now
        var client = await _db.AvaClients.FirstOrDefaultAsync(x => x.Id == policy.AvaClientId);
        if (client is not null)
        {
            client.DefaultTravelPolicyId = policy.Id;
            client.LastUpdated = DateTime.UtcNow;
        }

        await _db.TravelPolicies.AddAsync(policy, ct);
        await _db.SaveChangesAsync(ct);
        return policy;
    }

    public async Task<TravelPolicy> CreateDefaultAsync(TravelPolicy policy, CancellationToken ct = default)
    {
        if (policy is null) throw new ArgumentNullException(nameof(policy));
        if (string.IsNullOrWhiteSpace(policy.AvaClientId))
            throw new ArgumentException("AvaClientId must be provided.", nameof(policy));
        if (string.IsNullOrWhiteSpace(policy.PolicyName))
            throw new ArgumentException("PolicyName must be provided.", nameof(policy));
        if (string.IsNullOrWhiteSpace(policy.DefaultCurrencyCode))
            throw new ArgumentException("DefaultCurrencyCode must be provided.", nameof(policy));

        // Ensure ID present (policy.Id is generated by the model by default, but be defensive)
        if (string.IsNullOrWhiteSpace(policy.Id))
            policy.Id = NanoidDotNet.Nanoid.Generate(NanoidDotNet.Nanoid.Alphabets.LettersAndDigits.ToUpper(), 14);

        NormalizeAirlineCodes(policy);

        // find the existing AvaClient to update it now
        var client = await _db.AvaClients.FirstOrDefaultAsync(x => x.Id == policy.AvaClientId);
        if (client is not null)
        {
            client.DefaultTravelPolicyId = policy.Id;
            client.LastUpdated = DateTime.UtcNow;
        }

        await _db.TravelPolicies.AddAsync(policy, ct);
        await _db.SaveChangesAsync(ct);
        return policy;
    }

    // -----------------------------
    // READ
    // -----------------------------
    public async Task<TravelPolicy?> GetByIdAsync(string id, CancellationToken ct = default)
        => await _db.TravelPolicies
            .AsNoTracking()
            .Include(x => x.Regions)
            .Include(x => x.Continents)
            .Include(x => x.Countries)
            .Include(x => x.DisabledCountries)
            .FirstOrDefaultAsync(x => x.Id == id, ct);

    public async Task<IReadOnlyList<TravelPolicy>> GetAllAsync(CancellationToken ct = default)
        => await _db.TravelPolicies
            .AsNoTracking()
            .OrderBy(x => x.AvaClientId)
            .ThenBy(x => x.PolicyName)
            .ToListAsync(ct);

    public async Task<IReadOnlyList<TravelPolicy>> GetForClientAsync(string clientId, CancellationToken ct = default)
    {
        if (string.IsNullOrWhiteSpace(clientId)) return Array.Empty<TravelPolicy>();
        return await _db.TravelPolicies
            .AsNoTracking()
            .Where(x => x.AvaClientId == clientId)
            .OrderBy(x => x.PolicyName)
            .ToListAsync(ct);
    }

    // -----------------------------
    // UPDATE (replace whole object)
    // -----------------------------
    public async Task<TravelPolicy> UpdateAsync(TravelPolicy policy, CancellationToken ct = default)
    {
        if (policy is null) throw new ArgumentNullException(nameof(policy));
        if (string.IsNullOrWhiteSpace(policy.Id))
            throw new ArgumentException("Id must be provided for update.", nameof(policy));
        if (string.IsNullOrWhiteSpace(policy.AvaClientId))
            throw new ArgumentException("AvaClientId must be provided.", nameof(policy));
        if (string.IsNullOrWhiteSpace(policy.PolicyName))
            throw new ArgumentException("PolicyName must be provided.", nameof(policy));
        if (string.IsNullOrWhiteSpace(policy.DefaultCurrencyCode))
            throw new ArgumentException("DefaultCurrencyCode must be provided.", nameof(policy));

        NormalizeAirlineCodes(policy);

        // We assume related collections are managed via separate API paths.
        _db.Attach(policy);
        _db.Entry(policy).State = EntityState.Modified;

        await _db.SaveChangesAsync(ct);
        return policy;
    }

    // -----------------------------
    // DELETE
    // -----------------------------
    public async Task<bool> DeleteAsync(string id, CancellationToken ct = default)
    {
        var existing = await _db.TravelPolicies.FindAsync([id], ct);
        if (existing is null) return false;

        _db.TravelPolicies.Remove(existing);
        await _db.SaveChangesAsync(ct);
        return true;
    }

    // -----------------------------
    // UTIL
    // -----------------------------
    public async Task<bool> ExistsAsync(string id, CancellationToken ct = default)
        => await _db.TravelPolicies.AsNoTracking().AnyAsync(x => x.Id == id, ct);

    public async Task<bool> SetAsDefaultAsync(string policyId, string avaClientId, CancellationToken ct = default)
    {
        var client = await _db.AvaClients.FirstOrDefaultAsync(x => x.Id == avaClientId);
        if (client is not null)
        {
            client.DefaultTravelPolicyId = policyId;
            client.LastUpdated = DateTime.UtcNow;
            await _db.SaveChangesAsync(ct);
            return true;
        }
        return false;
    }

    // -----------------------------
    // Helpers
    // -----------------------------
    private static void NormalizeAirlineCodes(TravelPolicy policy)
    {
        // Guarantee non-null arrays and normalized content
        policy.IncludedAirlineCodes = (policy.IncludedAirlineCodes ?? Array.Empty<string>())
            .Where(s => !string.IsNullOrWhiteSpace(s))
            .Select(s => s.Trim().ToUpperInvariant())
            .Distinct()
            .ToArray();

        policy.ExcludedAirlineCodes = (policy.ExcludedAirlineCodes ?? Array.Empty<string>())
            .Where(s => !string.IsNullOrWhiteSpace(s))
            .Select(s => s.Trim().ToUpperInvariant())
            .Distinct()
            .ToArray();
    }
}
